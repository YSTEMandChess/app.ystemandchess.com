{"version":3,"sources":["packages/core/core-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","core","testing","compiler","this","_global","window","runInTestZone","fn","context","finishCallback","failCallback","currentZone","Zone","current","AsyncTestZoneSpec","undefined","Error","ProxyZoneSpec","proxyZoneSpec","get","assertPresent","proxyZone","getZoneWith","previousDelegate","getDelegate","parent","run","testZoneSpec","setDelegate","error","runGuarded","ComponentFixture","componentRef","ngZone","_autoDetect","_this","_isStable","_isDestroyed","_resolve","_promise","_onUnstableSubscription","_onStableSubscription","_onMicrotaskEmptySubscription","_onErrorSubscription","changeDetectorRef","elementRef","location","debugElement","getDebugNode","nativeElement","componentInstance","instance","runOutsideAngular","onUnstable","subscribe","next","onMicrotaskEmpty","detectChanges","onStable","scheduleMicroTask","hasPendingMacrotasks","onError","prototype","_tick","checkNoChanges","autoDetectChanges","autoDetect","isStable","whenStable","Promise","resolve","res","_getRenderer","_renderer","injector","RendererFactory2","whenRenderingDone","renderer","destroy","unsubscribe","_Zone","FakeAsyncTestZoneSpec","_fakeAsyncTestZoneSpec","resetFakeAsyncZoneFallback","resetDelegate","_inFakeAsyncCall","_getFakeAsyncZoneSpec","flushMicrotasksFallback","flushMicrotasks","_Zone$1","fakeAsyncTestModule","__symbol__","resetFakeAsyncZone","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__awaiter","thisArg","_arguments","P","generator","reject","fulfilled","value","step","e","rejected","result","done","adopt","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__values","o","m","__read","ar","__spread","concat","AsyncTestCompleter","rej","_reject","fail","stackTrace","enumerable","configurable","resolveComponentResources","resourceResolver","componentResolved","urlMap","Map","cachedResourceResolve","url","promise","resp","set","unwrapResponse","componentResourceResolutionQueue","forEach","component","type","promises","templateUrl","template","styleUrls","styles","styleOffset","styleUrl","index","style","splice","indexOf","fullyResolved","all","componentDefResolved","componentDefPendingResolution","delete","clearResolutionOfComponentResourcesQueue","Set","isComponentDefPendingResolution","has","old","response","text","_nextReferenceId","MetadataOverrider","_references","overrideMetadata","metadataClass","oldMetadata","override","props","_valueProps","obj","keys","prop","startsWith","proto","getPrototypeOf","protoProp","remove","add","ɵstringify","setMetadata","metadata","removeMetadata","references","removeObjects","_loop_1","removeValue","isArray","_propHashKey","_loop_2","propValue","filter","addMetadata","addValue","propName","JSON","stringify","_serializeReference","ref","id","TestingModuleOverride","reflection","ɵReflectionCapabilities","OverrideResolver","overrides","resolved","addOverride","setOverrides","clear","_a","_b","getAnnotation","annotations","annotation","Directive","Component","Pipe","NgModule","overrider_1","DirectiveResolver","_super","ComponentResolver","PipeResolver","NgModuleResolver","R3TestBedCompiler","platform","additionalModuleTypes","originalComponentResolutionQueue","declarations","imports","providers","schemas","pendingComponents","pendingDirectives","pendingPipes","seenComponents","seenDirectives","overriddenModules","existingComponentStyles","resolvers","initResolvers","directive","pipe","componentToModuleScope","initialNgDefs","defCleanupOps","_injector","compilerProviders","providerOverrides","rootProviderOverrides","providerOverridesByModule","providerOverridesByToken","moduleProvidersOverridden","testModuleRef","testModuleType","DynamicTestModule","setCompilerProviders","configureTestingModule","moduleDef","_c","_d","queueTypeArray","DECLARATION","queueTypesFromModulesArray","overrideModule","ngModule","invalidTypeError","name","recompileNgModule","overrideComponent","overrideDirective","overridePipe","overrideProvider","token","provider","providerDef","useFactory","provide","deps","multi","useValue","injectableDef","ɵgetInjectableDef","providedIn","existingOverrides","overrideTemplateUsingTestingModule","def","ɵNG_COMP_DEF","overrideStyleUrls","OVERRIDE_TEMPLATE","compileComponents","resourceLoader_1","clearComponentResolutionQueue","compileTypesSync","ResourceLoader","finalize","compileTestModule","applyTransitiveScopes","applyProviderOverrides","patchComponentsWithExistingStyles","ɵRender3NgModuleRef","ApplicationInitStatus","runInitializers","localeId","LOCALE_ID","ɵDEFAULT_LOCALE_ID","ɵsetLocaleId","_compileNgModuleSync","moduleType","applyProviderOverridesToModule","_compileNgModuleAsync","_getModuleResolver","_getComponentFactories","maybeUnwrapFn","ɵmod","reduce","factories","declaration","componentDef","ɵcmp","ɵRender3ComponentFactory","needsAsyncResources","maybeStoreNgDef","ɵcompileComponent","ɵNG_DIR_DEF","ɵcompileDirective","ɵNG_PIPE_DEF","ɵcompilePipe","size","affectedModules","collectModulesAffectedByOverrides","ɵNG_MOD_DEF","storeFieldOfDefOnType","transitiveCompileScopes","moduleToScope","componentType","moduleScope","isTestingModule","isTestingModuleOverride","ɵtransitiveScopesFor","getScopeOfModule","ɵpatchComponentDefWithScope","maybeApplyOverrides","field","hasProviderOverrides","patchDefWithProviderOverrides","e_1","e_2","injectorDef","ɵNG_INJ_DEF","getOverriddenProviders","imports_1","imports_1_1","importedModule","e_1_1","flatten","object","fieldName","originalValue","e_2_1","arr","e_3","arr_1","arr_1_1","queueType","e_3_1","ɵcompileNgModuleDefs","processedNgModuleDefs","queueTypesFromModulesArrayRecur","e_4","arr_2","arr_2_1","hasNgModuleDef","e_4_1","seenModules","calcAffectedModulesRecur","path","e_5","arr_3","arr_3_1","item","e_5_1","currentDef","defField","restoreComponentResolutionQueue","queue","restoreOriginalState","forEachRight","descriptor","RootScopeModule","NgZone","enableLongStackTrace","Compiler","R3TestCompiler","CompilerModule","COMPILER_OPTIONS","opts","CompilerModuleFactory","ɵNgModuleFactory","getSingleProviderOverrides","getProviderToken","getProviderOverrides","flattenedProviders","overriddenProviders","final","seenOverriddenProviders","unshift","providersResolver","resolver_1","processProvidersFn_1","ngDef","maybeFn","Function","values","mapFn","out","getProviderField","idx","expectedType","testBed","compileModuleSync","compileModuleAsync","compileModuleAndAllComponentsSync","ngModuleFactory","componentFactories","ModuleWithComponentFactories","compileModuleAndAllComponentsAsync","clearCache","clearCacheFor","getModuleId","meta","TestComponentRenderer","insertRootElement","rootElementId","ComponentFixtureAutoDetect","InjectionToken","ComponentFixtureNoNgZone","_nextRootElementId","TestBedRender3","_compiler","_testModuleRef","_activeFixtures","_globalCompilationChecked","initTestEnvironment","aotSummaries","_getTestBedRender3","resetTestEnvironment","configureCompiler","config","overrideTemplate","inject","notFoundValue","flags","Injector","THROW_IF_NOT_FOUND","InjectFlags","Default","createComponent","resetTestingModule","checkGlobalCompilationFinished","ɵresetCompiledComponents","destroyActiveFixtures","useJit","assertNotInstantiated","UNDEFINED","execute","tokens","params","map","testComponentRenderer","rootElId","noNgZone","componentFactory","initComponent","NULL","fixture","methodName","methodDescription","ɵflushModuleScopingQueueAsMuchAsPossible","console","stacktrace","unimplemented","testBed$1","TestingCompiler","loadAotSummaries","summaries","getComponentFactory","getComponentFromError","Injectable","TestingCompilerFactory","_nextRootElementId$1","TestBedViewEngine","_instantiated","_moduleRef","_moduleFactory","_compilerOptions","_moduleOverrides","_componentOverrides","_directiveOverrides","_pipeOverrides","_providers","_declarations","_imports","_schemas","_testEnvAotSummaries","_aotSummaries","_templateOverrides","_isRoot","_rootProviderOverrides","_getTestBedViewEngine","getTestBed","ɵclearOverrides","_assertNotInstantiated","_createCompilerAndModule","moduleAndComponentFactories","_initIfNeeded","errorCompType","compFactory","templateOf","ɵoverrideComponentView","shouldCoalesceEventChangeDetection","ngZoneInjector","TestBed","entry","rootScopeImports","jit","ɵINJECTOR_SCOPE","compilerFactory","createTestingCompiler","overrideProviderImpl","deprecated","dep","depToken","depFlags","Optional","SkipSelf","ɵoverrideProvider","deprecatedBehavior","OverrideComponent","selector","ɵivyEnabled","completer","InjectSetupWrapper","_moduleDef","_addModule","_global$1","beforeEach","__core_private_testing_placeholder__","async","asyncTest","asyncFallback","jasmine","err","discardPeriodicTasks","discardPeriodicTasksFallback","pendingPeriodicTimers","fakeAsync","fakeAsyncFallback","args","_i","lastProxyZoneSpec","pendingTimers","flush","maxTurns","flushFallback","tick","millis","tickOptions","processNewMacroTasksSynchronously","tickFallback","withModule","ɵMetadataOverrider","ɵTestingCompiler","ɵTestingCompilerFactory","ɵangular_packages_core_testing_testing_a","ɵangular_packages_core_testing_testing_b","ɵangular_packages_core_testing_testing_c"],"mappings":";;;;;CAMC,SAAUA,EAAQC,GACI,iBAAZC,SAA0C,oBAAXC,OAAyBF,EAAQC,QAASE,QAAQ,iBAAkBA,QAAQ,sBAChG,mBAAXC,QAAyBA,OAAOC,IAAMD,OAAO,wBAAyB,CAAC,UAAW,gBAAiB,qBAAsBJ,GACtGA,IAAzBD,EAASA,GAAUO,MAAsBC,GAAKR,EAAOQ,IAAM,GAAIR,EAAOQ,GAAGC,KAAOT,EAAOQ,GAAGC,MAAQ,GAAIT,EAAOQ,GAAGC,KAAKC,QAAU,IAAKV,EAAOQ,GAAGC,KAAMT,EAAOQ,GAAGG,UAHnK,CAIEC,MAAM,SAAWV,EAASO,EAAME,GAAY;;;;;;;OAS1C,IAAIE,EAA6B,oBAAXC,OAAyBd,OAASc,OAqDxD,SAASC,EAAcC,EAAIC,EAASC,EAAgBC,GAChD,IAAIC,EAAcC,KAAKC,QACnBC,EAAoBF,KAAwB,kBAChD,QAA0BG,IAAtBD,EACA,MAAM,IAAIE,MAAM,8JAGpB,IAAIC,EAAgBL,KAAoB,cACxC,QAAsBG,IAAlBE,EACA,MAAM,IAAID,MAAM,qJAGpB,IAAIE,EAAgBD,EAAcE,MAClCF,EAAcG,gBAGd,IAAIC,EAAYT,KAAKC,QAAQS,YAAY,iBACrCC,EAAmBL,EAAcM,cAuBrC,OAtBAH,EAAUI,OAAOC,KAAI,WACjB,IAAIC,EAAe,IAAIb,GAAkB,WAErCH,EAAYe,KAAI,WACRR,EAAcM,eAAiBG,GAE/BT,EAAcU,YAAYL,GAE9Bd,UAEL,SAAUoB,GAETlB,EAAYe,KAAI,WACRR,EAAcM,eAAiBG,GAE/BT,EAAcU,YAAYL,GAE9Bb,EAAamB,QAElB,QACHX,EAAcU,YAAYD,MAEvBf,KAAKC,QAAQiB,WAAWvB,EAAIC;;;;;;;;;;;;;;;AAyDvC,IAAIuB,EAAkC,WAClC,SAASA,EAAiBC,EAAcC,EAAQC,GAC5C,IAAIC,EAAQhC,KACZA,KAAK6B,aAAeA,EACpB7B,KAAK8B,OAASA,EACd9B,KAAK+B,YAAcA,EACnB/B,KAAKiC,WAAY,EACjBjC,KAAKkC,cAAe,EACpBlC,KAAKmC,SAAW,KAChBnC,KAAKoC,SAAW,KAChBpC,KAAKqC,wBAA0B,KAC/BrC,KAAKsC,sBAAwB,KAC7BtC,KAAKuC,8BAAgC,KACrCvC,KAAKwC,qBAAuB,KAC5BxC,KAAKyC,kBAAoBZ,EAAaY,kBACtCzC,KAAK0C,WAAab,EAAac,SAC/B3C,KAAK4C,aAAe/C,EAAKgD,aAAa7C,KAAK0C,WAAWI,eACtD9C,KAAK+C,kBAAoBlB,EAAamB,SACtChD,KAAK8C,cAAgB9C,KAAK0C,WAAWI,cACrC9C,KAAK6B,aAAeA,EACpB7B,KAAK8B,OAASA,EACVA,GAGAA,EAAOmB,mBAAkB,WACrBjB,EAAMK,wBAA0BP,EAAOoB,WAAWC,UAAU,CACxDC,KAAM,WACFpB,EAAMC,WAAY,KAG1BD,EAAMO,8BAAgCT,EAAOuB,iBAAiBF,UAAU,CACpEC,KAAM,WACEpB,EAAMD,aAGNC,EAAMsB,eAAc,MAIhCtB,EAAMM,sBAAwBR,EAAOyB,SAASJ,UAAU,CACpDC,KAAM,WACFpB,EAAMC,WAAY,EAEK,OAAnBD,EAAMI,UA0IlC,SAASoB,EAAkBpD,GACvBK,KAAKC,QAAQ8C,kBAAkB,oBAAqBpD;;;;;;;OAvI5BoD,EAAkB,WACT1B,EAAO2B,sBACe,OAAnBzB,EAAMI,WACNJ,EAAMG,UAAS,GACfH,EAAMG,SAAW,KACjBH,EAAMI,SAAW,YAOzCJ,EAAMQ,qBAAuBV,EAAO4B,QAAQP,UAAU,CAClDC,KAAM,SAAU1B,GACZ,MAAMA,QAsH1B,OAhHAE,EAAiB+B,UAAUC,MAAQ,SAAUC,GACzC7D,KAAKyC,kBAAkBa,gBACnBO,GACA7D,KAAK6D,kBAMbjC,EAAiB+B,UAAUL,cAAgB,SAAUO,GACjD,IAAI7B,EAAQhC,UACW,IAAnB6D,IAA6BA,GAAiB,GAC/B,MAAf7D,KAAK8B,OAGL9B,KAAK8B,OAAOP,KAAI,WACZS,EAAM4B,MAAMC,MAKhB7D,KAAK4D,MAAMC,IAMnBjC,EAAiB+B,UAAUE,eAAiB,WACxC7D,KAAKyC,kBAAkBoB,kBAO3BjC,EAAiB+B,UAAUG,kBAAoB,SAAUC,GAErD,QADmB,IAAfA,IAAyBA,GAAa,GACvB,MAAf/D,KAAK8B,OACL,MAAM,IAAIjB,MAAM,sEAEpBb,KAAK+B,YAAcgC,EACnB/D,KAAKsD,iBAMT1B,EAAiB+B,UAAUK,SAAW,WAClC,OAAOhE,KAAKiC,YAAcjC,KAAK8B,OAAO2B,sBAQ1C7B,EAAiB+B,UAAUM,WAAa,WACpC,IAAIjC,EAAQhC,KACZ,OAAIA,KAAKgE,WACEE,QAAQC,SAAQ,IAEA,OAAlBnE,KAAKoC,WAIVpC,KAAKoC,SAAW,IAAI8B,SAAQ,SAAUE,GAClCpC,EAAMG,SAAWiC,MAJdpE,KAAKoC,WASpBR,EAAiB+B,UAAUU,aAAe,WAItC,YAHuBzD,IAAnBZ,KAAKsE,YACLtE,KAAKsE,UAAYtE,KAAK6B,aAAa0C,SAASvD,IAAInB,EAAK2E,iBAAkB,OAEpExE,KAAKsE,WAKhB1C,EAAiB+B,UAAUc,kBAAoB,WAC3C,IAAIC,EAAW1E,KAAKqE,eACpB,OAAIK,GAAYA,EAASD,kBACdC,EAASD,oBAEbzE,KAAKiE,cAKhBrC,EAAiB+B,UAAUgB,QAAU,WAC5B3E,KAAKkC,eACNlC,KAAK6B,aAAa8C,UACkB,MAAhC3E,KAAKqC,0BACLrC,KAAKqC,wBAAwBuC,cAC7B5E,KAAKqC,wBAA0B,MAED,MAA9BrC,KAAKsC,wBACLtC,KAAKsC,sBAAsBsC,cAC3B5E,KAAKsC,sBAAwB,MAES,MAAtCtC,KAAKuC,gCACLvC,KAAKuC,8BAA8BqC,cACnC5E,KAAKuC,8BAAgC,MAER,MAA7BvC,KAAKwC,uBACLxC,KAAKwC,qBAAqBoC,cAC1B5E,KAAKwC,qBAAuB,MAEhCxC,KAAKkC,cAAe,IAGrBN,EAnL0B,GAoMjCiD,EAAwB,oBAATpE,KAAuBA,KAAO,KAC7CqE,EAAwBD,GAASA,EAA6B,sBAC9D/D,EAAgB+D,GAASA,EAAqB,cAC9CE,EAAyB,KAO7B,SAASC,IACLD,EAAyB,KAEzBjE,GAAiBA,EAAcG,gBAAgBgE,gBAEnD,IAAIC,GAAmB,EAgEvB,SAASC,IACL,GAA8B,MAA1BJ,EACA,MAAM,IAAIlE,MAAM,0EAEpB,OAAOkE,EAiDX,SAASK,IACLD,IAAwBE;;;;;;;OAU5B,IAAIC,EAA0B,oBAAT7E,KAAuBA,KAAO,KAC/C8E,EAAsBD,GAAWA,EAAQA,EAAQE,WAAW,kBAOhE,SAASC,IACL,OAAIF,EACOA,EAAoBE,qBAGpBT;;;;;;;;;;;;;;;AA0Jf,IAAIU,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAG5B,SAASO,EAAUR,EAAGC,GAElB,SAASQ,IAAOpG,KAAKqG,YAAcV,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEhC,UAAkB,OAANiC,EAAaC,OAAOS,OAAOV,IAAMQ,EAAGzC,UAAYiC,EAAEjC,UAAW,IAAIyC,GAGnF,IAAIG,EAAW,WAQX,OAPAA,EAAWV,OAAOW,QAAU,SAASD,EAASE,GAC1C,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAIV,KADTS,EAAIG,UAAUF,GACOd,OAAOlC,UAAUuC,eAAea,KAAKL,EAAGT,KAAIQ,EAAER,GAAKS,EAAET,IAE9E,OAAOQ,IAEKO,MAAMhH,KAAM6G,YAehC,SAASI,EAAWC,EAAYC,EAAQC,EAAKC,GACzC,IAA2H1B,EAAvH2B,EAAIT,UAAUC,OAAQS,EAAID,EAAI,EAAIH,EAAkB,OAATE,EAAgBA,EAAOxB,OAAO2B,yBAAyBL,EAAQC,GAAOC,EACrH,GAAuB,iBAAZI,SAAoD,mBAArBA,QAAQC,SAAyBH,EAAIE,QAAQC,SAASR,EAAYC,EAAQC,EAAKC,QACpH,IAAK,IAAIV,EAAIO,EAAWJ,OAAS,EAAGH,GAAK,EAAGA,KAAShB,EAAIuB,EAAWP,MAAIY,GAAKD,EAAI,EAAI3B,EAAE4B,GAAKD,EAAI,EAAI3B,EAAEwB,EAAQC,EAAKG,GAAK5B,EAAEwB,EAAQC,KAASG,GAChJ,OAAOD,EAAI,GAAKC,GAAK1B,OAAO8B,eAAeR,EAAQC,EAAKG,GAAIA,EAWhE,SAASK,EAAUC,EAASC,EAAYC,EAAGC,GAEvC,OAAO,IAAKD,IAAMA,EAAI7D,WAAU,SAAUC,EAAS8D,GAC/C,SAASC,EAAUC,GAAS,IAAMC,EAAKJ,EAAU5E,KAAK+E,IAAW,MAAOE,GAAKJ,EAAOI,IACpF,SAASC,EAASH,GAAS,IAAMC,EAAKJ,EAAiB,MAAEG,IAAW,MAAOE,GAAKJ,EAAOI,IACvF,SAASD,EAAKG,GAAUA,EAAOC,KAAOrE,EAAQoE,EAAOJ,OAJzD,SAASM,EAAMN,GAAS,OAAOA,aAAiBJ,EAAII,EAAQ,IAAIJ,GAAE,SAAU5D,GAAWA,EAAQgE,MAI7BM,CAAMF,EAAOJ,OAAOO,KAAKR,EAAWI,GAClGF,GAAMJ,EAAYA,EAAUhB,MAAMa,EAASC,GAAc,KAAK1E,WAItE,SAASuF,EAAYd,EAASe,GAC1B,IAAsGC,EAAGC,EAAGrC,EAAGsC,EAA3GC,EAAI,CAAEC,MAAO,EAAGC,KAAM,WAAa,GAAW,EAAPzC,EAAE,GAAQ,MAAMA,EAAE,GAAI,OAAOA,EAAE,IAAO0C,KAAM,GAAIC,IAAK,IAChG,OAAOL,EAAI,CAAE3F,KAAMiG,EAAK,GAAIC,MAASD,EAAK,GAAIE,OAAUF,EAAK,IAAwB,mBAAXG,SAA0BT,EAAES,OAAOC,UAAY,WAAa,OAAOzJ,OAAU+I,EACvJ,SAASM,EAAKzC,GAAK,OAAO,SAAU8C,GAAK,OACzC,SAAStB,EAAKuB,GACV,GAAId,EAAG,MAAM,IAAIe,UAAU,mCAC3B,KAAOZ,GAAG,IACN,GAAIH,EAAI,EAAGC,IAAMrC,EAAY,EAARkD,EAAG,GAASb,EAAU,OAAIa,EAAG,GAAKb,EAAS,SAAOrC,EAAIqC,EAAU,SAAMrC,EAAEM,KAAK+B,GAAI,GAAKA,EAAE1F,SAAWqD,EAAIA,EAAEM,KAAK+B,EAAGa,EAAG,KAAKnB,KAAM,OAAO/B,EAE3J,OADIqC,EAAI,EAAGrC,IAAGkD,EAAK,CAAS,EAARA,EAAG,GAAQlD,EAAE0B,QACzBwB,EAAG,IACP,KAAK,EAAG,KAAK,EAAGlD,EAAIkD,EAAI,MACxB,KAAK,EAAc,OAAXX,EAAEC,QAAgB,CAAEd,MAAOwB,EAAG,GAAInB,MAAM,GAChD,KAAK,EAAGQ,EAAEC,QAASH,EAAIa,EAAG,GAAIA,EAAK,CAAC,GAAI,SACxC,KAAK,EAAGA,EAAKX,EAAEI,IAAIS,MAAOb,EAAEG,KAAKU,MAAO,SACxC,QACI,MAAkBpD,GAAZA,EAAIuC,EAAEG,MAAYrC,OAAS,GAAKL,EAAEA,EAAEK,OAAS,KAAkB,IAAV6C,EAAG,IAAsB,IAAVA,EAAG,IAAW,CAAEX,EAAI,EAAG,SACjG,GAAc,IAAVW,EAAG,MAAclD,GAAMkD,EAAG,GAAKlD,EAAE,IAAMkD,EAAG,GAAKlD,EAAE,IAAM,CAAEuC,EAAEC,MAAQU,EAAG,GAAI,MAC9E,GAAc,IAAVA,EAAG,IAAYX,EAAEC,MAAQxC,EAAE,GAAI,CAAEuC,EAAEC,MAAQxC,EAAE,GAAIA,EAAIkD,EAAI,MAC7D,GAAIlD,GAAKuC,EAAEC,MAAQxC,EAAE,GAAI,CAAEuC,EAAEC,MAAQxC,EAAE,GAAIuC,EAAEI,IAAIU,KAAKH,GAAK,MACvDlD,EAAE,IAAIuC,EAAEI,IAAIS,MAChBb,EAAEG,KAAKU,MAAO,SAEtBF,EAAKf,EAAK7B,KAAKc,EAASmB,GAC1B,MAAOX,GAAKsB,EAAK,CAAC,EAAGtB,GAAIS,EAAI,EAAK,QAAUD,EAAIpC,EAAI,EACtD,GAAY,EAARkD,EAAG,GAAQ,MAAMA,EAAG,GAAI,MAAO,CAAExB,MAAOwB,EAAG,GAAKA,EAAG,QAAK,EAAQnB,MAAM,GArB9BJ,CAAK,CAACxB,EAAG8C,MA6B7D,SAASK,EAASC,GACd,IAAItD,EAAsB,mBAAX8C,QAAyBA,OAAOC,SAAUQ,EAAIvD,GAAKsD,EAAEtD,GAAIC,EAAI,EAC5E,GAAIsD,EAAG,OAAOA,EAAElD,KAAKiD,GACrB,GAAIA,GAAyB,iBAAbA,EAAElD,OAAqB,MAAO,CAC1C1D,KAAM,WAEF,OADI4G,GAAKrD,GAAKqD,EAAElD,SAAQkD,OAAI,GACrB,CAAE7B,MAAO6B,GAAKA,EAAErD,KAAM6B,MAAOwB,KAG5C,MAAM,IAAIJ,UAAUlD,EAAI,0BAA4B,mCAGxD,SAASwD,EAAOF,EAAGpD,GACf,IAAIqD,EAAsB,mBAAXT,QAAyBQ,EAAER,OAAOC,UACjD,IAAKQ,EAAG,OAAOD,EACf,IAAmBzC,EAAYc,EAA3B1B,EAAIsD,EAAElD,KAAKiD,GAAOG,EAAK,GAC3B,IACI,WAAc,IAANvD,GAAgBA,KAAM,MAAQW,EAAIZ,EAAEvD,QAAQoF,MAAM2B,EAAGL,KAAKvC,EAAEY,OAExE,MAAOzG,GAAS2G,EAAI,CAAE3G,MAAOA,GAC7B,QACI,IACQ6F,IAAMA,EAAEiB,OAASyB,EAAItD,EAAU,SAAIsD,EAAElD,KAAKJ,GAElD,QAAU,GAAI0B,EAAG,MAAMA,EAAE3G,OAE7B,OAAOyI,EAGX,SAASC,IACL,IAAK,IAAID,EAAK,GAAIxD,EAAI,EAAGA,EAAIE,UAAUC,OAAQH,IAC3CwD,EAAKA,EAAGE,OAAOH,EAAOrD,UAAUF,KACpC,OAAOwD;;;;;;;;AAmFX,IAAIG,EAAoC,WACpC,SAASA,IACL,IAAItI,EAAQhC,KACZA,KAAKoC,SAAW,IAAI8B,SAAQ,SAAUE,EAAKmG,GACvCvI,EAAMG,SAAWiC,EACjBpC,EAAMwI,QAAUD,KAgBxB,OAbAD,EAAmB3G,UAAU6E,KAAO,SAAUL,GAC1CnI,KAAKmC,SAASgG,IAElBmC,EAAmB3G,UAAU8G,KAAO,SAAU/I,EAAOgJ,GACjD1K,KAAKwK,QAAQ9I,IAEjBmE,OAAO8B,eAAe2C,EAAmB3G,UAAW,UAAW,CAC3D3C,IAAK,WACD,OAAOhB,KAAKoC,UAEhBuI,YAAY,EACZC,cAAc,IAEXN,EArB4B;;;;;;;OA+DvC,SAASO,EAA0BC,GAE/B,IAAIC,EAAoB,GAEpBC,EAAS,IAAIC,IACjB,SAASC,EAAsBC,GAC3B,IAAIC,EAAUJ,EAAOhK,IAAImK,GACzB,IAAKC,EAAS,CACV,IAAIC,EAAOP,EAAiBK,GAC5BH,EAAOM,IAAIH,EAAKC,EAAUC,EAAK3C,KAAK6C,IAExC,OAAOH,EA0BX,OAxBAI,EAAiCC,SAAQ,SAAUC,EAAWC,GAC1D,IAAIC,EAAW,GACXF,EAAUG,aACVD,EAAS9B,KAAKoB,EAAsBQ,EAAUG,aAAanD,MAAK,SAAUoD,GACtEJ,EAAUI,SAAWA,MAG7B,IAAIC,EAAYL,EAAUK,UACtBC,EAASN,EAAUM,SAAWN,EAAUM,OAAS,IACjDC,EAAcP,EAAUM,OAAOlF,OACnCiF,GAAaA,EAAUN,SAAQ,SAAUS,EAAUC,GAC/CH,EAAOlC,KAAK,IACZ8B,EAAS9B,KAAKoB,EAAsBgB,GAAUxD,MAAK,SAAU0D,GACzDJ,EAAOC,EAAcE,GAASC,EAC9BL,EAAUM,OAAON,EAAUO,QAAQJ,GAAW,GACtB,GAApBH,EAAUjF,SACV4E,EAAUK,eAAYnL,UAIlC,IAAI2L,EAAgBrI,QAAQsI,IAAIZ,GAAUlD,MAAK,WAAc,OAsCrE,SAAS+D,EAAqBd,GAC1Be,EAA8BC,OAAOhB;;;;;;;OAvCmCc,CAAqBd,MACzFZ,EAAkBjB,KAAKyC,MAE3BK,IACO1I,QAAQsI,IAAIzB,GAAmBrC,MAAK,eAE/C,IAAI8C,EAAmC,IAAIP,IAEvCyB,EAAgC,IAAIG,IAOxC,SAASC,EAAgCnB,GACrC,OAAOe,EAA8BK,IAAIpB,GAM7C,SAASiB,IACL,IAAII,EAAMxB,EAEV,OADAA,EAAmC,IAAIP,IAChC+B,EAUX,SAASzB,EAAe0B,GACpB,MAA0B,iBAAZA,EAAuBA,EAAWA,EAASC,OAa7D,IAAIC,EAAmB,EACnBC,EAAmC,WACnC,SAASA,IACLpN,KAAKqN,YAAc,IAAIpC,IAyB3B,OAnBAmC,EAAkBzJ,UAAU2J,iBAAmB,SAAUC,EAAeC,EAAaC,GACjF,IAAIC,EAAQ,GAIZ,GAHIF,GAoFZ,SAASG,EAAYC,GACjB,IAAIF,EAAQ,GAEZ7H,OAAOgI,KAAKD,GAAKnC,SAAQ,SAAUqC,GAC1BA,EAAKC,WAAW,MACjBL,EAAM5D,KAAKgE,MAKnB,IADA,IAAIE,EAAQJ,EACLI,EAAQnI,OAAOoI,eAAeD,IACjCnI,OAAOgI,KAAKG,GAAOvC,SAAQ,SAAUyC,GACjC,IAAI7G,EAAOxB,OAAO2B,yBAAyBwG,EAAOE,IAC7CA,EAAUH,WAAW,MAAQ1G,GAAQ,QAASA,GAC/CqG,EAAM5D,KAAKoE,MAIvB,OAAOR;;;;;;;OArGCC,CAAYH,GAAa/B,SAAQ,SAAUqC,GAAQ,OAAOJ,EAAMI,GAAQN,EAAYM,MAEpFL,EAASnC,IAAK,CACd,GAAImC,EAASU,QAAUV,EAASW,IAC5B,MAAM,IAAIvN,MAAM,6BAA+BhB,EAAKwO,WAAWd,GAAiB,uBAyDhG,SAASe,EAAYC,EAAUjD,GAC3B,IAAK,IAAIwC,KAAQxC,EACbiD,EAAST,GAAQxC,EAAIwC,GAzDjBQ,CAAYZ,EAAOD,EAASnC,KAQhC,OANImC,EAASU,QAUrB,SAASK,EAAeD,EAAUJ,EAAQM,GACtC,IAAIC,EAAgB,IAAI7B,IACpB8B,EAAU,SAAUb,GACpB,IAAIc,EAAcT,EAAOL,GACrB9H,MAAM6I,QAAQD,GACdA,EAAYnD,SAAQ,SAAUtD,GAC1BuG,EAAcN,IAAIU,EAAahB,EAAM3F,EAAOsG,OAIhDC,EAAcN,IAAIU,EAAahB,EAAMc,EAAaH,KAG1D,IAAK,IAAIX,KAAQK,EACbQ,EAAQb,GAEZ,IAAIiB,EAAU,SAAUjB,GACpB,IAAIkB,EAAYT,EAAST,GACrB9H,MAAM6I,QAAQG,GACdT,EAAST,GAAQkB,EAAUC,QAAO,SAAU9G,GAAS,OAAQuG,EAAc3B,IAAI+B,EAAahB,EAAM3F,EAAOsG,OAGrGC,EAAc3B,IAAI+B,EAAahB,EAAMkB,EAAWP,MAChDF,EAAST,QAAQlN,IAI7B,IAAK,IAAIkN,KAAQS,EACbQ,EAAQjB,GArCJU,CAAed,EAAOD,EAASU,OAAQnO,KAAKqN,aAE5CI,EAASW,KAsCrB,SAASc,EAAYX,EAAUH,GAC3B,IAAK,IAAIN,KAAQM,EAAK,CAClB,IAAIe,EAAWf,EAAIN,GACfkB,EAAYT,EAAST,GAErBS,EAAST,GADI,MAAbkB,GAAqBhJ,MAAM6I,QAAQG,GAClBA,EAAU3E,OAAO8E,GAGjBA,GA7CjBD,CAAYxB,EAAOD,EAASW,KAEzB,IAAIb,EAAcG,IAEtBN,EA3B2B,GA6EtC,SAAS0B,EAAaM,EAAUJ,EAAWP,GAOvC,OAAOW,EAAW,IAAMC,KAAKC,UAAUN,GANxB,SAAU5H,EAAKe,GAI1B,MAHqB,mBAAVA,IACPA,EAMZ,SAASoH,EAAoBC,EAAKf,GAC9B,IAAIgB,EAAKhB,EAAWzN,IAAIwO,GAKxB,OAJKC,IACDA,EAAK,GAAK5P,EAAKwO,WAAWmB,GAAOrC,IACjCsB,EAAWnD,IAAIkE,EAAKC,IAEjBA,EAZSF,CAAoBpH,EAAOsG,IAEhCtG,KAwCf,IA4HIuH,EA5HAC,EAAa,IAAI9P,EAAK+P,wBAItBC,EAAkC,WAClC,SAASA,IACL7P,KAAK8P,UAAY,IAAI7E,IACrBjL,KAAK+P,SAAW,IAAI9E,IAmDxB,OAjDA4E,EAAiBlM,UAAUqM,YAAc,SAAUrE,EAAM8B,GACrD,IAAIqC,EAAY9P,KAAK8P,UAAU9O,IAAI2K,IAAS,GAC5CmE,EAAUhG,KAAK2D,GACfzN,KAAK8P,UAAUxE,IAAIK,EAAMmE,GACzB9P,KAAK+P,SAASpD,OAAOhB,IAEzBkE,EAAiBlM,UAAUsM,aAAe,SAAUH,GAChD,IAAI9N,EAAQhC,KACZA,KAAK8P,UAAUI,QACfJ,EAAUrE,SAAQ,SAAU0E,GACxB,IAAIC,EAAKlG,EAAOiG,EAAI,GACpBnO,EAAMgO,YADyBI,EAAG,GAAeA,EAAG,QAI5DP,EAAiBlM,UAAU0M,cAAgB,SAAU1E,GAOjD,IANA,IAAI2E,EAAcX,EAAWW,YAAY3E,GAMhChF,EAAI2J,EAAYxJ,OAAS,EAAGH,GAAK,EAAGA,IAAK,CAC9C,IAAI4J,EAAaD,EAAY3J,GAG7B,GAFkB4J,aAAsB1Q,EAAK2Q,WAAaD,aAAsB1Q,EAAK4Q,WACjFF,aAAsB1Q,EAAK6Q,MAAQH,aAAsB1Q,EAAK8Q,SAE9D,OAAOJ,aAAsBvQ,KAAK2L,KAAO4E,EAAa,KAG9D,OAAO,MAEXV,EAAiBlM,UAAUQ,QAAU,SAAUwH,GAC3C,IAAI3J,EAAQhC,KACR+P,EAAW/P,KAAK+P,SAAS/O,IAAI2K,IAAS,KAC1C,IAAKoE,EAAU,CAEX,GADAA,EAAW/P,KAAKqQ,cAAc1E,GAChB,CACV,IAAImE,EAAY9P,KAAK8P,UAAU9O,IAAI2K,GACnC,GAAImE,EAAW,CACX,IAAIc,EAAc,IAAIxD,EACtB0C,EAAUrE,SAAQ,SAAUgC,GACxBsC,EAAWa,EAAYtD,iBAAiBtL,EAAM2J,KAAMoE,EAAUtC,OAI1EzN,KAAK+P,SAASzE,IAAIK,EAAMoE,GAE5B,OAAOA,GAEJF,EAtD0B,GAwDjCgB,EAAmC,SAAUC,GAE7C,SAASD,IACL,OAAkB,OAAXC,GAAmBA,EAAO9J,MAAMhH,KAAM6G,YAAc7G,KAS/D,OAXAmG,EAAU0K,EAAmBC,GAI7BjL,OAAO8B,eAAekJ,EAAkBlN,UAAW,OAAQ,CACvD3C,IAAK,WACD,OAAOnB,EAAK2Q,WAEhB7F,YAAY,EACZC,cAAc,IAEXiG,EAZ2B,CAapChB,GACEkB,EAAmC,SAAUD,GAE7C,SAASC,IACL,OAAkB,OAAXD,GAAmBA,EAAO9J,MAAMhH,KAAM6G,YAAc7G,KAS/D,OAXAmG,EAAU4K,EAAmBD,GAI7BjL,OAAO8B,eAAeoJ,EAAkBpN,UAAW,OAAQ,CACvD3C,IAAK,WACD,OAAOnB,EAAK4Q,WAEhB9F,YAAY,EACZC,cAAc,IAEXmG,EAZ2B,CAapClB,GACEmB,EAA8B,SAAUF,GAExC,SAASE,IACL,OAAkB,OAAXF,GAAmBA,EAAO9J,MAAMhH,KAAM6G,YAAc7G,KAS/D,OAXAmG,EAAU6K,EAAcF,GAIxBjL,OAAO8B,eAAeqJ,EAAarN,UAAW,OAAQ,CAClD3C,IAAK,WACD,OAAOnB,EAAK6Q,MAEhB/F,YAAY,EACZC,cAAc,IAEXoG,EAZsB,CAa/BnB,GACEoB,EAAkC,SAAUH,GAE5C,SAASG,IACL,OAAkB,OAAXH,GAAmBA,EAAO9J,MAAMhH,KAAM6G,YAAc7G,KAS/D,OAXAmG,EAAU8K,EAAkBH,GAI5BjL,OAAO8B,eAAesJ,EAAiBtN,UAAW,OAAQ,CACtD3C,IAAK,WACD,OAAOnB,EAAK8Q,UAEhBhG,YAAY,EACZC,cAAc,IAEXqG,EAZ0B,CAanCpB,IAUF,SAAWH,GACPA,EAAsBA,EAAmC,YAAI,GAAK,cAClEA,EAAsBA,EAAyC,kBAAI,GAAK,oBAF5E,CAGGA,IAA0BA,EAAwB,KAKrD,IAAIwB,EAAmC,WACnC,SAASA,EAAkBC,EAAUC,GACjCpR,KAAKmR,SAAWA,EAChBnR,KAAKoR,sBAAwBA,EAC7BpR,KAAKqR,iCAAmC,KAExCrR,KAAKsR,aAAe,GACpBtR,KAAKuR,QAAU,GACfvR,KAAKwR,UAAY,GACjBxR,KAAKyR,QAAU,GAEfzR,KAAK0R,kBAAoB,IAAI7E,IAC7B7M,KAAK2R,kBAAoB,IAAI9E,IAC7B7M,KAAK4R,aAAe,IAAI/E,IAExB7M,KAAK6R,eAAiB,IAAIhF,IAC1B7M,KAAK8R,eAAiB,IAAIjF,IAE1B7M,KAAK+R,kBAAoB,IAAIlF,IAG7B7M,KAAKgS,wBAA0B,IAAI/G,IACnCjL,KAAKiS,UAosBb,SAASC,IACL,MAAO,CACH3S,OAAQ,IAAI0R,EACZvF,UAAW,IAAIqF,EACfoB,UAAW,IAAItB,EACfuB,KAAM,IAAIpB,GAzsBOkB,GACjBlS,KAAKqS,uBAAyB,IAAIpH,IAKlCjL,KAAKsS,cAAgB,IAAIrH,IAGzBjL,KAAKuS,cAAgB,GACrBvS,KAAKwS,UAAY,KACjBxS,KAAKyS,kBAAoB,KACzBzS,KAAK0S,kBAAoB,GACzB1S,KAAK2S,sBAAwB,GAG7B3S,KAAK4S,0BAA4B,IAAI3H,IACrCjL,KAAK6S,yBAA2B,IAAI5H,IACpCjL,KAAK8S,0BAA4B,IAAIjG,IACrC7M,KAAK+S,cAAgB,KAMrB/S,KAAKgT,eAJD,SAASC,MA6qBjB,OAvqBA/B,EAAkBvN,UAAUuP,qBAAuB,SAAU1B,GACzDxR,KAAKyS,kBAAoBjB,EACzBxR,KAAKwS,UAAY,MAErBtB,EAAkBvN,UAAUwP,uBAAyB,SAAUC,GAC3D,IAAIjD,EAAIC,EAAIiD,EAAIC,OAEe1S,IAA3BwS,EAAU9B,eACVtR,KAAKuT,eAAeH,EAAU9B,aAAc5B,EAAsB8D,cACjErD,EAAKnQ,KAAKsR,cAAcxH,KAAK9C,MAAMmJ,EAAI/F,EAASgJ,EAAU9B,qBAGrC1Q,IAAtBwS,EAAU7B,UACVvR,KAAKyT,2BAA2BL,EAAU7B,UACzCnB,EAAKpQ,KAAKuR,SAASzH,KAAK9C,MAAMoJ,EAAIhG,EAASgJ,EAAU7B,gBAE9B3Q,IAAxBwS,EAAU5B,YACT6B,EAAKrT,KAAKwR,WAAW1H,KAAK9C,MAAMqM,EAAIjJ,EAASgJ,EAAU5B,iBAElC5Q,IAAtBwS,EAAU3B,UACT6B,EAAKtT,KAAKyR,SAAS3H,KAAK9C,MAAMsM,EAAIlJ,EAASgJ,EAAU3B,WAG9DP,EAAkBvN,UAAU+P,eAAiB,SAAUC,EAAUlG,GAC7DzN,KAAK+R,kBAAkB3D,IAAIuF,GAE3B3T,KAAKiS,UAAU1S,OAAOyQ,YAAY2D,EAAUlG,GAC5C,IAAIc,EAAWvO,KAAKiS,UAAU1S,OAAO4E,QAAQwP,GAC7C,GAAiB,OAAbpF,EACA,MAAMqF,EAAiBD,EAASE,KAAM,YAE1C7T,KAAK8T,kBAAkBH,EAAUpF,GAIjCvO,KAAKyT,2BAA2B,CAACE,KAErCzC,EAAkBvN,UAAUoQ,kBAAoB,SAAUrI,EAAW+B,GACjEzN,KAAKiS,UAAUvG,UAAUsE,YAAYtE,EAAW+B,GAChDzN,KAAK0R,kBAAkBtD,IAAI1C,IAE/BwF,EAAkBvN,UAAUqQ,kBAAoB,SAAU7B,EAAW1E,GACjEzN,KAAKiS,UAAUE,UAAUnC,YAAYmC,EAAW1E,GAChDzN,KAAK2R,kBAAkBvD,IAAI+D,IAE/BjB,EAAkBvN,UAAUsQ,aAAe,SAAU7B,EAAM3E,GACvDzN,KAAKiS,UAAUG,KAAKpC,YAAYoC,EAAM3E,GACtCzN,KAAK4R,aAAaxD,IAAIgE,IAE1BlB,EAAkBvN,UAAUuQ,iBAAmB,SAAUC,EAAOC,GAC5D,IAAIC,EAEAA,OADwBzT,IAAxBwT,EAASE,WACK,CACVC,QAASJ,EACTG,WAAYF,EAASE,WACrBE,KAAMJ,EAASI,MAAQ,GACvBC,MAAOL,EAASK,YAGO7T,IAAtBwT,EAASM,SACA,CAAEH,QAASJ,EAAOO,SAAUN,EAASM,SAAUD,MAAOL,EAASK,OAG/D,CAAEF,QAASJ,GAE7B,IAAIQ,EAAiC,iBAAVR,EAAqBtU,EAAK+U,kBAAkBT,GAAS,KAMhF,IAL+B,OAAlBQ,GAAuD,SAA7BA,EAAcE,WACtB7U,KAAK2S,sBAAwB3S,KAAK0S,mBACjD5I,KAAKuK,GAErBrU,KAAK6S,yBAAyBvH,IAAI6I,EAAOE,GACnB,OAAlBM,GAAuD,OAA7BA,EAAcE,YACJ,iBAA7BF,EAAcE,WAAyB,CAC9C,IAAIC,EAAoB9U,KAAK4S,0BAA0B5R,IAAI2T,EAAcE,iBAC/CjU,IAAtBkU,EACAA,EAAkBhL,KAAKuK,GAGvBrU,KAAK4S,0BAA0BtH,IAAIqJ,EAAcE,WAAY,CAACR,MAI1EnD,EAAkBvN,UAAUoR,mCAAqC,SAAUpJ,EAAMG,GAC7E,IAGQyC,EAFJyG,EAAMrJ,EAAK9L,EAAKoV,cAKhBC,IAAsBF,IAAQlI,EAAgCnB,OAH1D4C,EAHIvO,KAGaiS,UAAUvG,UAAUvH,QAAQwH,IAC/BI,WAAawC,EAASxC,UAAUjF,OAAS,EAW/D9G,KAAK+T,kBAAkBpI,EAAM,CAAEL,IADhB4J,EAAoB,CAAEpJ,SAAUA,EAAUE,OAAQ,GAAID,UAAW,IAAO,CAAED,SAAUA,KAE/FoJ,GAAqBF,EAAIhJ,QAAUgJ,EAAIhJ,OAAOlF,OAAS,GACvD9G,KAAKgS,wBAAwB1G,IAAIK,EAAMqJ,EAAIhJ,QAG/ChM,KAAKqS,uBAAuB/G,IAAIK,EAAM+D,EAAsByF,oBAEhEjE,EAAkBvN,UAAUyR,kBAAoB,WAC5C,OAAOxN,EAAU5H,UAAM,OAAQ,GAAQ,WACnC,IAAyBqV,EACrBrT,EAAQhC,KACZ,OAAO2I,EAAY3I,MAAM,SAAUmQ,GAC/B,OAAQA,EAAGlH,OACP,KAAK,EAGD,OAFAjJ,KAAKsV,gCACiBtV,KAAKuV,mBAQpB,CAAC,EAAa1K,GANV,SAAUM,GAIjB,OAHKkK,IACDA,EAAmBrT,EAAMuC,SAASvD,IAAIjB,EAASyV,iBAE5CtR,QAAQC,QAAQkR,EAAiBrU,IAAImK,QALf,CAAC,EAAa,GAQnD,KAAK,EACDgF,EAAGjH,OACHiH,EAAGlH,MAAQ,EACf,KAAK,EAAG,MAAO,CAAC,WAKhCiI,EAAkBvN,UAAU8R,SAAW,WAEnCzV,KAAKuV,mBAELvV,KAAK0V,oBACL1V,KAAK2V,wBACL3V,KAAK4V,yBAGL5V,KAAK6V,oCAGL7V,KAAKqS,uBAAuBnC,QAE5BlQ,KAAK+S,cAAgB,IAAIlT,EAAKiW,oBAAoB9V,KAAKgT,eADlChT,KAAKmR,SAAS5M,UAInCvE,KAAK+S,cAAcxO,SAASvD,IAAInB,EAAKkW,uBAAuBC,kBAI5D,IAAIC,EAAWjW,KAAK+S,cAAcxO,SAASvD,IAAInB,EAAKqW,UAAWrW,EAAKsW,oBAEpE,OADAtW,EAAKuW,aAAaH,GACXjW,KAAK+S,eAKhB7B,EAAkBvN,UAAU0S,qBAAuB,SAAUC,GACzDtW,KAAKyT,2BAA2B,CAAC6C,IACjCtW,KAAKuV,mBACLvV,KAAK4V,yBACL5V,KAAKuW,+BAA+BD,GACpCtW,KAAK2V,yBAKTzE,EAAkBvN,UAAU6S,sBAAwB,SAAUF,GAC1D,OAAO1O,EAAU5H,UAAM,OAAQ,GAAQ,WACnC,OAAO2I,EAAY3I,MAAM,SAAUmQ,GAC/B,OAAQA,EAAGlH,OACP,KAAK,EAED,OADAjJ,KAAKyT,2BAA2B,CAAC6C,IAC1B,CAAC,EAAatW,KAAKoV,qBAC9B,KAAK,EAKD,OAJAjF,EAAGjH,OACHlJ,KAAK4V,yBACL5V,KAAKuW,+BAA+BD,GACpCtW,KAAK2V,wBACE,CAAC,WAQ5BzE,EAAkBvN,UAAU8S,mBAAqB,WAC7C,OAAOzW,KAAKiS,UAAU1S,QAK1B2R,EAAkBvN,UAAU+S,uBAAyB,SAAUJ,GAC3D,IAAItU,EAAQhC,KACZ,OAAO2W,EAAcL,EAAWM,KAAKtF,cAAcuF,QAAO,SAAUC,EAAWC,GAC3E,IAAIC,EAAeD,EAAYE,KAE/B,OADAD,GAAgBF,EAAUhN,KAAK,IAAIjK,EAAKqX,yBAAyBF,EAAchV,EAAM+Q,gBAC9E+D,IACR,KAEP5F,EAAkBvN,UAAU4R,iBAAmB,WAC3C,IAAIvT,EAAQhC,KAERmX,GAAsB,EA6B1B,OA5BAnX,KAAK0R,kBAAkBjG,SAAQ,SAAUsL,GACrCI,EAAsBA,GAAuBrK,EAAgCiK,GAC7E,IAAIxI,EAAWvM,EAAMiQ,UAAUvG,UAAUvH,QAAQ4S,GACjD,GAAiB,OAAbxI,EACA,MAAMqF,EAAiBmD,EAAYlD,KAAM,aAE7C7R,EAAMoV,gBAAgBvX,EAAKoV,aAAc8B,GACzClX,EAAKwX,kBAAkBN,EAAaxI,MAExCvO,KAAK0R,kBAAkBxB,QACvBlQ,KAAK2R,kBAAkBlG,SAAQ,SAAUsL,GACrC,IAAIxI,EAAWvM,EAAMiQ,UAAUE,UAAUhO,QAAQ4S,GACjD,GAAiB,OAAbxI,EACA,MAAMqF,EAAiBmD,EAAYlD,KAAM,aAE7C7R,EAAMoV,gBAAgBvX,EAAKyX,YAAaP,GACxClX,EAAK0X,kBAAkBR,EAAaxI,MAExCvO,KAAK2R,kBAAkBzB,QACvBlQ,KAAK4R,aAAanG,SAAQ,SAAUsL,GAChC,IAAIxI,EAAWvM,EAAMiQ,UAAUG,KAAKjO,QAAQ4S,GAC5C,GAAiB,OAAbxI,EACA,MAAMqF,EAAiBmD,EAAYlD,KAAM,QAE7C7R,EAAMoV,gBAAgBvX,EAAK2X,aAAcT,GACzClX,EAAK4X,aAAaV,EAAaxI,MAEnCvO,KAAK4R,aAAa1B,QACXiH,GAEXjG,EAAkBvN,UAAUgS,sBAAwB,WAChD,IAAI3T,EAAQhC,KACZ,GAAIA,KAAK+R,kBAAkB2F,KAAO,EAAG,CAIjC,IACIC,EAAkB3X,KAAK4X,kCADJ5X,KAAKgT,eAAenT,EAAKgY,aAC8BtG,SAC1EoG,EAAgBD,KAAO,GACvBC,EAAgBlM,SAAQ,SAAU6K,GAC9BtU,EAAM8V,sBAAsBxB,EAAYzW,EAAKgY,YAAa,2BAC1DvB,EAAWzW,EAAKgY,aAAaE,wBAA0B,QAInE,IAAIC,EAAgB,IAAI/M,IASxBjL,KAAKqS,uBAAuB5G,SAAQ,SAAU6K,EAAY2B,GACtD,IAAIC,EATe,SAAU5B,GAC7B,IAAK0B,EAAcjL,IAAIuJ,GAAa,CAChC,IAAI6B,EAnTpB,SAASC,EAAwBjQ,GAC7B,OAAOA,IAAUuH,EAAsB8D,aACnCrL,IAAUuH,EAAsByF,kBAiTFiD,CAAwB9B,GAE9C0B,EAAc1M,IAAIgL,EAAYzW,EAAKwY,qBADpBF,EAAkBnW,EAAMgR,eAAiBsD,IAG5D,OAAO0B,EAAchX,IAAIsV,GAGPgC,CAAiBhC,GACnCtU,EAAM8V,sBAAsBG,EAAepY,EAAKoV,aAAc,iBAC9DjT,EAAM8V,sBAAsBG,EAAepY,EAAKoV,aAAc,YAC9DpV,EAAK0Y,4BAA4BN,EAAchB,KAAMiB,MAEzDlY,KAAKqS,uBAAuBnC,SAEhCgB,EAAkBvN,UAAUiS,uBAAyB,WACjD,IAAI5T,EAAQhC,KACRwY,EAAsB,SAAUC,GAAS,OAAO,SAAU9M,GAC1D,IACI4C,GADWkK,IAAU5Y,EAAKoV,aAAejT,EAAMiQ,UAAUvG,UAAY1J,EAAMiQ,UAAUE,WACjEhO,QAAQwH,GAC5B3J,EAAM0W,qBAAqBnK,EAASiD,YACpCxP,EAAM2W,8BAA8BhN,EAAM8M,KAGlDzY,KAAK6R,eAAepG,QAAQ+M,EAAoB3Y,EAAKoV,eACrDjV,KAAK8R,eAAerG,QAAQ+M,EAAoB3Y,EAAKyX,cACrDtX,KAAK6R,eAAe3B,QACpBlQ,KAAK8R,eAAe5B,SAExBgB,EAAkBvN,UAAU4S,+BAAiC,SAAUD,GACnE,IAAIsC,EAAKzI,EAAI0I,EAAKzI,EAClB,IAAIpQ,KAAK8S,0BAA0B/F,IAAIuJ,GAAvC,CAGAtW,KAAK8S,0BAA0B1E,IAAIkI,GACnC,IAAIwC,EAAcxC,EAAWzW,EAAKkZ,aAClC,GAAI/Y,KAAK6S,yBAAyB6E,KAAO,EAAG,CACxC,IAAIlG,EAAYpH,EAAS0O,EAAYtH,UAAYxR,KAAK4S,0BAA0B5R,IAAIsV,IAAe,IAC/FtW,KAAK0Y,qBAAqBlH,KAC1BxR,KAAKoX,gBAAgBvX,EAAKkZ,YAAazC,GACvCtW,KAAK8X,sBAAsBxB,EAAYzW,EAAKkZ,YAAa,aACzDD,EAAYtH,UAAYxR,KAAKgZ,uBAAuBxH,IAGxD,IACID,EAAUoF,EADEL,EAAWzW,EAAKgY,aACMtG,SACtC,IACI,IAAK,IAAI0H,EAAYlP,EAASwH,GAAU2H,EAAcD,EAAU7V,QAAS8V,EAAY1Q,KAAM0Q,EAAcD,EAAU7V,OAE/GpD,KAAKuW,+BADD4C,EAAiBD,EAAY/Q,OAIzC,MAAOiR,GAASR,EAAM,CAAElX,MAAO0X,GAC/B,QACI,IACQF,IAAgBA,EAAY1Q,OAAS2H,EAAK8I,EAAU1P,SAAS4G,EAAGpJ,KAAKkS,GAE7E,QAAU,GAAIL,EAAK,MAAMA,EAAIlX,OAEjC,IAGI,IAAK,IAAI2R,EAAKtJ,EAASsP,EAAQP,EAAYvH,UAAW+B,EAAKD,EAAGjQ,QAASkQ,EAAG9K,KAAM8K,EAAKD,EAAGjQ,OAAQ,CAC5F,IAAI+V,GAAAA,EAAiB7F,EAAGnL,OA8Y3BjC,eAAe,cA5YRlG,KAAKuS,cAAczI,KAAK,CACpBwP,OAAQH,EACRI,UAAW,YACXC,cAAeL,EAAe3H,YAElC2H,EAAe3H,UAAYxR,KAAKgZ,uBAAuBG,EAAe3H,aAIlF,MAAOiI,GAASZ,EAAM,CAAEnX,MAAO+X,GAC/B,QACI,IACQnG,IAAOA,EAAG9K,OAAS4H,EAAKiD,EAAG9J,SAAS6G,EAAGrJ,KAAKsM,GAEpD,QAAU,GAAIwF,EAAK,MAAMA,EAAInX,WAIzCwP,EAAkBvN,UAAUkS,kCAAoC,WAC5D7V,KAAKgS,wBAAwBvG,SAAQ,SAAUO,EAAQL,GAAQ,OAAOA,EAAK9L,EAAKoV,cAAcjJ,OAASA,KACvGhM,KAAKgS,wBAAwB9B,SAEjCgB,EAAkBvN,UAAU4P,eAAiB,SAAUmG,EAAKpD,GACxD,IAAIqD,EAAKxJ,EACT,IACI,IAAK,IAAIyJ,EAAQ7P,EAAS2P,GAAMG,EAAUD,EAAMxW,QAASyW,EAAQrR,KAAMqR,EAAUD,EAAMxW,OAAQ,CAC3F,IAAI+E,EAAQ0R,EAAQ1R,MAChBnC,MAAM6I,QAAQ1G,GACdnI,KAAKuT,eAAepL,EAAOmO,GAG3BtW,KAAK8Z,UAAU3R,EAAOmO,IAIlC,MAAOyD,GAASJ,EAAM,CAAEjY,MAAOqY,GAC/B,QACI,IACQF,IAAYA,EAAQrR,OAAS2H,EAAKyJ,EAAMrQ,SAAS4G,EAAGpJ,KAAK6S,GAEjE,QAAU,GAAID,EAAK,MAAMA,EAAIjY,SAGrCwP,EAAkBvN,UAAUmQ,kBAAoB,SAAUH,EAAUpF,GAEhEvO,KAAKoX,gBAAgBvX,EAAKgY,YAAalE,GACvC3T,KAAKoX,gBAAgBvX,EAAKkZ,YAAapF,GACvC9T,EAAKma,qBAAqBrG,EAAUpF,IAExC2C,EAAkBvN,UAAUmW,UAAY,SAAUnO,EAAM2K,GAEpD,OADgBtW,KAAKiS,UAAUvG,UAAUvH,QAAQwH,KAKzCmB,EAAgCnB,IAAUA,EAAKzF,eAAerG,EAAKoV,eACnEjV,KAAK0R,kBAAkBtD,IAAIzC,GAE/B3L,KAAK6R,eAAezD,IAAIzC,QAgBnB3L,KAAKqS,uBAAuBtF,IAAIpB,IACjC3L,KAAKqS,uBAAuBrR,IAAI2K,KAAU+D,EAAsB8D,aAChExT,KAAKqS,uBAAuB/G,IAAIK,EAAM2K,KAI9BtW,KAAKiS,UAAUE,UAAUhO,QAAQwH,IAExCA,EAAKzF,eAAerG,EAAKyX,cAC1BtX,KAAK2R,kBAAkBvD,IAAIzC,QAE/B3L,KAAK8R,eAAe1D,IAAIzC,UAGjB3L,KAAKiS,UAAUG,KAAKjO,QAAQwH,IAC1BA,EAAKzF,eAAerG,EAAK2X,eAClCxX,KAAK4R,aAAaxD,IAAIzC,KAI9BuF,EAAkBvN,UAAU8P,2BAA6B,SAAUiG,GAC/D,IAAI1X,EAAQhC,KAIRia,EAAwB,IAAIpN,IAC5BqN,EAAkC,SAAUR,GAC5C,IAAIS,EAAKhK,EACT,IACI,IAAK,IAAIiK,EAAQrQ,EAAS2P,GAAMW,EAAUD,EAAMhX,QAASiX,EAAQ7R,KAAM6R,EAAUD,EAAMhX,OAAQ,CAC3F,IAAI+E,EAAQkS,EAAQlS,MACpB,GAAInC,MAAM6I,QAAQ1G,GACd+R,EAAgC/R,QAE/B,GAAImS,EAAenS,GAAQ,CAC5B,IAAI6M,EAAM7M,EAAMyO,KAChB,GAAIqD,EAAsBlN,IAAIiI,GAC1B,SAEJiF,EAAsB7L,IAAI4G,GAG1BhT,EAAMuR,eAAeoD,EAAc3B,EAAI1D,cAAenJ,GACtD+R,EAAgCvD,EAAc3B,EAAIzD,UAClD2I,EAAgCvD,EAAc3B,EAAI1V,YAI9D,MAAOib,GAASJ,EAAM,CAAEzY,MAAO6Y,GAC/B,QACI,IACQF,IAAYA,EAAQ7R,OAAS2H,EAAKiK,EAAM7Q,SAAS4G,EAAGpJ,KAAKqT,GAEjE,QAAU,GAAID,EAAK,MAAMA,EAAIzY,SAGrCwY,EAAgCR,IASpCxI,EAAkBvN,UAAUiU,kCAAoC,SAAU8B,GACtE,IAAI1X,EAAQhC,KACRwa,EAAc,IAAI3N,IAClB8K,EAAkB,IAAI9K,IACtB4N,EAA2B,SAAUf,EAAKgB,GAC1C,IAAIC,EAAKxK,EACT,IACI,IAAK,IAAIyK,EAAQ7Q,EAAS2P,GAAMmB,EAAUD,EAAMxX,QAASyX,EAAQrS,KAAMqS,EAAUD,EAAMxX,OAAQ,CAC3F,IAAI+E,EAAQ0S,EAAQ1S,MACpB,GAAInC,MAAM6I,QAAQ1G,GAGdsS,EAAyBtS,EAAOuS,QAE/B,GAAIJ,EAAenS,GAAQ,CAC5B,GAAIqS,EAAYzN,IAAI5E,GAAQ,CAIpBwP,EAAgB5K,IAAI5E,IACpBuS,EAAKjP,SAAQ,SAAUqP,GAAQ,OAAOnD,EAAgBvJ,IAAI0M,MAE9D,SAEJN,EAAYpM,IAAIjG,GACZnG,EAAM+P,kBAAkBhF,IAAI5E,IAC5BuS,EAAKjP,SAAQ,SAAUqP,GAAQ,OAAOnD,EAAgBvJ,IAAI0M,MAI9DL,EAAyB9D,EADTxO,EAAMtI,EAAKgY,aACsBtG,SAAUmJ,EAAKrQ,OAAOlC,MAInF,MAAO4S,GAASJ,EAAM,CAAEjZ,MAAOqZ,GAC/B,QACI,IACQF,IAAYA,EAAQrS,OAAS2H,EAAKyK,EAAMrR,SAAS4G,EAAGpJ,KAAK6T,GAEjE,QAAU,GAAID,EAAK,MAAMA,EAAIjZ,SAIrC,OADA+Y,EAAyBf,EAAK,IACvB/B,GAEXzG,EAAkBvN,UAAUyT,gBAAkB,SAAUtJ,EAAMnC,GAC1D,IAAK3L,KAAKsS,cAAcvF,IAAIpB,GAAO,CAC/B,IAAIqP,EAAanV,OAAO2B,yBAAyBmE,EAAMmC,GACvD9N,KAAKsS,cAAchH,IAAIK,EAAM,CAACmC,EAAMkN,MAG5C9J,EAAkBvN,UAAUmU,sBAAwB,SAAUnM,EAAMsP,EAAU1B,GAC1E,IAAIvE,EAAMrJ,EAAKsP,GAEfjb,KAAKuS,cAAczI,KAAK,CAAEwP,OAAQtE,EAAKuE,UAAWA,EAAWC,cADzCxE,EAAIuE,MAQ5BrI,EAAkBvN,UAAU2R,8BAAgC,WACxD,IAAItT,EAAQhC,KACkC,OAA1CA,KAAKqR,mCACLrR,KAAKqR,iCAAmC,IAAIpG,KAEhD2B,IAA2CnB,SAAQ,SAAUtD,EAAOf,GAAO,OAAOpF,EAAMqP,iCAAiC/F,IAAIlE,EAAKe,OAOtI+I,EAAkBvN,UAAUuX,gCAAkC,WACZ,OAA1Clb,KAAKqR,mCA11BjB,SAAS6J,EAAgCC,GACrCzO,EAA8BwD,QAC9BiL,EAAM1P,SAAQ,SAAUzC,EAAG2C,GAAQ,OAAOe,EAA8B0B,IAAIzC,MAC5EH,EAAmC2P,EAw1B3BD,CAAgClb,KAAKqR,kCACrCrR,KAAKqR,iCAAmC,OAGhDH,EAAkBvN,UAAUyX,qBAAuB,WAG/CC,EAAarb,KAAKuS,eAAe,SAAU5I,GACvCA,EAAG2P,OAAO3P,EAAG4P,WAAa5P,EAAG6P,iBAGjCxZ,KAAKsS,cAAc7G,SAAQ,SAAUtD,EAAOwD,GACxC,IAAIwE,EAAKjG,EAAO/B,EAAO,GAAI2F,EAAOqC,EAAG,GAAImL,EAAanL,EAAG,GACpDmL,EAUDzV,OAAO8B,eAAegE,EAAMmC,EAAMwN,UAH3B3P,EAAKmC,MAMpB9N,KAAKsS,cAAcpC,QACnBlQ,KAAK8S,0BAA0B5C,QAC/BlQ,KAAKkb,kCAELrb,EAAKuW,aAAavW,EAAKsW,qBAE3BjF,EAAkBvN,UAAU+R,kBAAoB,WAC5C,IACI6F,EADAvZ,EAAQhC,KAMZH,EAAKma,qBALDuB,EACA,SAASA,MAI8B,CACvC/J,UAAWpH,EAASpK,KAAK2S,yBAE7B,IAAI7Q,EAAS,IAAIjC,EAAK2b,OAAO,CAAEC,sBAAsB,IACjDjK,EAAYpH,EAAS,CACrB,CAAEmK,QAAS1U,EAAK2b,OAAQ9G,SAAU5S,GAClC,CAAEyS,QAAS1U,EAAK6b,SAAUpH,WAAY,WAAc,OAAO,IAAIqH,EAAe3Z,MAC/EhC,KAAKwR,UAAWxR,KAAK0S,mBAGxB7S,EAAKma,qBAAqBha,KAAKgT,eAAgB,CAC3C1B,aAActR,KAAKsR,aACnBC,QAJU,CAACgK,EAAiBvb,KAAKoR,sBAAuBpR,KAAKuR,SAAW,IAKxEE,QAASzR,KAAKyR,QACdD,UAAWA,IAC2B,GAE1CxR,KAAKuW,+BAA+BvW,KAAKgT,iBAE7CnN,OAAO8B,eAAeuJ,EAAkBvN,UAAW,WAAY,CAC3D3C,IAAK,WACD,GAAuB,OAAnBhB,KAAKwS,UACL,OAAOxS,KAAKwS,UAEhB,IAWIoJ,EAXApK,EAAY,GACMxR,KAAKmR,SAAS5M,SAASvD,IAAInB,EAAKgc,kBACtCpQ,SAAQ,SAAUqQ,GAC1BA,EAAKtK,WACLA,EAAU1H,KAAKgS,EAAKtK,cAGG,OAA3BxR,KAAKyS,mBACLjB,EAAU1H,KAAK9C,MAAMwK,EAAWpH,EAASpK,KAAKyS,oBAQlD5S,EAAKma,qBALD4B,EACA,SAASA,MAI6B,CAAEpK,UAAWA,IACvD,IAAIuK,EAAwB,IAAIlc,EAAKmc,iBAAiBJ,GAEtD,OADA5b,KAAKwS,UAAYuJ,EAAsBzV,OAAOtG,KAAKmR,SAAS5M,UAAUA,SAC/DvE,KAAKwS,WAEhB7H,YAAY,EACZC,cAAc,IAGlBsG,EAAkBvN,UAAUsY,2BAA6B,SAAU7H,GAC/D,IAAID,EAAQ+H,EAAiB9H,GAC7B,OAAOpU,KAAK6S,yBAAyB7R,IAAImT,IAAU,MAEvDjD,EAAkBvN,UAAUwY,qBAAuB,SAAU3K,GACzD,IAAIxP,EAAQhC,KACZ,OAAKwR,GAAcA,EAAU1K,QAAiD,IAAvC9G,KAAK6S,yBAAyB6E,KAO9D2B,EAAQA,EAAQ7H,GAAW,SAAU4C,GAAY,OAAOpS,EAAMia,2BAA2B7H,IAAa,OANlG,IAQflD,EAAkBvN,UAAUqV,uBAAyB,SAAUxH,GAC3D,IAAIxP,EAAQhC,KACZ,IAAKwR,IAAcA,EAAU1K,QAAiD,IAAvC9G,KAAK6S,yBAAyB6E,KACjE,MAAO,GACX,IAAI0E,EAAqB/C,EAAQ7H,GAE7B6K,EAAsBjS,EAASgS,EADnBpc,KAAKmc,qBAAqBC,IAEtCE,EAAQ,GACRC,EAA0B,IAAI1P,IAoBlC,OAfAwO,EAAagB,GAAqB,SAAUjI,GACxC,IAAID,EAAQ+H,EAAiB9H,GACzBpS,EAAM6Q,yBAAyB9F,IAAIoH,GAC9BoI,EAAwBxP,IAAIoH,KAC7BoI,EAAwBnO,IAAI+F,GAI5BmI,EAAME,QAAQjW,EAASA,EAAS,GAAI6N,GAAW,CAAEK,OAAO,MAI5D6H,EAAME,QAAQpI,MAGfkI,GAEXpL,EAAkBvN,UAAU+U,qBAAuB,SAAUlH,GACzD,OAAOxR,KAAKmc,qBAAqB3K,GAAW1K,OAAS,GAEzDoK,EAAkBvN,UAAUgV,8BAAgC,SAAU5B,EAAa0B,GAC/E,IAAIzW,EAAQhC,KACRgV,EAAM+B,EAAY0B,GACtB,GAAIzD,GAAOA,EAAIyH,kBAAmB,CAC9Bzc,KAAKoX,gBAAgBqB,EAAO1B,GAC5B,IAAI2F,EAAa1H,EAAIyH,kBACjBE,EAAuB,SAAUnL,GAAa,OAAOxP,EAAMgX,uBAAuBxH,IACtFxR,KAAK8X,sBAAsBf,EAAa0B,EAAO,qBAC/CzD,EAAIyH,kBAAoB,SAAUG,GAAS,OAAOF,EAAWE,EAAOD,MAGrEzL,EAxtB2B,GAkuBtC,SAASoJ,EAAenS,GACpB,OAAOA,EAAMjC,eAAe,QAEhC,SAASyQ,EAAckG,GACnB,OAAOA,aAAmBC,SAAWD,IAAYA,EAErD,SAASxD,EAAQ0D,EAAQC,GACrB,IAAIC,EAAM,GASV,OARAF,EAAOtR,SAAQ,SAAUtD,GACjBnC,MAAM6I,QAAQ1G,GACd8U,EAAInT,KAAK9C,MAAMiW,EAAK7S,EAASiP,EAAQlR,EAAO6U,KAG5CC,EAAInT,KAAKkT,EAAQA,EAAM7U,GAASA,MAGjC8U,EAKX,SAASf,EAAiB9H,GACtB,OAJJ,SAAS8I,EAAiB9I,EAAUqE,GAChC,OAAOrE,GAAgC,iBAAbA,GAAyBA,EAASqE,GAGrDyE,CAAiB9I,EAAU,YAAcA,EAKpD,SAASiH,EAAa0B,EAAQ3c,GAC1B,IAAK,IAAI+c,EAAMJ,EAAOjW,OAAS,EAAGqW,GAAO,EAAGA,IACxC/c,EAAG2c,EAAOI,GAAMA,GAGxB,SAASvJ,EAAiBC,EAAMuJ,GAC5B,OAAO,IAAIvc,MAAMgT,EAAO,wBAA0BuJ,EAAe,sCAErE,IA2YIC,EA3YA1B,EAAgC,WAChC,SAASA,EAAe0B,GACpBrd,KAAKqd,QAAUA,EA2CnB,OAzCA1B,EAAehY,UAAU2Z,kBAAoB,SAAUhH,GAEnD,OADAtW,KAAKqd,QAAQhH,qBAAqBC,GAC3B,IAAIzW,EAAKmc,iBAAiB1F,IAErCqF,EAAehY,UAAU4Z,mBAAqB,SAAUjH,GACpD,OAAO1O,EAAU5H,UAAM,OAAQ,GAAQ,WACnC,OAAO2I,EAAY3I,MAAM,SAAUmQ,GAC/B,OAAQA,EAAGlH,OACP,KAAK,EAAG,MAAO,CAAC,EAAajJ,KAAKqd,QAAQ7G,sBAAsBF,IAChE,KAAK,EAED,OADAnG,EAAGjH,OACI,CAAC,EAAc,IAAIrJ,EAAKmc,iBAAiB1F,YAKpEqF,EAAehY,UAAU6Z,kCAAoC,SAAUlH,GACnE,IAAImH,EAAkBzd,KAAKsd,kBAAkBhH,GACzCoH,EAAqB1d,KAAKqd,QAAQ3G,uBAAuBJ,GAC7D,OAAO,IAAIzW,EAAK8d,6BAA6BF,EAAiBC,IAElE/B,EAAehY,UAAUia,mCAAqC,SAAUtH,GACpE,OAAO1O,EAAU5H,UAAM,OAAQ,GAAQ,WACnC,IAAIyd,EAAiBC,EACrB,OAAO/U,EAAY3I,MAAM,SAAUmQ,GAC/B,OAAQA,EAAGlH,OACP,KAAK,EAAG,MAAO,CAAC,EAAajJ,KAAKud,mBAAmBjH,IACrD,KAAK,EAGD,OAFAmH,EAAkBtN,EAAGjH,OACrBwU,EAAqB1d,KAAKqd,QAAQ3G,uBAAuBJ,GAClD,CAAC,EAAc,IAAIzW,EAAK8d,6BAA6BF,EAAiBC,YAKjG/B,EAAehY,UAAUka,WAAa,aACtClC,EAAehY,UAAUma,cAAgB,SAAUnS,KACnDgQ,EAAehY,UAAUoa,YAAc,SAAUzH,GAC7C,IAAI0H,EAAOhe,KAAKqd,QAAQ5G,qBAAqBtS,QAAQmS,GACrD,OAAO0H,GAAQA,EAAKvO,SAAM7O,GAEvB+a,EA7CwB,GA4D/BsC,EAAuC,WACvC,SAASA,KAGT,OADAA,EAAsBta,UAAUua,kBAAoB,SAAUC,KACvDF,EAJ+B,GAStCG,EAA6B,IAAIve,EAAKwe,eAAe,8BAIrDC,GAA2B,IAAIze,EAAKwe,eAAe,4BASnDE,GAAqB,EAWrBC,GAAgC,WAChC,SAASA,IAELxe,KAAKmR,SAAW,KAChBnR,KAAK2T,SAAW,KAChB3T,KAAKye,UAAY,KACjBze,KAAK0e,eAAiB,KACtB1e,KAAK2e,gBAAkB,GACvB3e,KAAK4e,2BAA4B,EAoSrC,OArRAJ,EAAeK,oBAAsB,SAAUlL,EAAUxC,EAAU2N,GAC/D,IAAIzB,EAAU0B,KAEd,OADA1B,EAAQwB,oBAAoBlL,EAAUxC,EAAU2N,GACzCzB,GAOXmB,EAAeQ,qBAAuB,WAClCD,KAAqBC,wBAEzBR,EAAeS,kBAAoB,SAAUC,GAEzC,OADAH,KAAqBE,kBAAkBC,GAChCV,GAMXA,EAAerL,uBAAyB,SAAUC,GAE9C,OADA2L,KAAqB5L,uBAAuBC,GACrCoL,GAOXA,EAAepJ,kBAAoB,WAC/B,OAAO2J,KAAqB3J,qBAEhCoJ,EAAe9K,eAAiB,SAAUC,EAAUlG,GAEhD,OADAsR,KAAqBrL,eAAeC,EAAUlG,GACvC+Q,GAEXA,EAAezK,kBAAoB,SAAUrI,EAAW+B,GAEpD,OADAsR,KAAqBhL,kBAAkBrI,EAAW+B,GAC3C+Q,GAEXA,EAAexK,kBAAoB,SAAU7B,EAAW1E,GAEpD,OADAsR,KAAqB/K,kBAAkB7B,EAAW1E,GAC3C+Q,GAEXA,EAAevK,aAAe,SAAU7B,EAAM3E,GAE1C,OADAsR,KAAqB9K,aAAa7B,EAAM3E,GACjC+Q,GAEXA,EAAeW,iBAAmB,SAAUzT,EAAWI,GAEnD,OADAiT,KAAqBhL,kBAAkBrI,EAAW,CAAEJ,IAAK,CAAEQ,SAAUA,EAAUD,YAAa,QACrF2S,GAQXA,EAAezJ,mCAAqC,SAAUrJ,EAAWI,GAErE,OADAiT,KAAqBhK,mCAAmCrJ,EAAWI,GAC5D0S,GAEXA,EAAetK,iBAAmB,SAAUC,EAAOC,GAE/C,OADA2K,KAAqB7K,iBAAiBC,EAAOC,GACtCoK,GAEXA,EAAeY,OAAS,SAAUjL,EAAOkL,EAAeC,GACpD,OAAOP,KAAqBK,OAAOjL,EAAOkL,EAAeC,IAG7Dd,EAAexd,IAAM,SAAUmT,EAAOkL,EAAeC,GAGjD,YAFsB,IAAlBD,IAA4BA,EAAgBxf,EAAK0f,SAASC,yBAChD,IAAVF,IAAoBA,EAAQzf,EAAK4f,YAAYC,SAC1CX,KAAqBK,OAAOjL,EAAOkL,EAAeC,IAE7Dd,EAAemB,gBAAkB,SAAUjU,GACvC,OAAOqT,KAAqBY,gBAAgBjU,IAEhD8S,EAAeoB,mBAAqB,WAEhC,OADAb,KAAqBa,qBACdpB,GAeXA,EAAe7a,UAAUkb,oBAAsB,SAAUlL,EAAUxC,EAAU2N,GACzE,GAAI9e,KAAKmR,UAAYnR,KAAK2T,SACtB,MAAM,IAAI9S,MAAM,gEAEpBb,KAAKmR,SAAWA,EAChBnR,KAAK2T,SAAWA,EAChB3T,KAAKye,UAAY,IAAIvN,EAAkBlR,KAAKmR,SAAUnR,KAAK2T,WAO/D6K,EAAe7a,UAAUqb,qBAAuB,WAC5Chf,KAAK4f,qBACL5f,KAAKye,UAAY,KACjBze,KAAKmR,SAAW,KAChBnR,KAAK2T,SAAW,MAEpB6K,EAAe7a,UAAUic,mBAAqB,WAC1C5f,KAAK6f,iCACLhgB,EAAKigB,2BACkB,OAAnB9f,KAAKye,WACLze,KAAKD,SAASqb,uBAElBpb,KAAKye,UAAY,IAAIvN,EAAkBlR,KAAKmR,SAAUnR,KAAK2T,UAC3D3T,KAAK0e,eAAiB,KACtB1e,KAAK+f,yBAETvB,EAAe7a,UAAUsb,kBAAoB,SAAUC,GACnD,GAAqB,MAAjBA,EAAOc,OACP,MAAM,IAAInf,MAAM,4DAEKD,IAArBse,EAAO1N,WACPxR,KAAKD,SAASmT,qBAAqBgM,EAAO1N,YAGlDgN,EAAe7a,UAAUwP,uBAAyB,SAAUC,GACxDpT,KAAKigB,sBAAsB,mCAAoC,6BAC/DjgB,KAAKD,SAASoT,uBAAuBC,IAEzCoL,EAAe7a,UAAUyR,kBAAoB,WACzC,OAAOpV,KAAKD,SAASqV,qBAEzBoJ,EAAe7a,UAAUyb,OAAS,SAAUjL,EAAOkL,EAAeC,GAC9D,GAAInL,IAAUqK,EACV,OAAOxe,KAEX,IAAIkgB,EAAY,GACZ3X,EAASvI,KAAK+S,cAAcxO,SAASvD,IAAImT,EAAO+L,EAAWZ,GAC/D,OAAO/W,IAAW2X,EAAYlgB,KAAKD,SAASwE,SAASvD,IAAImT,EAAOkL,EAAeC,GAC3E/W,GAGRiW,EAAe7a,UAAU3C,IAAM,SAAUmT,EAAOkL,EAAeC,GAG3D,YAFsB,IAAlBD,IAA4BA,EAAgBxf,EAAK0f,SAASC,yBAChD,IAAVF,IAAoBA,EAAQzf,EAAK4f,YAAYC,SAC1C1f,KAAKof,OAAOjL,EAAOkL,EAAeC,IAE7Cd,EAAe7a,UAAUwc,QAAU,SAAUC,EAAQhgB,EAAIC,GACrD,IAAI2B,EAAQhC,KACRqgB,EAASD,EAAOE,KAAI,SAAU7Z,GAAK,OAAOzE,EAAMod,OAAO3Y,MAC3D,OAAOrG,EAAG4G,MAAM3G,EAASggB,IAE7B7B,EAAe7a,UAAU+P,eAAiB,SAAUC,EAAUlG,GAC1DzN,KAAKigB,sBAAsB,iBAAkB,4BAC7CjgB,KAAKD,SAAS2T,eAAeC,EAAUlG,IAE3C+Q,EAAe7a,UAAUoQ,kBAAoB,SAAUrI,EAAW+B,GAC9DzN,KAAKigB,sBAAsB,oBAAqB,+BAChDjgB,KAAKD,SAASgU,kBAAkBrI,EAAW+B,IAE/C+Q,EAAe7a,UAAUoR,mCAAqC,SAAUrJ,EAAWI,GAC/E9L,KAAKigB,sBAAsB,+CAAgD,+EAC3EjgB,KAAKD,SAASgV,mCAAmCrJ,EAAWI,IAEhE0S,EAAe7a,UAAUqQ,kBAAoB,SAAU7B,EAAW1E,GAC9DzN,KAAKigB,sBAAsB,oBAAqB,+BAChDjgB,KAAKD,SAASiU,kBAAkB7B,EAAW1E,IAE/C+Q,EAAe7a,UAAUsQ,aAAe,SAAU7B,EAAM3E,GACpDzN,KAAKigB,sBAAsB,eAAgB,0BAC3CjgB,KAAKD,SAASkU,aAAa7B,EAAM3E,IAKrC+Q,EAAe7a,UAAUuQ,iBAAmB,SAAUC,EAAOC,GACzDpU,KAAKD,SAASmU,iBAAiBC,EAAOC,IAE1CoK,EAAe7a,UAAUgc,gBAAkB,SAAUhU,GACjD,IAAI3J,EAAQhC,KACRugB,EAAwBvgB,KAAKof,OAAOnB,GACpCuC,EAAW,6BAA+BjC,KAC9CgC,EAAsBrC,kBAAkBsC,GACxC,IAAIxJ,EAAerL,EAAKsL,KACxB,IAAKD,EACD,MAAM,IAAInW,MAAM,kBAAoBhB,EAAKwO,WAAW1C,GAAQ,wDAGhE,IAAI8U,EAAWzgB,KAAKof,OAAOd,IAA0B,GAEjDva,EAAa/D,KAAKof,OAAOhB,GAA4B,GACrDtc,EAAS2e,EAAW,KAAOzgB,KAAKof,OAAOvf,EAAK2b,OAAQ,MACpDkF,EAAmB,IAAI7gB,EAAKqX,yBAAyBF,GACrD2J,EAAgB,WAChB,IAAI9e,EAAe6e,EAAiBpa,OAAOzG,EAAK0f,SAASqB,KAAM,GAAI,IAAMJ,EAAUxe,EAAM+Q,eACzF,OAAO,IAAInR,EAAiBC,EAAcC,EAAQiC,IAElD8c,EAAU/e,EAASA,EAAOP,IAAIof,GAAiBA,IAEnD,OADA3gB,KAAK2e,gBAAgB7U,KAAK+W,GACnBA,GAEXhb,OAAO8B,eAAe6W,EAAe7a,UAAW,WAAY,CAKxD3C,IAAK,WACD,GAAuB,OAAnBhB,KAAKye,UACL,MAAM,IAAI5d,MAAM,oDAEpB,OAAOb,KAAKye,WAEhB9T,YAAY,EACZC,cAAc,IAElB/E,OAAO8B,eAAe6W,EAAe7a,UAAW,gBAAiB,CAK7D3C,IAAK,WAID,OAH4B,OAAxBhB,KAAK0e,iBACL1e,KAAK0e,eAAiB1e,KAAKD,SAAS0V,YAEjCzV,KAAK0e,gBAEhB/T,YAAY,EACZC,cAAc,IAElB4T,EAAe7a,UAAUsc,sBAAwB,SAAUa,EAAYC,GACnE,GAA4B,OAAxB/gB,KAAK0e,eACL,MAAM,IAAI7d,MAAM,UAAYkgB,EAAoB,qGACOD,EAAa,OAe5EtC,EAAe7a,UAAUkc,+BAAiC,WAGjD7f,KAAK4e,2BAAqD,OAAxB5e,KAAK0e,gBACxC7e,EAAKmhB,2CAEThhB,KAAK4e,2BAA4B,GAErCJ,EAAe7a,UAAUoc,sBAAwB,WAC7C/f,KAAK2e,gBAAgBlT,SAAQ,SAAUoV,GACnC,IACIA,EAAQlc,UAEZ,MAAO0D,GACH4Y,QAAQvf,MAAM,oCAAqC,CAC/CgK,UAAWmV,EAAQ9d,kBACnBme,WAAY7Y,QAIxBrI,KAAK2e,gBAAkB,IAEpBH,EA5SwB;;;;;;;OA+SnC,SAASO,KACL,OAAO1B,EAAUA,GAAW,IAAImB;;;;;;;OAUpC,SAAS2C,KACL,MAAMtgB,MAAM,iBAOhB,IAqiBIugB,GAriBAC,GAAiC,SAAUvQ,GAE3C,SAASuQ,IACL,OAAkB,OAAXvQ,GAAmBA,EAAO9J,MAAMhH,KAAM6G,YAAc7G,KA8C/D,OAhDAmG,EAAUkb,EAAiBvQ,GAI3BjL,OAAO8B,eAAe0Z,EAAgB1d,UAAW,WAAY,CACzD3C,IAAK,WACD,MAAMmgB,MAEVxW,YAAY,EACZC,cAAc,IAElByW,EAAgB1d,UAAU+P,eAAiB,SAAUnU,EAAQuQ,GACzD,MAAMqR,MAEVE,EAAgB1d,UAAUqQ,kBAAoB,SAAU7B,EAAWrC,GAC/D,MAAMqR,MAEVE,EAAgB1d,UAAUoQ,kBAAoB,SAAUrI,EAAWoE,GAC/D,MAAMqR,MAEVE,EAAgB1d,UAAUsQ,aAAe,SAAU9B,EAAWrC,GAC1D,MAAMqR,MAMVE,EAAgB1d,UAAU2d,iBAAmB,SAAUC,GACnD,MAAMJ,MAOVE,EAAgB1d,UAAU6d,oBAAsB,SAAU9V,GACtD,MAAMyV,MAMVE,EAAgB1d,UAAU8d,sBAAwB,SAAU/f,GACxD,MAAMyf,MAEQla,EAAW,CACzBpH,EAAK6hB,cACNL,GAhD6B,CAkDlCxhB,EAAK6b,UAMHiG,GACA,SAASA,OAYTC,GAAuB,EAWvBC,GAAmC,WACnC,SAASA,IACL7hB,KAAK8hB,eAAgB,EACrB9hB,KAAKye,UAAY,KACjBze,KAAK+hB,WAAa,KAClB/hB,KAAKgiB,eAAiB,KACtBhiB,KAAKiiB,iBAAmB,GACxBjiB,KAAKkiB,iBAAmB,GACxBliB,KAAKmiB,oBAAsB,GAC3BniB,KAAKoiB,oBAAsB,GAC3BpiB,KAAKqiB,eAAiB,GACtBriB,KAAKsiB,WAAa,GAClBtiB,KAAKuiB,cAAgB,GACrBviB,KAAKwiB,SAAW,GAChBxiB,KAAKyiB,SAAW,GAChBziB,KAAK2e,gBAAkB,GACvB3e,KAAK0iB,qBAAuB,WAAc,MAAO,IACjD1iB,KAAK2iB,cAAgB,GACrB3iB,KAAK4iB,mBAAqB,GAC1B5iB,KAAK6iB,SAAU,EACf7iB,KAAK8iB,uBAAyB,GAC9B9iB,KAAKmR,SAAW,KAChBnR,KAAK2T,SAAW,KAwapB,OA3ZAkO,EAAkBhD,oBAAsB,SAAUlL,EAAUxC,EAAU2N,GAClE,IAAIzB,EAAU0F,KAEd,OADA1F,EAAQwB,oBAAoBlL,EAAUxC,EAAU2N,GACzCzB,GAKXwE,EAAkB7C,qBAAuB,WACrC+D,KAAwB/D,wBAE5B6C,EAAkBjC,mBAAqB,WAEnC,OADAmD,KAAwBnD,qBACjBiC,GAMXA,EAAkB5C,kBAAoB,SAAUC,GAE5C,OADA6D,KAAwB9D,kBAAkBC,GACnC2C,GAMXA,EAAkB1O,uBAAyB,SAAUC,GAEjD,OADA2P,KAAwB5P,uBAAuBC,GACxCyO,GAOXA,EAAkBzM,kBAAoB,WAClC,OAAO4N,KAAa5N,qBAExByM,EAAkBnO,eAAiB,SAAUC,EAAUlG,GAEnD,OADAsV,KAAwBrP,eAAeC,EAAUlG,GAC1CoU,GAEXA,EAAkB9N,kBAAoB,SAAUrI,EAAW+B,GAEvD,OADAsV,KAAwBhP,kBAAkBrI,EAAW+B,GAC9CoU,GAEXA,EAAkB7N,kBAAoB,SAAU7B,EAAW1E,GAEvD,OADAsV,KAAwB/O,kBAAkB7B,EAAW1E,GAC9CoU,GAEXA,EAAkB5N,aAAe,SAAU7B,EAAM3E,GAE7C,OADAsV,KAAwB9O,aAAa7B,EAAM3E,GACpCoU,GAEXA,EAAkB1C,iBAAmB,SAAUzT,EAAWI,GAEtD,OADAiX,KAAwBhP,kBAAkBrI,EAAW,CAAEJ,IAAK,CAAEQ,SAAUA,EAAUD,YAAa,QACxFgW,GAQXA,EAAkB9M,mCAAqC,SAAUrJ,EAAWI,GAExE,OADAiX,KAAwBhO,mCAAmCrJ,EAAWI,GAC/D+V,GAEXA,EAAkB3N,iBAAmB,SAAUC,EAAOC,GAElD,OADA2O,KAAwB7O,iBAAiBC,EAAOC,GACzCyN,GAEXA,EAAkBzC,OAAS,SAAUjL,EAAOkL,EAAeC,GACvD,OAAOyD,KAAwB3D,OAAOjL,EAAOkL,EAAeC,IAGhEuC,EAAkB7gB,IAAM,SAAUmT,EAAOkL,EAAeC,GAGpD,YAFsB,IAAlBD,IAA4BA,EAAgBxf,EAAK0f,SAASC,yBAChD,IAAVF,IAAoBA,EAAQzf,EAAK4f,YAAYC,SAC1CqD,KAAwB3D,OAAOjL,EAAOkL,EAAeC,IAEhEuC,EAAkBlC,gBAAkB,SAAUjU,GAC1C,OAAOqX,KAAwBpD,gBAAgBjU,IAanDmW,EAAkBle,UAAUkb,oBAAsB,SAAUlL,EAAUxC,EAAU2N,GAC5E,GAAI9e,KAAKmR,UAAYnR,KAAK2T,SACtB,MAAM,IAAI9S,MAAM,gEAEpBb,KAAKmR,SAAWA,EAChBnR,KAAK2T,SAAWA,EACZmL,IACA9e,KAAK0iB,qBAAuB5D,IAMpC+C,EAAkBle,UAAUqb,qBAAuB,WAC/Chf,KAAK4f,qBACL5f,KAAKmR,SAAW,KAChBnR,KAAK2T,SAAW,KAChB3T,KAAK0iB,qBAAuB,WAAc,MAAO,KAErDb,EAAkBle,UAAUic,mBAAqB,WAC7C/f,EAAKojB,kBACLjjB,KAAK2iB,cAAgB,GACrB3iB,KAAK4iB,mBAAqB,GAC1B5iB,KAAKye,UAAY,KACjBze,KAAKkiB,iBAAmB,GACxBliB,KAAKmiB,oBAAsB,GAC3BniB,KAAKoiB,oBAAsB,GAC3BpiB,KAAKqiB,eAAiB,GACtBriB,KAAK6iB,SAAU,EACf7iB,KAAK8iB,uBAAyB,GAC9B9iB,KAAK+hB,WAAa,KAClB/hB,KAAKgiB,eAAiB,KACtBhiB,KAAKiiB,iBAAmB,GACxBjiB,KAAKsiB,WAAa,GAClBtiB,KAAKuiB,cAAgB,GACrBviB,KAAKwiB,SAAW,GAChBxiB,KAAKyiB,SAAW,GAChBziB,KAAK8hB,eAAgB,EACrB9hB,KAAK2e,gBAAgBlT,SAAQ,SAAUoV,GACnC,IACIA,EAAQlc,UAEZ,MAAO0D,GACH4Y,QAAQvf,MAAM,oCAAqC,CAC/CgK,UAAWmV,EAAQ9d,kBACnBme,WAAY7Y,QAIxBrI,KAAK2e,gBAAkB,IAE3BkD,EAAkBle,UAAUsb,kBAAoB,SAAUC,GACtDlf,KAAKkjB,uBAAuB,4BAA6B,0BACzDljB,KAAKiiB,iBAAiBnY,KAAKoV,IAE/B2C,EAAkBle,UAAUwP,uBAAyB,SAAUC,GAC3D,IAAIjD,EAAIC,EAAIiD,EAAIC,EAChBtT,KAAKkjB,uBAAuB,iCAAkC,6BAC1D9P,EAAU5B,YACTrB,EAAKnQ,KAAKsiB,YAAYxY,KAAK9C,MAAMmJ,EAAI/F,EAASgJ,EAAU5B,YAEzD4B,EAAU9B,eACTlB,EAAKpQ,KAAKuiB,eAAezY,KAAK9C,MAAMoJ,EAAIhG,EAASgJ,EAAU9B,eAE5D8B,EAAU7B,UACT8B,EAAKrT,KAAKwiB,UAAU1Y,KAAK9C,MAAMqM,EAAIjJ,EAASgJ,EAAU7B,UAEvD6B,EAAU3B,UACT6B,EAAKtT,KAAKyiB,UAAU3Y,KAAK9C,MAAMsM,EAAIlJ,EAASgJ,EAAU3B,UAEvD2B,EAAU0L,cACV9e,KAAK2iB,cAAc7Y,KAAKsJ,EAAU0L,eAG1C+C,EAAkBle,UAAUyR,kBAAoB,WAC5C,IAAIpT,EAAQhC,KACZ,GAAIA,KAAKgiB,gBAAkBhiB,KAAK8hB,cAC5B,OAAO5d,QAAQC,QAAQ,MAE3B,IAAImS,EAAatW,KAAKmjB,2BACtB,OAAOnjB,KAAKye,UAAUb,mCAAmCtH,GACpD5N,MAAK,SAAU0a,GAChBphB,EAAMggB,eAAiBoB,EAA4B3F,oBAG3DoE,EAAkBle,UAAU0f,cAAgB,WACxC,IAAIzK,EAAKzI,EACT,IAAInQ,KAAK8hB,cAAT,CAGA,IAAK9hB,KAAKgiB,eACN,IACI,IAAI1L,EAAatW,KAAKmjB,2BACtBnjB,KAAKgiB,eACDhiB,KAAKye,UAAUjB,kCAAkClH,GAAYmH,gBAErE,MAAOpV,GACH,IAAIib,EAAgBtjB,KAAKye,UAAUgD,sBAAsBpZ,GACzD,MAAIib,EACM,IAAIziB,MAAM,uCAAyChB,EAAKwO,WAAWiV,GAAiB,2IAIpFjb,EAIlB,IACI,IAAK,IAAI+H,EAAKrG,EAAS/J,KAAK4iB,oBAAqBvP,EAAKjD,EAAGhN,QAASiQ,EAAG7K,KAAM6K,EAAKjD,EAAGhN,OAAQ,CACvF,IAAIkQ,EAAKD,EAAGlL,MAAOuD,EAAY4H,EAAG5H,UAC9B6X,EAAcvjB,KAAKye,UAAU+C,oBADyBlO,EAAGkQ,YAE7D3jB,EAAK4jB,uBAAuB/X,EAAW6X,IAG/C,MAAOnK,GAASR,EAAM,CAAElX,MAAO0X,GAC/B,QACI,IACQ/F,IAAOA,EAAG7K,OAAS2H,EAAKC,EAAG7G,SAAS4G,EAAGpJ,KAAKqJ,GAEpD,QAAU,GAAIwI,EAAK,MAAMA,EAAIlX,OAEjC,IAAII,EAAS,IAAIjC,EAAK2b,OAAO,CAAEC,sBAAsB,EAAMiI,oCAAoC,IAE3FC,EAAiB9jB,EAAK0f,SAASjZ,OAAO,CACtCkL,UAFY,CAAC,CAAE+C,QAAS1U,EAAK2b,OAAQ9G,SAAU5S,IAG/CR,OAAQtB,KAAKmR,SAAS5M,SACtBsP,KAAM7T,KAAKgiB,eAAe1L,WAAWzC,OAEzC7T,KAAK+hB,WAAa/hB,KAAKgiB,eAAe1b,OAAOqd,GAG7C3jB,KAAK+hB,WAAWxd,SAASvD,IAAInB,EAAKkW,uBAAuBC,kBACzDhW,KAAK8hB,eAAgB,IAEzBD,EAAkBle,UAAUwf,yBAA2B,WACnD,IAAItK,EAAK1I,EACLnO,EAAQhC,KACRwR,EAAYxR,KAAKsiB,WAAWjY,OAAO,CAAC,CAAEkK,QAASqP,GAASlP,SAAU1U,QAClEsR,EAAelH,EAASpK,KAAKuiB,cAAeviB,KAAK4iB,mBAAmBtC,KAAI,SAAUuD,GAAS,OAAOA,EAAML,eACxGM,EAAmB,GAEvB,GAAI9jB,KAAK6iB,QAAS,CACd,IAAItH,EAGkBtU,EAAW,CACzBpH,EAAK8Q,SAAS,CACVa,UAAWpH,EAPCpK,KAAK8iB,wBAQjBiB,KAAK,MALb,SAASxI,QAUbuI,EAAiBha,KAAKyR,GAE1B/J,EAAU1H,KAAK,CAAEyK,QAAS1U,EAAKmkB,gBAAiBtP,SAAU1U,KAAK6iB,QAAU,OAAS,OAClF,IAEI5P,EAGoBhM,EAAW,CAC3BpH,EAAK8Q,SAAS,CAAEa,UAAWA,EAAWF,aAAcA,EAAcC,QAN5D,CAACuS,EAAkB9jB,KAAK2T,SAAU3T,KAAKwiB,UAMuC/Q,QAL9EzR,KAAKyiB,SAK2FsB,KAAK,MAH/G,SAAS9Q,QAOTgR,EAAkBjkB,KAAKmR,SAAS5M,SAASvD,IAAI2gB,IACjD3hB,KAAKye,UAAYwF,EAAgBC,sBAAsBlkB,KAAKiiB,kBAC5D,IACI,IAAK,IAAI7R,EAAKrG,EAASK,EAAS,CAACpK,KAAK0iB,sBAAuB1iB,KAAK2iB,gBAAiBtP,EAAKjD,EAAGhN,QAASiQ,EAAG7K,KAAM6K,EAAKjD,EAAGhN,OAEjHpD,KAAKye,UAAU6C,iBADDjO,EAAGlL,OAIzB,MAAOsR,GAASZ,EAAM,CAAEnX,MAAO+X,GAC/B,QACI,IACQpG,IAAOA,EAAG7K,OAAS2H,EAAKC,EAAG7G,SAAS4G,EAAGpJ,KAAKqJ,GAEpD,QAAU,GAAIyI,EAAK,MAAMA,EAAInX,OAMjC,OAJA1B,KAAKkiB,iBAAiBzW,SAAQ,SAAUoY,GAAS,OAAO7hB,EAAMyc,UAAU/K,eAAemQ,EAAM,GAAIA,EAAM,OACvG7jB,KAAKmiB,oBAAoB1W,SAAQ,SAAUoY,GAAS,OAAO7hB,EAAMyc,UAAU1K,kBAAkB8P,EAAM,GAAIA,EAAM,OAC7G7jB,KAAKoiB,oBAAoB3W,SAAQ,SAAUoY,GAAS,OAAO7hB,EAAMyc,UAAUzK,kBAAkB6P,EAAM,GAAIA,EAAM,OAC7G7jB,KAAKqiB,eAAe5W,SAAQ,SAAUoY,GAAS,OAAO7hB,EAAMyc,UAAUxK,aAAa4P,EAAM,GAAIA,EAAM,OAC5F5Q,GAEX4O,EAAkBle,UAAUuf,uBAAyB,SAAUpC,EAAYC,GACvE,GAAI/gB,KAAK8hB,cACL,MAAM,IAAIjhB,MAAM,UAAYkgB,EAAoB,qGACOD,EAAa,OAG5Ee,EAAkBle,UAAUyb,OAAS,SAAUjL,EAAOkL,EAAeC,GAEjE,GADAtf,KAAKqjB,gBACDlP,IAAUyP,GACV,OAAO5jB,KAIX,IAAIkgB,EAAY,GACZ3X,EAASvI,KAAK+hB,WAAWxd,SAASvD,IAAImT,EAAO+L,EAAWZ,GAC5D,OAAO/W,IAAW2X,EAAYlgB,KAAKye,UAAUla,SAASvD,IAAImT,EAAOkL,EAAeC,GAC5E/W,GAGRsZ,EAAkBle,UAAU3C,IAAM,SAAUmT,EAAOkL,EAAeC,GAG9D,YAFsB,IAAlBD,IAA4BA,EAAgBxf,EAAK0f,SAASC,yBAChD,IAAVF,IAAoBA,EAAQzf,EAAK4f,YAAYC,SAC1C1f,KAAKof,OAAOjL,EAAOkL,EAAeC,IAE7CuC,EAAkBle,UAAUwc,QAAU,SAAUC,EAAQhgB,EAAIC,GACxD,IAAI2B,EAAQhC,KACZA,KAAKqjB,gBACL,IAAIhD,EAASD,EAAOE,KAAI,SAAU7Z,GAAK,OAAOzE,EAAMod,OAAO3Y,MAC3D,OAAOrG,EAAG4G,MAAM3G,EAASggB,IAE7BwB,EAAkBle,UAAU+P,eAAiB,SAAUC,EAAUlG,GAC7DzN,KAAKkjB,uBAAuB,iBAAkB,4BAC9CljB,KAAKkiB,iBAAiBpY,KAAK,CAAC6J,EAAUlG,KAE1CoU,EAAkBle,UAAUoQ,kBAAoB,SAAUrI,EAAW+B,GACjEzN,KAAKkjB,uBAAuB,oBAAqB,+BACjDljB,KAAKmiB,oBAAoBrY,KAAK,CAAC4B,EAAW+B,KAE9CoU,EAAkBle,UAAUqQ,kBAAoB,SAAU7B,EAAW1E,GACjEzN,KAAKkjB,uBAAuB,oBAAqB,+BACjDljB,KAAKoiB,oBAAoBtY,KAAK,CAACqI,EAAW1E,KAE9CoU,EAAkBle,UAAUsQ,aAAe,SAAU7B,EAAM3E,GACvDzN,KAAKkjB,uBAAuB,eAAgB,0BAC5CljB,KAAKqiB,eAAevY,KAAK,CAACsI,EAAM3E,KAEpCoU,EAAkBle,UAAUuQ,iBAAmB,SAAUC,EAAOC,GAC5DpU,KAAKmkB,qBAAqBhQ,EAAOC,IAErCyN,EAAkBle,UAAUwgB,qBAAuB,SAAUhQ,EAAOC,EAAUgQ,QACvD,IAAfA,IAAyBA,GAAa,GAC1C,IAAIpP,EAAM,KACW,iBAAVb,IAAuBa,EAAMnV,EAAK+U,kBAAkBT,KAA8B,SAAnBa,EAAIH,YAEtE7U,KAAK8iB,uBAAuBhZ,KAD5BsK,EAASE,WACwB,CAAEC,QAASJ,EAAOG,WAAYF,EAASE,WAAYE,KAAMJ,EAASI,MAAQ,IAG1E,CAAED,QAASJ,EAAOO,SAAUN,EAASM,WAG9E,IACIvM,EADAmX,EAAQ,EAERlL,EAASE,YACTgL,GAAS,KACTnX,EAAQiM,EAASE,aAGjBgL,GAAS,IACTnX,EAAQiM,EAASM,UAErB,IAAIF,GAAQJ,EAASI,MAAQ,IAAI8L,KAAI,SAAU+D,GAC3C,IACIC,EADAC,EAAW,EAkBf,OAhBIve,MAAM6I,QAAQwV,GACdA,EAAI5Y,SAAQ,SAAUoY,GACdA,aAAiBhkB,EAAK2kB,SACtBD,GAAY,EAEPV,aAAiBhkB,EAAK4kB,SAC3BF,GAAY,EAGZD,EAAWT,KAKnBS,EAAWD,EAER,CAACE,EAAUD,MAEtBzkB,EAAK6kB,kBAAkB,CAAEvQ,MAAOA,EAAOmL,MAAOA,EAAO9K,KAAMA,EAAMrM,MAAOA,EAAOwc,mBAAoBP,KAEvGvC,EAAkBle,UAAUoR,mCAAqC,SAAUrJ,EAAWI,GAClF9L,KAAKkjB,uBAAuB,qCAAsC,qBAClE,IAAI0B,EAGoB3d,EAAW,CAC3BpH,EAAK4Q,UAAU,CAAEoU,SAAU,QAAS/Y,SAAUA,EAAUiY,KAAK,MAHjE,SAASa,QAOb5kB,KAAK4iB,mBAAmB9Y,KAAK,CAAE4B,UAAWA,EAAW8X,WAAYoB,KAErE/C,EAAkBle,UAAUgc,gBAAkB,SAAUjU,GACpD,IAAI1J,EAAQhC,KACZA,KAAKqjB,gBACL,IAAI3C,EAAmB1gB,KAAKye,UAAU+C,oBAAoB9V,GAC1D,IAAKgV,EACD,MAAM,IAAI7f,MAAM,+BAAiChB,EAAKwO,WAAW3C,GAAa,oDAGlF,IAAI+U,EAAWzgB,KAAKof,OAAOd,IAA0B,GAEjDva,EAAa/D,KAAKof,OAAOhB,GAA4B,GACrDtc,EAAS2e,EAAW,KAAOzgB,KAAKof,OAAOvf,EAAK2b,OAAQ,MACpD+E,EAAwBvgB,KAAKof,OAAOnB,GACpCuC,EAAW,OAASoB,KACxBrB,EAAsBrC,kBAAkBsC,GACxC,IAAIG,EAAgB,WAChB,IAAI9e,EAAe6e,EAAiBpa,OAAOzG,EAAK0f,SAASqB,KAAM,GAAI,IAAMJ,EAAUxe,EAAM+f,YACzF,OAAO,IAAIngB,EAAiBC,EAAcC,EAAQiC,IAElD8c,EAAW/e,EAA2BA,EAAOP,IAAIof,GAA7BA,IAExB,OADA3gB,KAAK2e,gBAAgB7U,KAAK+W,GACnBA,GAEJgB,EA9b2B,GA4clC+B,GAAU/jB,EAAKilB,YAActG,GAAiBqD,GAQ9CmB,GAAanjB,EAAKilB,YAAc/F,GAAqBgE,GAEzD,SAASA,KACL,OAAO3B,GAAYA,IAAa,IAAIS,GA0BxC,SAASzC,GAAOgB,EAAQhgB,GACpB,IAAIid,EAAU2F,KACd,OAAI5C,EAAO9T,QAAQhC,IAAuB,EAE/B,WACH,IAAItI,EAAQhC,KAGZ,OAAOqd,EAAQjI,oBAAoB1M,MAAK,WACpC,IAAIqc,EAAY1H,EAAQ+B,OAAO9U,GAE/B,OADA+S,EAAQ8C,QAAQC,EAAQhgB,EAAI4B,GACrB+iB,EAAU3Z,YAMlB,WACH,OAAOiS,EAAQ8C,QAAQC,EAAQhgB,EAAIJ,OAO/C,IAAIglB,GAAoC,WACpC,SAASA,EAAmBC,GACxBjlB,KAAKilB,WAAaA,EAgBtB,OAdAD,EAAmBrhB,UAAUuhB,WAAa,WACtC,IAAI9R,EAAYpT,KAAKilB,aACjB7R,GACA4P,KAAa7P,uBAAuBC,IAG5C4R,EAAmBrhB,UAAUyb,OAAS,SAAUgB,EAAQhgB,GACpD,IAAIT,EAAOK,KAEX,OAAO,WAEH,OADAL,EAAKulB,aACE9F,GAAOgB,EAAQhgB,GAAI2G,KAAK/G,QAGhCglB,EAlB4B,GAyCnCG,GAA+B,oBAAXjlB,OAAyBd,OAASc,OAEtDilB,GAAUC,YACVD,GAAUC,YAAW,WACjBxB,GAAQhE,qBACRna;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CRnG,EAAQsC,iBAAmBA,EAC3BtC,EAAQ8e,2BAA6BA,EACrC9e,EAAQgf,yBAA2BA,GACnChf,EAAQ0lB,mBAAqBA,GAC7B1lB,EAAQskB,QAAUA,GAClBtkB,EAAQ2e,sBAAwBA,EAChC3e,EAAQ+lB,qCA7CmC,GA8C3C/lB,EAAQgmB,MAx9FR,SAASA,GAAMllB,GACX,IAAIyE,EAAwB,oBAATpE,KAAuBA,KAAO,KACjD,IAAKoE,EACD,OAAO,WACH,OAAOX,QAAQ+D,OAAO,4IAI9B,IAAIsd,EAAY1gB,GAASA,EAAMA,EAAMW,WAAW,cAChD,MAAyB,mBAAd+f,EACAA,EAAUnlB,GAhHzB,SAASolB,EAAcplB,GAGnB,OAAIH,EAAQwlB,QAED,SAAUjd,GACRA,KAGDA,EAAO,cACFiC,KAAO,SAAUpC,GAClB,MAAMA,IAGdlI,EAAcC,EAAIJ,KAAMwI,GAAM,SAAUkd,GACpC,GAAmB,iBAARA,EACP,OAAOld,EAAKiC,KAAK,IAAI5J,MAAM6kB,IAG3Bld,EAAKiC,KAAKib,OASnB,WACH,IAAI1jB,EAAQhC,KACZ,OAAO,IAAIkE,SAAQ,SAAU5D,EAAgBC,GACzCJ,EAAcC,EAAI4B,EAAO1B,EAAgBC,OAsF1CilB,CAAcplB,IA08FzBd,EAAQqmB,qBAv+ER,SAASA,KACL,GAAIpgB,EACA,OAAOA,EAAoBogB,wBAvJnC,SAASC,IACUzgB,IACN0gB,sBAAsB/e,OAAS,EAwJpC8e,IAm+ERtmB,EAAQwmB,UAtkFR,SAASA,GAAU1lB,GACf,OAAImF,EACOA,EAAoBugB,UAAU1lB,GAjJ7C,SAAS2lB,EAAkB3lB,GAEvB,OAAO,WAEH,IADA,IAAI4lB,EAAO,GACFC,EAAK,EAAGA,EAAKpf,UAAUC,OAAQmf,IACpCD,EAAKC,GAAMpf,UAAUof,GAEzB,IAAIllB,EAAgBD,EAAcG,gBAClC,GAAIiE,EACA,MAAM,IAAIrE,MAAM,uCAEpBqE,GAAmB,EACnB,IACI,IAAKH,EAAwB,CACzB,GAAIhE,EAAcM,wBAAyByD,EACvC,MAAM,IAAIjE,MAAM,uCAEpBkE,EAAyB,IAAID,EAEjC,IAAIV,OAAM,EACN8hB,EAAoBnlB,EAAcM,cACtCN,EAAcU,YAAYsD,GAC1B,IACIX,EAAMhE,EAAG4G,MAAMhH,KAAMgmB,GACrB5gB,IAEJ,QACIrE,EAAcU,YAAYykB,GAE9B,GAAInhB,EAAuB8gB,sBAAsB/e,OAAS,EACtD,MAAM,IAAIjG,MAAMkE,EAAuB8gB,sBAAsB/e,OAAS,0CAG1E,GAAI/B,EAAuBohB,cAAcrf,OAAS,EAC9C,MAAM,IAAIjG,MAAMkE,EAAuBohB,cAAcrf,OAAS,iCAElE,OAAO1C,EAEX,QACIc,GAAmB,EACnBF,MA4GG+gB,CAAkB3lB,IAkkFjCd,EAAQ8mB,MAt/ER,SAASA,GAAMC,GACX,OAAI9gB,EACOA,EAAoB6gB,MAAMC,GAlJzC,SAASC,EAAcD,GACnB,OAAOlhB,IAAwBihB,MAAMC,GAoJ1BC,CAAcD,IAk/E7B/mB,EAAQ+F,gBA79ER,SAASA,KACL,OAAIE,EACOA,EAAoBF,kBAGpBD,KAy9Ef9F,EAAQ0jB,WAAaA,GACrB1jB,EAAQ8f,OAASA,GACjB9f,EAAQmG,mBAAqBA,EAC7BnG,EAAQinB,KAjhFR,SAASA,GAAKC,EAAQC,GAKlB,YAJe,IAAXD,IAAqBA,EAAS,QACd,IAAhBC,IAA0BA,EAAc,CACxCC,mCAAmC,IAEnCnhB,EACOA,EAAoBghB,KAAKC,EAAQC,GAjJhD,SAASE,EAAaH,EAAQC,QACX,IAAXD,IAAqBA,EAAS,QACd,IAAhBC,IAA0BA,EAAc,CACxCC,mCAAmC,IAEvCvhB,IAAwBohB,KAAKC,EAAQ,KAAMC,GA+IhCE,CAAaH,EAAQC,IAygFpCnnB,EAAQsnB,WAtFR,SAASA,GAAWxT,EAAWhT,GAC3B,OAAIA,EAEO,WACH,IAAIid,EAAU2F,KAId,OAHI5P,GACAiK,EAAQlK,uBAAuBC,GAE5BhT,EAAG4G,MAAMhH,OAGjB,IAAIglB,IAAmB,WAAc,OAAO5R;;;;;;;QA4EvD9T,EAAQunB,mBAAqBzZ,EAC7B9N,EAAQwnB,iBAAmBzF,GAC3B/hB,EAAQynB,wBAA0BpF,GAClCriB,EAAQ0nB,yCAA2CnF,GACnDviB,EAAQ2nB,yCAA2CzI,GACnDlf,EAAQ4nB,yCAA2CnI,GAEnDlZ,OAAO8B,eAAerI,EAAS,aAAc,CAAE6I,OAAO","sourcesContent":["/**\n * @license Angular v9.1.11\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/compiler')) :\n    typeof define === 'function' && define.amd ? define('@angular/core/testing', ['exports', '@angular/core', '@angular/compiler'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.core = global.ng.core || {}, global.ng.core.testing = {}), global.ng.core, global.ng.compiler));\n}(this, (function (exports, core, compiler) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _global = (typeof window === 'undefined' ? global : window);\n    /**\n     * Wraps a test function in an asynchronous test zone. The test will automatically\n     * complete when all asynchronous calls within this zone are done. Can be used\n     * to wrap an {@link inject} call.\n     *\n     * Example:\n     *\n     * ```\n     * it('...', async(inject([AClass], (object) => {\n     *   object.doSomething.then(() => {\n     *     expect(...);\n     *   })\n     * });\n     * ```\n     *\n     *\n     */\n    function asyncFallback(fn) {\n        // If we're running using the Jasmine test framework, adapt to call the 'done'\n        // function when asynchronous activity is finished.\n        if (_global.jasmine) {\n            // Not using an arrow function to preserve context passed from call site\n            return function (done) {\n                if (!done) {\n                    // if we run beforeEach in @angular/core/testing/testing_internal then we get no done\n                    // fake it here and assume sync.\n                    done = function () { };\n                    done.fail = function (e) {\n                        throw e;\n                    };\n                }\n                runInTestZone(fn, this, done, function (err) {\n                    if (typeof err === 'string') {\n                        return done.fail(new Error(err));\n                    }\n                    else {\n                        done.fail(err);\n                    }\n                });\n            };\n        }\n        // Otherwise, return a promise which will resolve when asynchronous activity\n        // is finished. This will be correctly consumed by the Mocha framework with\n        // it('...', async(myFn)); or can be used in a custom framework.\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            var _this = this;\n            return new Promise(function (finishCallback, failCallback) {\n                runInTestZone(fn, _this, finishCallback, failCallback);\n            });\n        };\n    }\n    function runInTestZone(fn, context, finishCallback, failCallback) {\n        var currentZone = Zone.current;\n        var AsyncTestZoneSpec = Zone['AsyncTestZoneSpec'];\n        if (AsyncTestZoneSpec === undefined) {\n            throw new Error('AsyncTestZoneSpec is needed for the async() test helper but could not be found. ' +\n                'Please make sure that your environment includes zone.js/dist/async-test.js');\n        }\n        var ProxyZoneSpec = Zone['ProxyZoneSpec'];\n        if (ProxyZoneSpec === undefined) {\n            throw new Error('ProxyZoneSpec is needed for the async() test helper but could not be found. ' +\n                'Please make sure that your environment includes zone.js/dist/proxy.js');\n        }\n        var proxyZoneSpec = ProxyZoneSpec.get();\n        ProxyZoneSpec.assertPresent();\n        // We need to create the AsyncTestZoneSpec outside the ProxyZone.\n        // If we do it in ProxyZone then we will get to infinite recursion.\n        var proxyZone = Zone.current.getZoneWith('ProxyZoneSpec');\n        var previousDelegate = proxyZoneSpec.getDelegate();\n        proxyZone.parent.run(function () {\n            var testZoneSpec = new AsyncTestZoneSpec(function () {\n                // Need to restore the original zone.\n                currentZone.run(function () {\n                    if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n                        // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n                        proxyZoneSpec.setDelegate(previousDelegate);\n                    }\n                    finishCallback();\n                });\n            }, function (error) {\n                // Need to restore the original zone.\n                currentZone.run(function () {\n                    if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n                        // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n                        proxyZoneSpec.setDelegate(previousDelegate);\n                    }\n                    failCallback(error);\n                });\n            }, 'test');\n            proxyZoneSpec.setDelegate(testZoneSpec);\n        });\n        return Zone.current.runGuarded(fn, context);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Wraps a test function in an asynchronous test zone. The test will automatically\n     * complete when all asynchronous calls within this zone are done. Can be used\n     * to wrap an {@link inject} call.\n     *\n     * Example:\n     *\n     * ```\n     * it('...', async(inject([AClass], (object) => {\n     *   object.doSomething.then(() => {\n     *     expect(...);\n     *   })\n     * });\n     * ```\n     *\n     * @publicApi\n     */\n    function async(fn) {\n        var _Zone = typeof Zone !== 'undefined' ? Zone : null;\n        if (!_Zone) {\n            return function () {\n                return Promise.reject('Zone is needed for the async() test helper but could not be found. ' +\n                    'Please make sure that your environment includes zone.js/dist/zone.js');\n            };\n        }\n        var asyncTest = _Zone && _Zone[_Zone.__symbol__('asyncTest')];\n        if (typeof asyncTest === 'function') {\n            return asyncTest(fn);\n        }\n        // not using new version of zone.js\n        // TODO @JiaLiPassion, remove this after all library updated to\n        // newest version of zone.js(0.8.25)\n        return asyncFallback(fn);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Fixture for debugging and testing a component.\n     *\n     * @publicApi\n     */\n    var ComponentFixture = /** @class */ (function () {\n        function ComponentFixture(componentRef, ngZone, _autoDetect) {\n            var _this = this;\n            this.componentRef = componentRef;\n            this.ngZone = ngZone;\n            this._autoDetect = _autoDetect;\n            this._isStable = true;\n            this._isDestroyed = false;\n            this._resolve = null;\n            this._promise = null;\n            this._onUnstableSubscription = null;\n            this._onStableSubscription = null;\n            this._onMicrotaskEmptySubscription = null;\n            this._onErrorSubscription = null;\n            this.changeDetectorRef = componentRef.changeDetectorRef;\n            this.elementRef = componentRef.location;\n            this.debugElement = core.getDebugNode(this.elementRef.nativeElement);\n            this.componentInstance = componentRef.instance;\n            this.nativeElement = this.elementRef.nativeElement;\n            this.componentRef = componentRef;\n            this.ngZone = ngZone;\n            if (ngZone) {\n                // Create subscriptions outside the NgZone so that the callbacks run oustide\n                // of NgZone.\n                ngZone.runOutsideAngular(function () {\n                    _this._onUnstableSubscription = ngZone.onUnstable.subscribe({\n                        next: function () {\n                            _this._isStable = false;\n                        }\n                    });\n                    _this._onMicrotaskEmptySubscription = ngZone.onMicrotaskEmpty.subscribe({\n                        next: function () {\n                            if (_this._autoDetect) {\n                                // Do a change detection run with checkNoChanges set to true to check\n                                // there are no changes on the second run.\n                                _this.detectChanges(true);\n                            }\n                        }\n                    });\n                    _this._onStableSubscription = ngZone.onStable.subscribe({\n                        next: function () {\n                            _this._isStable = true;\n                            // Check whether there is a pending whenStable() completer to resolve.\n                            if (_this._promise !== null) {\n                                // If so check whether there are no pending macrotasks before resolving.\n                                // Do this check in the next tick so that ngZone gets a chance to update the state of\n                                // pending macrotasks.\n                                scheduleMicroTask(function () {\n                                    if (!ngZone.hasPendingMacrotasks) {\n                                        if (_this._promise !== null) {\n                                            _this._resolve(true);\n                                            _this._resolve = null;\n                                            _this._promise = null;\n                                        }\n                                    }\n                                });\n                            }\n                        }\n                    });\n                    _this._onErrorSubscription = ngZone.onError.subscribe({\n                        next: function (error) {\n                            throw error;\n                        }\n                    });\n                });\n            }\n        }\n        ComponentFixture.prototype._tick = function (checkNoChanges) {\n            this.changeDetectorRef.detectChanges();\n            if (checkNoChanges) {\n                this.checkNoChanges();\n            }\n        };\n        /**\n         * Trigger a change detection cycle for the component.\n         */\n        ComponentFixture.prototype.detectChanges = function (checkNoChanges) {\n            var _this = this;\n            if (checkNoChanges === void 0) { checkNoChanges = true; }\n            if (this.ngZone != null) {\n                // Run the change detection inside the NgZone so that any async tasks as part of the change\n                // detection are captured by the zone and can be waited for in isStable.\n                this.ngZone.run(function () {\n                    _this._tick(checkNoChanges);\n                });\n            }\n            else {\n                // Running without zone. Just do the change detection.\n                this._tick(checkNoChanges);\n            }\n        };\n        /**\n         * Do a change detection run to make sure there were no changes.\n         */\n        ComponentFixture.prototype.checkNoChanges = function () {\n            this.changeDetectorRef.checkNoChanges();\n        };\n        /**\n         * Set whether the fixture should autodetect changes.\n         *\n         * Also runs detectChanges once so that any existing change is detected.\n         */\n        ComponentFixture.prototype.autoDetectChanges = function (autoDetect) {\n            if (autoDetect === void 0) { autoDetect = true; }\n            if (this.ngZone == null) {\n                throw new Error('Cannot call autoDetectChanges when ComponentFixtureNoNgZone is set');\n            }\n            this._autoDetect = autoDetect;\n            this.detectChanges();\n        };\n        /**\n         * Return whether the fixture is currently stable or has async tasks that have not been completed\n         * yet.\n         */\n        ComponentFixture.prototype.isStable = function () {\n            return this._isStable && !this.ngZone.hasPendingMacrotasks;\n        };\n        /**\n         * Get a promise that resolves when the fixture is stable.\n         *\n         * This can be used to resume testing after events have triggered asynchronous activity or\n         * asynchronous change detection.\n         */\n        ComponentFixture.prototype.whenStable = function () {\n            var _this = this;\n            if (this.isStable()) {\n                return Promise.resolve(false);\n            }\n            else if (this._promise !== null) {\n                return this._promise;\n            }\n            else {\n                this._promise = new Promise(function (res) {\n                    _this._resolve = res;\n                });\n                return this._promise;\n            }\n        };\n        ComponentFixture.prototype._getRenderer = function () {\n            if (this._renderer === undefined) {\n                this._renderer = this.componentRef.injector.get(core.RendererFactory2, null);\n            }\n            return this._renderer;\n        };\n        /**\n         * Get a promise that resolves when the ui state is stable following animations.\n         */\n        ComponentFixture.prototype.whenRenderingDone = function () {\n            var renderer = this._getRenderer();\n            if (renderer && renderer.whenRenderingDone) {\n                return renderer.whenRenderingDone();\n            }\n            return this.whenStable();\n        };\n        /**\n         * Trigger component destruction.\n         */\n        ComponentFixture.prototype.destroy = function () {\n            if (!this._isDestroyed) {\n                this.componentRef.destroy();\n                if (this._onUnstableSubscription != null) {\n                    this._onUnstableSubscription.unsubscribe();\n                    this._onUnstableSubscription = null;\n                }\n                if (this._onStableSubscription != null) {\n                    this._onStableSubscription.unsubscribe();\n                    this._onStableSubscription = null;\n                }\n                if (this._onMicrotaskEmptySubscription != null) {\n                    this._onMicrotaskEmptySubscription.unsubscribe();\n                    this._onMicrotaskEmptySubscription = null;\n                }\n                if (this._onErrorSubscription != null) {\n                    this._onErrorSubscription.unsubscribe();\n                    this._onErrorSubscription = null;\n                }\n                this._isDestroyed = true;\n            }\n        };\n        return ComponentFixture;\n    }());\n    function scheduleMicroTask(fn) {\n        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * fakeAsync has been moved to zone.js\n     * this file is for fallback in case old version of zone.js is used\n     */\n    var _Zone = typeof Zone !== 'undefined' ? Zone : null;\n    var FakeAsyncTestZoneSpec = _Zone && _Zone['FakeAsyncTestZoneSpec'];\n    var ProxyZoneSpec = _Zone && _Zone['ProxyZoneSpec'];\n    var _fakeAsyncTestZoneSpec = null;\n    /**\n     * Clears out the shared fake async zone for a test.\n     * To be called in a global `beforeEach`.\n     *\n     * @publicApi\n     */\n    function resetFakeAsyncZoneFallback() {\n        _fakeAsyncTestZoneSpec = null;\n        // in node.js testing we may not have ProxyZoneSpec in which case there is nothing to reset.\n        ProxyZoneSpec && ProxyZoneSpec.assertPresent().resetDelegate();\n    }\n    var _inFakeAsyncCall = false;\n    /**\n     * Wraps a function to be executed in the fakeAsync zone:\n     * - microtasks are manually executed by calling `flushMicrotasks()`,\n     * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n     *\n     * If there are any pending timers at the end of the function, an exception will be thrown.\n     *\n     * Can be used to wrap inject() calls.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/testing/ts/fake_async.ts region='basic'}\n     *\n     * @param fn\n     * @returns The function wrapped to be executed in the fakeAsync zone\n     *\n     * @publicApi\n     */\n    function fakeAsyncFallback(fn) {\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            var proxyZoneSpec = ProxyZoneSpec.assertPresent();\n            if (_inFakeAsyncCall) {\n                throw new Error('fakeAsync() calls can not be nested');\n            }\n            _inFakeAsyncCall = true;\n            try {\n                if (!_fakeAsyncTestZoneSpec) {\n                    if (proxyZoneSpec.getDelegate() instanceof FakeAsyncTestZoneSpec) {\n                        throw new Error('fakeAsync() calls can not be nested');\n                    }\n                    _fakeAsyncTestZoneSpec = new FakeAsyncTestZoneSpec();\n                }\n                var res = void 0;\n                var lastProxyZoneSpec = proxyZoneSpec.getDelegate();\n                proxyZoneSpec.setDelegate(_fakeAsyncTestZoneSpec);\n                try {\n                    res = fn.apply(this, args);\n                    flushMicrotasksFallback();\n                }\n                finally {\n                    proxyZoneSpec.setDelegate(lastProxyZoneSpec);\n                }\n                if (_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length > 0) {\n                    throw new Error(_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length + \" \" +\n                        \"periodic timer(s) still in the queue.\");\n                }\n                if (_fakeAsyncTestZoneSpec.pendingTimers.length > 0) {\n                    throw new Error(_fakeAsyncTestZoneSpec.pendingTimers.length + \" timer(s) still in the queue.\");\n                }\n                return res;\n            }\n            finally {\n                _inFakeAsyncCall = false;\n                resetFakeAsyncZoneFallback();\n            }\n        };\n    }\n    function _getFakeAsyncZoneSpec() {\n        if (_fakeAsyncTestZoneSpec == null) {\n            throw new Error('The code should be running in the fakeAsync zone to call this function');\n        }\n        return _fakeAsyncTestZoneSpec;\n    }\n    /**\n     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n     *\n     * The microtasks queue is drained at the very start of this function and after any timer callback\n     * has been executed.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/testing/ts/fake_async.ts region='basic'}\n     *\n     * @publicApi\n     */\n    function tickFallback(millis, tickOptions) {\n        if (millis === void 0) { millis = 0; }\n        if (tickOptions === void 0) { tickOptions = {\n            processNewMacroTasksSynchronously: true\n        }; }\n        _getFakeAsyncZoneSpec().tick(millis, null, tickOptions);\n    }\n    /**\n     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n     * draining the macrotask queue until it is empty. The returned value is the milliseconds\n     * of time that would have been elapsed.\n     *\n     * @param maxTurns\n     * @returns The simulated time elapsed, in millis.\n     *\n     * @publicApi\n     */\n    function flushFallback(maxTurns) {\n        return _getFakeAsyncZoneSpec().flush(maxTurns);\n    }\n    /**\n     * Discard all remaining periodic tasks.\n     *\n     * @publicApi\n     */\n    function discardPeriodicTasksFallback() {\n        var zoneSpec = _getFakeAsyncZoneSpec();\n        zoneSpec.pendingPeriodicTimers.length = 0;\n    }\n    /**\n     * Flush any pending microtasks.\n     *\n     * @publicApi\n     */\n    function flushMicrotasksFallback() {\n        _getFakeAsyncZoneSpec().flushMicrotasks();\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _Zone$1 = typeof Zone !== 'undefined' ? Zone : null;\n    var fakeAsyncTestModule = _Zone$1 && _Zone$1[_Zone$1.__symbol__('fakeAsyncTest')];\n    /**\n     * Clears out the shared fake async zone for a test.\n     * To be called in a global `beforeEach`.\n     *\n     * @publicApi\n     */\n    function resetFakeAsyncZone() {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.resetFakeAsyncZone();\n        }\n        else {\n            return resetFakeAsyncZoneFallback();\n        }\n    }\n    /**\n     * Wraps a function to be executed in the fakeAsync zone:\n     * - microtasks are manually executed by calling `flushMicrotasks()`,\n     * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n     *\n     * If there are any pending timers at the end of the function, an exception will be thrown.\n     *\n     * Can be used to wrap inject() calls.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/testing/ts/fake_async.ts region='basic'}\n     *\n     * @param fn\n     * @returns The function wrapped to be executed in the fakeAsync zone\n     *\n     * @publicApi\n     */\n    function fakeAsync(fn) {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.fakeAsync(fn);\n        }\n        else {\n            return fakeAsyncFallback(fn);\n        }\n    }\n    /**\n     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n     *\n     * The microtasks queue is drained at the very start of this function and after any timer callback\n     * has been executed.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/testing/ts/fake_async.ts region='basic'}\n     *\n     * @param millis, the number of millisecond to advance the virtual timer\n     * @param tickOptions, the options of tick with a flag called\n     * processNewMacroTasksSynchronously, whether to invoke the new macroTasks, by default is\n     * false, means the new macroTasks will be invoked\n     *\n     * For example,\n     *\n     * it ('test with nested setTimeout', fakeAsync(() => {\n     *   let nestedTimeoutInvoked = false;\n     *   function funcWithNestedTimeout() {\n     *     setTimeout(() => {\n     *       nestedTimeoutInvoked = true;\n     *     });\n     *   };\n     *   setTimeout(funcWithNestedTimeout);\n     *   tick();\n     *   expect(nestedTimeoutInvoked).toBe(true);\n     * }));\n     *\n     * in this case, we have a nested timeout (new macroTask), when we tick, both the\n     * funcWithNestedTimeout and the nested timeout both will be invoked.\n     *\n     * it ('test with nested setTimeout', fakeAsync(() => {\n     *   let nestedTimeoutInvoked = false;\n     *   function funcWithNestedTimeout() {\n     *     setTimeout(() => {\n     *       nestedTimeoutInvoked = true;\n     *     });\n     *   };\n     *   setTimeout(funcWithNestedTimeout);\n     *   tick(0, {processNewMacroTasksSynchronously: false});\n     *   expect(nestedTimeoutInvoked).toBe(false);\n     * }));\n     *\n     * if we pass the tickOptions with processNewMacroTasksSynchronously to be false, the nested timeout\n     * will not be invoked.\n     *\n     *\n     * @publicApi\n     */\n    function tick(millis, tickOptions) {\n        if (millis === void 0) { millis = 0; }\n        if (tickOptions === void 0) { tickOptions = {\n            processNewMacroTasksSynchronously: true\n        }; }\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.tick(millis, tickOptions);\n        }\n        else {\n            return tickFallback(millis, tickOptions);\n        }\n    }\n    /**\n     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n     * draining the macrotask queue until it is empty. The returned value is the milliseconds\n     * of time that would have been elapsed.\n     *\n     * @param maxTurns\n     * @returns The simulated time elapsed, in millis.\n     *\n     * @publicApi\n     */\n    function flush(maxTurns) {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.flush(maxTurns);\n        }\n        else {\n            return flushFallback(maxTurns);\n        }\n    }\n    /**\n     * Discard all remaining periodic tasks.\n     *\n     * @publicApi\n     */\n    function discardPeriodicTasks() {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.discardPeriodicTasks();\n        }\n        else {\n            discardPeriodicTasksFallback();\n        }\n    }\n    /**\n     * Flush any pending microtasks.\n     *\n     * @publicApi\n     */\n    function flushMicrotasks() {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.flushMicrotasks();\n        }\n        else {\n            return flushMicrotasksFallback();\n        }\n    }\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __rest(s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __exportStar(m, exports) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n\r\n    function __values(o) {\r\n        var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n        if (m) return m.call(o);\r\n        if (o && typeof o.length === \"number\") return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n        throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\r\n\r\n    function __spreadArrays() {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    function __await(v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    }\r\n\r\n    function __asyncGenerator(thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    }\r\n\r\n    function __asyncDelegator(o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    }\r\n\r\n    function __asyncValues(o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    }\r\n\r\n    function __makeTemplateObject(cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    function __importStar(mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result.default = mod;\r\n        return result;\r\n    }\r\n\r\n    function __importDefault(mod) {\r\n        return (mod && mod.__esModule) ? mod : { default: mod };\r\n    }\r\n\r\n    function __classPrivateFieldGet(receiver, privateMap) {\r\n        if (!privateMap.has(receiver)) {\r\n            throw new TypeError(\"attempted to get private field on non-instance\");\r\n        }\r\n        return privateMap.get(receiver);\r\n    }\r\n\r\n    function __classPrivateFieldSet(receiver, privateMap, value) {\r\n        if (!privateMap.has(receiver)) {\r\n            throw new TypeError(\"attempted to set private field on non-instance\");\r\n        }\r\n        privateMap.set(receiver, value);\r\n        return value;\r\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Injectable completer that allows signaling completion of an asynchronous test. Used internally.\n     */\n    var AsyncTestCompleter = /** @class */ (function () {\n        function AsyncTestCompleter() {\n            var _this = this;\n            this._promise = new Promise(function (res, rej) {\n                _this._resolve = res;\n                _this._reject = rej;\n            });\n        }\n        AsyncTestCompleter.prototype.done = function (value) {\n            this._resolve(value);\n        };\n        AsyncTestCompleter.prototype.fail = function (error, stackTrace) {\n            this._reject(error);\n        };\n        Object.defineProperty(AsyncTestCompleter.prototype, \"promise\", {\n            get: function () {\n                return this._promise;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return AsyncTestCompleter;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Used to resolve resource URLs on `@Component` when used with JIT compilation.\n     *\n     * Example:\n     * ```\n     * @Component({\n     *   selector: 'my-comp',\n     *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n     * })\n     * class MyComponent{\n     * }\n     *\n     * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process\n     * // and `MyComponent`'s `@Component.templateUrl` needs to be resolved asynchronously.\n     *\n     * // Calling `resolveComponentResources()` will resolve `@Component.templateUrl` into\n     * // `@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.\n     *\n     * // Use browser's `fetch()` function as the default resource resolution strategy.\n     * resolveComponentResources(fetch).then(() => {\n     *   // After resolution all URLs have been converted into `template` strings.\n     *   renderComponent(MyComponent);\n     * });\n     *\n     * ```\n     *\n     * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n     * to call this method outside JIT mode.\n     *\n     * @param resourceResolver a function which is responsible for returning a `Promise` to the\n     * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.\n     */\n    function resolveComponentResources(resourceResolver) {\n        // Store all promises which are fetching the resources.\n        var componentResolved = [];\n        // Cache so that we don't fetch the same resource more than once.\n        var urlMap = new Map();\n        function cachedResourceResolve(url) {\n            var promise = urlMap.get(url);\n            if (!promise) {\n                var resp = resourceResolver(url);\n                urlMap.set(url, promise = resp.then(unwrapResponse));\n            }\n            return promise;\n        }\n        componentResourceResolutionQueue.forEach(function (component, type) {\n            var promises = [];\n            if (component.templateUrl) {\n                promises.push(cachedResourceResolve(component.templateUrl).then(function (template) {\n                    component.template = template;\n                }));\n            }\n            var styleUrls = component.styleUrls;\n            var styles = component.styles || (component.styles = []);\n            var styleOffset = component.styles.length;\n            styleUrls && styleUrls.forEach(function (styleUrl, index) {\n                styles.push(''); // pre-allocate array.\n                promises.push(cachedResourceResolve(styleUrl).then(function (style) {\n                    styles[styleOffset + index] = style;\n                    styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n                    if (styleUrls.length == 0) {\n                        component.styleUrls = undefined;\n                    }\n                }));\n            });\n            var fullyResolved = Promise.all(promises).then(function () { return componentDefResolved(type); });\n            componentResolved.push(fullyResolved);\n        });\n        clearResolutionOfComponentResourcesQueue();\n        return Promise.all(componentResolved).then(function () { return undefined; });\n    }\n    var componentResourceResolutionQueue = new Map();\n    // Track when existing ɵcmp for a Type is waiting on resources.\n    var componentDefPendingResolution = new Set();\n    function maybeQueueResolutionOfComponentResources(type, metadata) {\n        if (componentNeedsResolution(metadata)) {\n            componentResourceResolutionQueue.set(type, metadata);\n            componentDefPendingResolution.add(type);\n        }\n    }\n    function isComponentDefPendingResolution(type) {\n        return componentDefPendingResolution.has(type);\n    }\n    function componentNeedsResolution(component) {\n        return !!((component.templateUrl && !component.hasOwnProperty('template')) ||\n            component.styleUrls && component.styleUrls.length);\n    }\n    function clearResolutionOfComponentResourcesQueue() {\n        var old = componentResourceResolutionQueue;\n        componentResourceResolutionQueue = new Map();\n        return old;\n    }\n    function restoreComponentResolutionQueue(queue) {\n        componentDefPendingResolution.clear();\n        queue.forEach(function (_, type) { return componentDefPendingResolution.add(type); });\n        componentResourceResolutionQueue = queue;\n    }\n    function isComponentResourceResolutionQueueEmpty() {\n        return componentResourceResolutionQueue.size === 0;\n    }\n    function unwrapResponse(response) {\n        return typeof response == 'string' ? response : response.text();\n    }\n    function componentDefResolved(type) {\n        componentDefPendingResolution.delete(type);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _nextReferenceId = 0;\n    var MetadataOverrider = /** @class */ (function () {\n        function MetadataOverrider() {\n            this._references = new Map();\n        }\n        /**\n         * Creates a new instance for the given metadata class\n         * based on an old instance and overrides.\n         */\n        MetadataOverrider.prototype.overrideMetadata = function (metadataClass, oldMetadata, override) {\n            var props = {};\n            if (oldMetadata) {\n                _valueProps(oldMetadata).forEach(function (prop) { return props[prop] = oldMetadata[prop]; });\n            }\n            if (override.set) {\n                if (override.remove || override.add) {\n                    throw new Error(\"Cannot set and add/remove \" + core.ɵstringify(metadataClass) + \" at the same time!\");\n                }\n                setMetadata(props, override.set);\n            }\n            if (override.remove) {\n                removeMetadata(props, override.remove, this._references);\n            }\n            if (override.add) {\n                addMetadata(props, override.add);\n            }\n            return new metadataClass(props);\n        };\n        return MetadataOverrider;\n    }());\n    function removeMetadata(metadata, remove, references) {\n        var removeObjects = new Set();\n        var _loop_1 = function (prop) {\n            var removeValue = remove[prop];\n            if (Array.isArray(removeValue)) {\n                removeValue.forEach(function (value) {\n                    removeObjects.add(_propHashKey(prop, value, references));\n                });\n            }\n            else {\n                removeObjects.add(_propHashKey(prop, removeValue, references));\n            }\n        };\n        for (var prop in remove) {\n            _loop_1(prop);\n        }\n        var _loop_2 = function (prop) {\n            var propValue = metadata[prop];\n            if (Array.isArray(propValue)) {\n                metadata[prop] = propValue.filter(function (value) { return !removeObjects.has(_propHashKey(prop, value, references)); });\n            }\n            else {\n                if (removeObjects.has(_propHashKey(prop, propValue, references))) {\n                    metadata[prop] = undefined;\n                }\n            }\n        };\n        for (var prop in metadata) {\n            _loop_2(prop);\n        }\n    }\n    function addMetadata(metadata, add) {\n        for (var prop in add) {\n            var addValue = add[prop];\n            var propValue = metadata[prop];\n            if (propValue != null && Array.isArray(propValue)) {\n                metadata[prop] = propValue.concat(addValue);\n            }\n            else {\n                metadata[prop] = addValue;\n            }\n        }\n    }\n    function setMetadata(metadata, set) {\n        for (var prop in set) {\n            metadata[prop] = set[prop];\n        }\n    }\n    function _propHashKey(propName, propValue, references) {\n        var replacer = function (key, value) {\n            if (typeof value === 'function') {\n                value = _serializeReference(value, references);\n            }\n            return value;\n        };\n        return propName + \":\" + JSON.stringify(propValue, replacer);\n    }\n    function _serializeReference(ref, references) {\n        var id = references.get(ref);\n        if (!id) {\n            id = \"\" + core.ɵstringify(ref) + _nextReferenceId++;\n            references.set(ref, id);\n        }\n        return id;\n    }\n    function _valueProps(obj) {\n        var props = [];\n        // regular public props\n        Object.keys(obj).forEach(function (prop) {\n            if (!prop.startsWith('_')) {\n                props.push(prop);\n            }\n        });\n        // getters\n        var proto = obj;\n        while (proto = Object.getPrototypeOf(proto)) {\n            Object.keys(proto).forEach(function (protoProp) {\n                var desc = Object.getOwnPropertyDescriptor(proto, protoProp);\n                if (!protoProp.startsWith('_') && desc && 'get' in desc) {\n                    props.push(protoProp);\n                }\n            });\n        }\n        return props;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var reflection = new core.ɵReflectionCapabilities();\n    /**\n     * Allows to override ivy metadata for tests (via the `TestBed`).\n     */\n    var OverrideResolver = /** @class */ (function () {\n        function OverrideResolver() {\n            this.overrides = new Map();\n            this.resolved = new Map();\n        }\n        OverrideResolver.prototype.addOverride = function (type, override) {\n            var overrides = this.overrides.get(type) || [];\n            overrides.push(override);\n            this.overrides.set(type, overrides);\n            this.resolved.delete(type);\n        };\n        OverrideResolver.prototype.setOverrides = function (overrides) {\n            var _this = this;\n            this.overrides.clear();\n            overrides.forEach(function (_a) {\n                var _b = __read(_a, 2), type = _b[0], override = _b[1];\n                _this.addOverride(type, override);\n            });\n        };\n        OverrideResolver.prototype.getAnnotation = function (type) {\n            var annotations = reflection.annotations(type);\n            // Try to find the nearest known Type annotation and make sure that this annotation is an\n            // instance of the type we are looking for, so we can use it for resolution. Note: there might\n            // be multiple known annotations found due to the fact that Components can extend Directives (so\n            // both Directive and Component annotations would be present), so we always check if the known\n            // annotation has the right type.\n            for (var i = annotations.length - 1; i >= 0; i--) {\n                var annotation = annotations[i];\n                var isKnownType = annotation instanceof core.Directive || annotation instanceof core.Component ||\n                    annotation instanceof core.Pipe || annotation instanceof core.NgModule;\n                if (isKnownType) {\n                    return annotation instanceof this.type ? annotation : null;\n                }\n            }\n            return null;\n        };\n        OverrideResolver.prototype.resolve = function (type) {\n            var _this = this;\n            var resolved = this.resolved.get(type) || null;\n            if (!resolved) {\n                resolved = this.getAnnotation(type);\n                if (resolved) {\n                    var overrides = this.overrides.get(type);\n                    if (overrides) {\n                        var overrider_1 = new MetadataOverrider();\n                        overrides.forEach(function (override) {\n                            resolved = overrider_1.overrideMetadata(_this.type, resolved, override);\n                        });\n                    }\n                }\n                this.resolved.set(type, resolved);\n            }\n            return resolved;\n        };\n        return OverrideResolver;\n    }());\n    var DirectiveResolver = /** @class */ (function (_super) {\n        __extends(DirectiveResolver, _super);\n        function DirectiveResolver() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(DirectiveResolver.prototype, \"type\", {\n            get: function () {\n                return core.Directive;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return DirectiveResolver;\n    }(OverrideResolver));\n    var ComponentResolver = /** @class */ (function (_super) {\n        __extends(ComponentResolver, _super);\n        function ComponentResolver() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(ComponentResolver.prototype, \"type\", {\n            get: function () {\n                return core.Component;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return ComponentResolver;\n    }(OverrideResolver));\n    var PipeResolver = /** @class */ (function (_super) {\n        __extends(PipeResolver, _super);\n        function PipeResolver() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(PipeResolver.prototype, \"type\", {\n            get: function () {\n                return core.Pipe;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return PipeResolver;\n    }(OverrideResolver));\n    var NgModuleResolver = /** @class */ (function (_super) {\n        __extends(NgModuleResolver, _super);\n        function NgModuleResolver() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(NgModuleResolver.prototype, \"type\", {\n            get: function () {\n                return core.NgModule;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return NgModuleResolver;\n    }(OverrideResolver));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var TestingModuleOverride;\n    (function (TestingModuleOverride) {\n        TestingModuleOverride[TestingModuleOverride[\"DECLARATION\"] = 0] = \"DECLARATION\";\n        TestingModuleOverride[TestingModuleOverride[\"OVERRIDE_TEMPLATE\"] = 1] = \"OVERRIDE_TEMPLATE\";\n    })(TestingModuleOverride || (TestingModuleOverride = {}));\n    function isTestingModuleOverride(value) {\n        return value === TestingModuleOverride.DECLARATION ||\n            value === TestingModuleOverride.OVERRIDE_TEMPLATE;\n    }\n    var R3TestBedCompiler = /** @class */ (function () {\n        function R3TestBedCompiler(platform, additionalModuleTypes) {\n            this.platform = platform;\n            this.additionalModuleTypes = additionalModuleTypes;\n            this.originalComponentResolutionQueue = null;\n            // Testing module configuration\n            this.declarations = [];\n            this.imports = [];\n            this.providers = [];\n            this.schemas = [];\n            // Queues of components/directives/pipes that should be recompiled.\n            this.pendingComponents = new Set();\n            this.pendingDirectives = new Set();\n            this.pendingPipes = new Set();\n            // Keep track of all components and directives, so we can patch Providers onto defs later.\n            this.seenComponents = new Set();\n            this.seenDirectives = new Set();\n            // Keep track of overridden modules, so that we can collect all affected ones in the module tree.\n            this.overriddenModules = new Set();\n            // Store resolved styles for Components that have template overrides present and `styleUrls`\n            // defined at the same time.\n            this.existingComponentStyles = new Map();\n            this.resolvers = initResolvers();\n            this.componentToModuleScope = new Map();\n            // Map that keeps initial version of component/directive/pipe defs in case\n            // we compile a Type again, thus overriding respective static fields. This is\n            // required to make sure we restore defs to their initial states between test runs\n            // TODO: we should support the case with multiple defs on a type\n            this.initialNgDefs = new Map();\n            // Array that keeps cleanup operations for initial versions of component/directive/pipe/module\n            // defs in case TestBed makes changes to the originals.\n            this.defCleanupOps = [];\n            this._injector = null;\n            this.compilerProviders = null;\n            this.providerOverrides = [];\n            this.rootProviderOverrides = [];\n            // Overrides for injectables with `{providedIn: SomeModule}` need to be tracked and added to that\n            // module's provider list.\n            this.providerOverridesByModule = new Map();\n            this.providerOverridesByToken = new Map();\n            this.moduleProvidersOverridden = new Set();\n            this.testModuleRef = null;\n            var DynamicTestModule = /** @class */ (function () {\n                function DynamicTestModule() {\n                }\n                return DynamicTestModule;\n            }());\n            this.testModuleType = DynamicTestModule;\n        }\n        R3TestBedCompiler.prototype.setCompilerProviders = function (providers) {\n            this.compilerProviders = providers;\n            this._injector = null;\n        };\n        R3TestBedCompiler.prototype.configureTestingModule = function (moduleDef) {\n            var _a, _b, _c, _d;\n            // Enqueue any compilation tasks for the directly declared component.\n            if (moduleDef.declarations !== undefined) {\n                this.queueTypeArray(moduleDef.declarations, TestingModuleOverride.DECLARATION);\n                (_a = this.declarations).push.apply(_a, __spread(moduleDef.declarations));\n            }\n            // Enqueue any compilation tasks for imported modules.\n            if (moduleDef.imports !== undefined) {\n                this.queueTypesFromModulesArray(moduleDef.imports);\n                (_b = this.imports).push.apply(_b, __spread(moduleDef.imports));\n            }\n            if (moduleDef.providers !== undefined) {\n                (_c = this.providers).push.apply(_c, __spread(moduleDef.providers));\n            }\n            if (moduleDef.schemas !== undefined) {\n                (_d = this.schemas).push.apply(_d, __spread(moduleDef.schemas));\n            }\n        };\n        R3TestBedCompiler.prototype.overrideModule = function (ngModule, override) {\n            this.overriddenModules.add(ngModule);\n            // Compile the module right away.\n            this.resolvers.module.addOverride(ngModule, override);\n            var metadata = this.resolvers.module.resolve(ngModule);\n            if (metadata === null) {\n                throw invalidTypeError(ngModule.name, 'NgModule');\n            }\n            this.recompileNgModule(ngModule, metadata);\n            // At this point, the module has a valid module def (ɵmod), but the override may have introduced\n            // new declarations or imported modules. Ingest any possible new types and add them to the\n            // current queue.\n            this.queueTypesFromModulesArray([ngModule]);\n        };\n        R3TestBedCompiler.prototype.overrideComponent = function (component, override) {\n            this.resolvers.component.addOverride(component, override);\n            this.pendingComponents.add(component);\n        };\n        R3TestBedCompiler.prototype.overrideDirective = function (directive, override) {\n            this.resolvers.directive.addOverride(directive, override);\n            this.pendingDirectives.add(directive);\n        };\n        R3TestBedCompiler.prototype.overridePipe = function (pipe, override) {\n            this.resolvers.pipe.addOverride(pipe, override);\n            this.pendingPipes.add(pipe);\n        };\n        R3TestBedCompiler.prototype.overrideProvider = function (token, provider) {\n            var providerDef;\n            if (provider.useFactory !== undefined) {\n                providerDef = {\n                    provide: token,\n                    useFactory: provider.useFactory,\n                    deps: provider.deps || [],\n                    multi: provider.multi\n                };\n            }\n            else if (provider.useValue !== undefined) {\n                providerDef = { provide: token, useValue: provider.useValue, multi: provider.multi };\n            }\n            else {\n                providerDef = { provide: token };\n            }\n            var injectableDef = typeof token !== 'string' ? core.ɵgetInjectableDef(token) : null;\n            var isRoot = injectableDef !== null && injectableDef.providedIn === 'root';\n            var overridesBucket = isRoot ? this.rootProviderOverrides : this.providerOverrides;\n            overridesBucket.push(providerDef);\n            // Keep overrides grouped by token as well for fast lookups using token\n            this.providerOverridesByToken.set(token, providerDef);\n            if (injectableDef !== null && injectableDef.providedIn !== null &&\n                typeof injectableDef.providedIn !== 'string') {\n                var existingOverrides = this.providerOverridesByModule.get(injectableDef.providedIn);\n                if (existingOverrides !== undefined) {\n                    existingOverrides.push(providerDef);\n                }\n                else {\n                    this.providerOverridesByModule.set(injectableDef.providedIn, [providerDef]);\n                }\n            }\n        };\n        R3TestBedCompiler.prototype.overrideTemplateUsingTestingModule = function (type, template) {\n            var _this = this;\n            var def = type[core.ɵNG_COMP_DEF];\n            var hasStyleUrls = function () {\n                var metadata = _this.resolvers.component.resolve(type);\n                return !!metadata.styleUrls && metadata.styleUrls.length > 0;\n            };\n            var overrideStyleUrls = !!def && !isComponentDefPendingResolution(type) && hasStyleUrls();\n            // In Ivy, compiling a component does not require knowing the module providing the\n            // component's scope, so overrideTemplateUsingTestingModule can be implemented purely via\n            // overrideComponent. Important: overriding template requires full Component re-compilation,\n            // which may fail in case styleUrls are also present (thus Component is considered as required\n            // resolution). In order to avoid this, we preemptively set styleUrls to an empty array,\n            // preserve current styles available on Component def and restore styles back once compilation\n            // is complete.\n            var override = overrideStyleUrls ? { template: template, styles: [], styleUrls: [] } : { template: template };\n            this.overrideComponent(type, { set: override });\n            if (overrideStyleUrls && def.styles && def.styles.length > 0) {\n                this.existingComponentStyles.set(type, def.styles);\n            }\n            // Set the component's scope to be the testing module.\n            this.componentToModuleScope.set(type, TestingModuleOverride.OVERRIDE_TEMPLATE);\n        };\n        R3TestBedCompiler.prototype.compileComponents = function () {\n            return __awaiter(this, void 0, void 0, function () {\n                var needsAsyncResources, resourceLoader_1, resolver;\n                var _this = this;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            this.clearComponentResolutionQueue();\n                            needsAsyncResources = this.compileTypesSync();\n                            if (!needsAsyncResources) return [3 /*break*/, 2];\n                            resolver = function (url) {\n                                if (!resourceLoader_1) {\n                                    resourceLoader_1 = _this.injector.get(compiler.ResourceLoader);\n                                }\n                                return Promise.resolve(resourceLoader_1.get(url));\n                            };\n                            return [4 /*yield*/, resolveComponentResources(resolver)];\n                        case 1:\n                            _a.sent();\n                            _a.label = 2;\n                        case 2: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        R3TestBedCompiler.prototype.finalize = function () {\n            // One last compile\n            this.compileTypesSync();\n            // Create the testing module itself.\n            this.compileTestModule();\n            this.applyTransitiveScopes();\n            this.applyProviderOverrides();\n            // Patch previously stored `styles` Component values (taken from ɵcmp), in case these\n            // Components have `styleUrls` fields defined and template override was requested.\n            this.patchComponentsWithExistingStyles();\n            // Clear the componentToModuleScope map, so that future compilations don't reset the scope of\n            // every component.\n            this.componentToModuleScope.clear();\n            var parentInjector = this.platform.injector;\n            this.testModuleRef = new core.ɵRender3NgModuleRef(this.testModuleType, parentInjector);\n            // ApplicationInitStatus.runInitializers() is marked @internal to core.\n            // Cast it to any before accessing it.\n            this.testModuleRef.injector.get(core.ApplicationInitStatus).runInitializers();\n            // Set locale ID after running app initializers, since locale information might be updated while\n            // running initializers. This is also consistent with the execution order while bootstrapping an\n            // app (see `packages/core/src/application_ref.ts` file).\n            var localeId = this.testModuleRef.injector.get(core.LOCALE_ID, core.ɵDEFAULT_LOCALE_ID);\n            core.ɵsetLocaleId(localeId);\n            return this.testModuleRef;\n        };\n        /**\n         * @internal\n         */\n        R3TestBedCompiler.prototype._compileNgModuleSync = function (moduleType) {\n            this.queueTypesFromModulesArray([moduleType]);\n            this.compileTypesSync();\n            this.applyProviderOverrides();\n            this.applyProviderOverridesToModule(moduleType);\n            this.applyTransitiveScopes();\n        };\n        /**\n         * @internal\n         */\n        R3TestBedCompiler.prototype._compileNgModuleAsync = function (moduleType) {\n            return __awaiter(this, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            this.queueTypesFromModulesArray([moduleType]);\n                            return [4 /*yield*/, this.compileComponents()];\n                        case 1:\n                            _a.sent();\n                            this.applyProviderOverrides();\n                            this.applyProviderOverridesToModule(moduleType);\n                            this.applyTransitiveScopes();\n                            return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /**\n         * @internal\n         */\n        R3TestBedCompiler.prototype._getModuleResolver = function () {\n            return this.resolvers.module;\n        };\n        /**\n         * @internal\n         */\n        R3TestBedCompiler.prototype._getComponentFactories = function (moduleType) {\n            var _this = this;\n            return maybeUnwrapFn(moduleType.ɵmod.declarations).reduce(function (factories, declaration) {\n                var componentDef = declaration.ɵcmp;\n                componentDef && factories.push(new core.ɵRender3ComponentFactory(componentDef, _this.testModuleRef));\n                return factories;\n            }, []);\n        };\n        R3TestBedCompiler.prototype.compileTypesSync = function () {\n            var _this = this;\n            // Compile all queued components, directives, pipes.\n            var needsAsyncResources = false;\n            this.pendingComponents.forEach(function (declaration) {\n                needsAsyncResources = needsAsyncResources || isComponentDefPendingResolution(declaration);\n                var metadata = _this.resolvers.component.resolve(declaration);\n                if (metadata === null) {\n                    throw invalidTypeError(declaration.name, 'Component');\n                }\n                _this.maybeStoreNgDef(core.ɵNG_COMP_DEF, declaration);\n                core.ɵcompileComponent(declaration, metadata);\n            });\n            this.pendingComponents.clear();\n            this.pendingDirectives.forEach(function (declaration) {\n                var metadata = _this.resolvers.directive.resolve(declaration);\n                if (metadata === null) {\n                    throw invalidTypeError(declaration.name, 'Directive');\n                }\n                _this.maybeStoreNgDef(core.ɵNG_DIR_DEF, declaration);\n                core.ɵcompileDirective(declaration, metadata);\n            });\n            this.pendingDirectives.clear();\n            this.pendingPipes.forEach(function (declaration) {\n                var metadata = _this.resolvers.pipe.resolve(declaration);\n                if (metadata === null) {\n                    throw invalidTypeError(declaration.name, 'Pipe');\n                }\n                _this.maybeStoreNgDef(core.ɵNG_PIPE_DEF, declaration);\n                core.ɵcompilePipe(declaration, metadata);\n            });\n            this.pendingPipes.clear();\n            return needsAsyncResources;\n        };\n        R3TestBedCompiler.prototype.applyTransitiveScopes = function () {\n            var _this = this;\n            if (this.overriddenModules.size > 0) {\n                // Module overrides (via `TestBed.overrideModule`) might affect scopes that were previously\n                // calculated and stored in `transitiveCompileScopes`. If module overrides are present,\n                // collect all affected modules and reset scopes to force their re-calculatation.\n                var testingModuleDef = this.testModuleType[core.ɵNG_MOD_DEF];\n                var affectedModules = this.collectModulesAffectedByOverrides(testingModuleDef.imports);\n                if (affectedModules.size > 0) {\n                    affectedModules.forEach(function (moduleType) {\n                        _this.storeFieldOfDefOnType(moduleType, core.ɵNG_MOD_DEF, 'transitiveCompileScopes');\n                        moduleType[core.ɵNG_MOD_DEF].transitiveCompileScopes = null;\n                    });\n                }\n            }\n            var moduleToScope = new Map();\n            var getScopeOfModule = function (moduleType) {\n                if (!moduleToScope.has(moduleType)) {\n                    var isTestingModule = isTestingModuleOverride(moduleType);\n                    var realType = isTestingModule ? _this.testModuleType : moduleType;\n                    moduleToScope.set(moduleType, core.ɵtransitiveScopesFor(realType));\n                }\n                return moduleToScope.get(moduleType);\n            };\n            this.componentToModuleScope.forEach(function (moduleType, componentType) {\n                var moduleScope = getScopeOfModule(moduleType);\n                _this.storeFieldOfDefOnType(componentType, core.ɵNG_COMP_DEF, 'directiveDefs');\n                _this.storeFieldOfDefOnType(componentType, core.ɵNG_COMP_DEF, 'pipeDefs');\n                core.ɵpatchComponentDefWithScope(componentType.ɵcmp, moduleScope);\n            });\n            this.componentToModuleScope.clear();\n        };\n        R3TestBedCompiler.prototype.applyProviderOverrides = function () {\n            var _this = this;\n            var maybeApplyOverrides = function (field) { return function (type) {\n                var resolver = field === core.ɵNG_COMP_DEF ? _this.resolvers.component : _this.resolvers.directive;\n                var metadata = resolver.resolve(type);\n                if (_this.hasProviderOverrides(metadata.providers)) {\n                    _this.patchDefWithProviderOverrides(type, field);\n                }\n            }; };\n            this.seenComponents.forEach(maybeApplyOverrides(core.ɵNG_COMP_DEF));\n            this.seenDirectives.forEach(maybeApplyOverrides(core.ɵNG_DIR_DEF));\n            this.seenComponents.clear();\n            this.seenDirectives.clear();\n        };\n        R3TestBedCompiler.prototype.applyProviderOverridesToModule = function (moduleType) {\n            var e_1, _a, e_2, _b;\n            if (this.moduleProvidersOverridden.has(moduleType)) {\n                return;\n            }\n            this.moduleProvidersOverridden.add(moduleType);\n            var injectorDef = moduleType[core.ɵNG_INJ_DEF];\n            if (this.providerOverridesByToken.size > 0) {\n                var providers = __spread(injectorDef.providers, (this.providerOverridesByModule.get(moduleType) || []));\n                if (this.hasProviderOverrides(providers)) {\n                    this.maybeStoreNgDef(core.ɵNG_INJ_DEF, moduleType);\n                    this.storeFieldOfDefOnType(moduleType, core.ɵNG_INJ_DEF, 'providers');\n                    injectorDef.providers = this.getOverriddenProviders(providers);\n                }\n                // Apply provider overrides to imported modules recursively\n                var moduleDef = moduleType[core.ɵNG_MOD_DEF];\n                var imports = maybeUnwrapFn(moduleDef.imports);\n                try {\n                    for (var imports_1 = __values(imports), imports_1_1 = imports_1.next(); !imports_1_1.done; imports_1_1 = imports_1.next()) {\n                        var importedModule = imports_1_1.value;\n                        this.applyProviderOverridesToModule(importedModule);\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (imports_1_1 && !imports_1_1.done && (_a = imports_1.return)) _a.call(imports_1);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n                try {\n                    // Also override the providers on any ModuleWithProviders imports since those don't appear in\n                    // the moduleDef.\n                    for (var _c = __values(flatten(injectorDef.imports)), _d = _c.next(); !_d.done; _d = _c.next()) {\n                        var importedModule = _d.value;\n                        if (isModuleWithProviders(importedModule)) {\n                            this.defCleanupOps.push({\n                                object: importedModule,\n                                fieldName: 'providers',\n                                originalValue: importedModule.providers\n                            });\n                            importedModule.providers = this.getOverriddenProviders(importedModule.providers);\n                        }\n                    }\n                }\n                catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                finally {\n                    try {\n                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);\n                    }\n                    finally { if (e_2) throw e_2.error; }\n                }\n            }\n        };\n        R3TestBedCompiler.prototype.patchComponentsWithExistingStyles = function () {\n            this.existingComponentStyles.forEach(function (styles, type) { return type[core.ɵNG_COMP_DEF].styles = styles; });\n            this.existingComponentStyles.clear();\n        };\n        R3TestBedCompiler.prototype.queueTypeArray = function (arr, moduleType) {\n            var e_3, _a;\n            try {\n                for (var arr_1 = __values(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) {\n                    var value = arr_1_1.value;\n                    if (Array.isArray(value)) {\n                        this.queueTypeArray(value, moduleType);\n                    }\n                    else {\n                        this.queueType(value, moduleType);\n                    }\n                }\n            }\n            catch (e_3_1) { e_3 = { error: e_3_1 }; }\n            finally {\n                try {\n                    if (arr_1_1 && !arr_1_1.done && (_a = arr_1.return)) _a.call(arr_1);\n                }\n                finally { if (e_3) throw e_3.error; }\n            }\n        };\n        R3TestBedCompiler.prototype.recompileNgModule = function (ngModule, metadata) {\n            // Cache the initial ngModuleDef as it will be overwritten.\n            this.maybeStoreNgDef(core.ɵNG_MOD_DEF, ngModule);\n            this.maybeStoreNgDef(core.ɵNG_INJ_DEF, ngModule);\n            core.ɵcompileNgModuleDefs(ngModule, metadata);\n        };\n        R3TestBedCompiler.prototype.queueType = function (type, moduleType) {\n            var component = this.resolvers.component.resolve(type);\n            if (component) {\n                // Check whether a give Type has respective NG def (ɵcmp) and compile if def is\n                // missing. That might happen in case a class without any Angular decorators extends another\n                // class where Component/Directive/Pipe decorator is defined.\n                if (isComponentDefPendingResolution(type) || !type.hasOwnProperty(core.ɵNG_COMP_DEF)) {\n                    this.pendingComponents.add(type);\n                }\n                this.seenComponents.add(type);\n                // Keep track of the module which declares this component, so later the component's scope\n                // can be set correctly. If the component has already been recorded here, then one of several\n                // cases is true:\n                // * the module containing the component was imported multiple times (common).\n                // * the component is declared in multiple modules (which is an error).\n                // * the component was in 'declarations' of the testing module, and also in an imported module\n                //   in which case the module scope will be TestingModuleOverride.DECLARATION.\n                // * overrideTemplateUsingTestingModule was called for the component in which case the module\n                //   scope will be TestingModuleOverride.OVERRIDE_TEMPLATE.\n                //\n                // If the component was previously in the testing module's 'declarations' (meaning the\n                // current value is TestingModuleOverride.DECLARATION), then `moduleType` is the component's\n                // real module, which was imported. This pattern is understood to mean that the component\n                // should use its original scope, but that the testing module should also contain the\n                // component in its scope.\n                if (!this.componentToModuleScope.has(type) ||\n                    this.componentToModuleScope.get(type) === TestingModuleOverride.DECLARATION) {\n                    this.componentToModuleScope.set(type, moduleType);\n                }\n                return;\n            }\n            var directive = this.resolvers.directive.resolve(type);\n            if (directive) {\n                if (!type.hasOwnProperty(core.ɵNG_DIR_DEF)) {\n                    this.pendingDirectives.add(type);\n                }\n                this.seenDirectives.add(type);\n                return;\n            }\n            var pipe = this.resolvers.pipe.resolve(type);\n            if (pipe && !type.hasOwnProperty(core.ɵNG_PIPE_DEF)) {\n                this.pendingPipes.add(type);\n                return;\n            }\n        };\n        R3TestBedCompiler.prototype.queueTypesFromModulesArray = function (arr) {\n            var _this = this;\n            // Because we may encounter the same NgModule while processing the imports and exports of an\n            // NgModule tree, we cache them in this set so we can skip ones that have already been seen\n            // encountered. In some test setups, this caching resulted in 10X runtime improvement.\n            var processedNgModuleDefs = new Set();\n            var queueTypesFromModulesArrayRecur = function (arr) {\n                var e_4, _a;\n                try {\n                    for (var arr_2 = __values(arr), arr_2_1 = arr_2.next(); !arr_2_1.done; arr_2_1 = arr_2.next()) {\n                        var value = arr_2_1.value;\n                        if (Array.isArray(value)) {\n                            queueTypesFromModulesArrayRecur(value);\n                        }\n                        else if (hasNgModuleDef(value)) {\n                            var def = value.ɵmod;\n                            if (processedNgModuleDefs.has(def)) {\n                                continue;\n                            }\n                            processedNgModuleDefs.add(def);\n                            // Look through declarations, imports, and exports, and queue\n                            // everything found there.\n                            _this.queueTypeArray(maybeUnwrapFn(def.declarations), value);\n                            queueTypesFromModulesArrayRecur(maybeUnwrapFn(def.imports));\n                            queueTypesFromModulesArrayRecur(maybeUnwrapFn(def.exports));\n                        }\n                    }\n                }\n                catch (e_4_1) { e_4 = { error: e_4_1 }; }\n                finally {\n                    try {\n                        if (arr_2_1 && !arr_2_1.done && (_a = arr_2.return)) _a.call(arr_2);\n                    }\n                    finally { if (e_4) throw e_4.error; }\n                }\n            };\n            queueTypesFromModulesArrayRecur(arr);\n        };\n        // When module overrides (via `TestBed.overrideModule`) are present, it might affect all modules\n        // that import (even transitively) an overridden one. For all affected modules we need to\n        // recalculate their scopes for a given test run and restore original scopes at the end. The goal\n        // of this function is to collect all affected modules in a set for further processing. Example:\n        // if we have the following module hierarchy: A -> B -> C (where `->` means `imports`) and module\n        // `C` is overridden, we consider `A` and `B` as affected, since their scopes might become\n        // invalidated with the override.\n        R3TestBedCompiler.prototype.collectModulesAffectedByOverrides = function (arr) {\n            var _this = this;\n            var seenModules = new Set();\n            var affectedModules = new Set();\n            var calcAffectedModulesRecur = function (arr, path) {\n                var e_5, _a;\n                try {\n                    for (var arr_3 = __values(arr), arr_3_1 = arr_3.next(); !arr_3_1.done; arr_3_1 = arr_3.next()) {\n                        var value = arr_3_1.value;\n                        if (Array.isArray(value)) {\n                            // If the value is an array, just flatten it (by invoking this function recursively),\n                            // keeping \"path\" the same.\n                            calcAffectedModulesRecur(value, path);\n                        }\n                        else if (hasNgModuleDef(value)) {\n                            if (seenModules.has(value)) {\n                                // If we've seen this module before and it's included into \"affected modules\" list, mark\n                                // the whole path that leads to that module as affected, but do not descend into its\n                                // imports, since we already examined them before.\n                                if (affectedModules.has(value)) {\n                                    path.forEach(function (item) { return affectedModules.add(item); });\n                                }\n                                continue;\n                            }\n                            seenModules.add(value);\n                            if (_this.overriddenModules.has(value)) {\n                                path.forEach(function (item) { return affectedModules.add(item); });\n                            }\n                            // Examine module imports recursively to look for overridden modules.\n                            var moduleDef = value[core.ɵNG_MOD_DEF];\n                            calcAffectedModulesRecur(maybeUnwrapFn(moduleDef.imports), path.concat(value));\n                        }\n                    }\n                }\n                catch (e_5_1) { e_5 = { error: e_5_1 }; }\n                finally {\n                    try {\n                        if (arr_3_1 && !arr_3_1.done && (_a = arr_3.return)) _a.call(arr_3);\n                    }\n                    finally { if (e_5) throw e_5.error; }\n                }\n            };\n            calcAffectedModulesRecur(arr, []);\n            return affectedModules;\n        };\n        R3TestBedCompiler.prototype.maybeStoreNgDef = function (prop, type) {\n            if (!this.initialNgDefs.has(type)) {\n                var currentDef = Object.getOwnPropertyDescriptor(type, prop);\n                this.initialNgDefs.set(type, [prop, currentDef]);\n            }\n        };\n        R3TestBedCompiler.prototype.storeFieldOfDefOnType = function (type, defField, fieldName) {\n            var def = type[defField];\n            var originalValue = def[fieldName];\n            this.defCleanupOps.push({ object: def, fieldName: fieldName, originalValue: originalValue });\n        };\n        /**\n         * Clears current components resolution queue, but stores the state of the queue, so we can\n         * restore it later. Clearing the queue is required before we try to compile components (via\n         * `TestBed.compileComponents`), so that component defs are in sync with the resolution queue.\n         */\n        R3TestBedCompiler.prototype.clearComponentResolutionQueue = function () {\n            var _this = this;\n            if (this.originalComponentResolutionQueue === null) {\n                this.originalComponentResolutionQueue = new Map();\n            }\n            clearResolutionOfComponentResourcesQueue().forEach(function (value, key) { return _this.originalComponentResolutionQueue.set(key, value); });\n        };\n        /*\n         * Restores component resolution queue to the previously saved state. This operation is performed\n         * as a part of restoring the state after completion of the current set of tests (that might\n         * potentially mutate the state).\n         */\n        R3TestBedCompiler.prototype.restoreComponentResolutionQueue = function () {\n            if (this.originalComponentResolutionQueue !== null) {\n                restoreComponentResolutionQueue(this.originalComponentResolutionQueue);\n                this.originalComponentResolutionQueue = null;\n            }\n        };\n        R3TestBedCompiler.prototype.restoreOriginalState = function () {\n            // Process cleanup ops in reverse order so the field's original value is restored correctly (in\n            // case there were multiple overrides for the same field).\n            forEachRight(this.defCleanupOps, function (op) {\n                op.object[op.fieldName] = op.originalValue;\n            });\n            // Restore initial component/directive/pipe defs\n            this.initialNgDefs.forEach(function (value, type) {\n                var _a = __read(value, 2), prop = _a[0], descriptor = _a[1];\n                if (!descriptor) {\n                    // Delete operations are generally undesirable since they have performance implications\n                    // on objects they were applied to. In this particular case, situations where this code\n                    // is invoked should be quite rare to cause any noticeable impact, since it's applied\n                    // only to some test cases (for example when class with no annotations extends some\n                    // @Component) when we need to clear 'ɵcmp' field on a given class to restore\n                    // its original state (before applying overrides and running tests).\n                    delete type[prop];\n                }\n                else {\n                    Object.defineProperty(type, prop, descriptor);\n                }\n            });\n            this.initialNgDefs.clear();\n            this.moduleProvidersOverridden.clear();\n            this.restoreComponentResolutionQueue();\n            // Restore the locale ID to the default value, this shouldn't be necessary but we never know\n            core.ɵsetLocaleId(core.ɵDEFAULT_LOCALE_ID);\n        };\n        R3TestBedCompiler.prototype.compileTestModule = function () {\n            var _this = this;\n            var RootScopeModule = /** @class */ (function () {\n                function RootScopeModule() {\n                }\n                return RootScopeModule;\n            }());\n            core.ɵcompileNgModuleDefs(RootScopeModule, {\n                providers: __spread(this.rootProviderOverrides),\n            });\n            var ngZone = new core.NgZone({ enableLongStackTrace: true });\n            var providers = __spread([\n                { provide: core.NgZone, useValue: ngZone },\n                { provide: core.Compiler, useFactory: function () { return new R3TestCompiler(_this); } }\n            ], this.providers, this.providerOverrides);\n            var imports = [RootScopeModule, this.additionalModuleTypes, this.imports || []];\n            // clang-format off\n            core.ɵcompileNgModuleDefs(this.testModuleType, {\n                declarations: this.declarations,\n                imports: imports,\n                schemas: this.schemas,\n                providers: providers,\n            }, /* allowDuplicateDeclarationsInRoot */ true);\n            // clang-format on\n            this.applyProviderOverridesToModule(this.testModuleType);\n        };\n        Object.defineProperty(R3TestBedCompiler.prototype, \"injector\", {\n            get: function () {\n                if (this._injector !== null) {\n                    return this._injector;\n                }\n                var providers = [];\n                var compilerOptions = this.platform.injector.get(core.COMPILER_OPTIONS);\n                compilerOptions.forEach(function (opts) {\n                    if (opts.providers) {\n                        providers.push(opts.providers);\n                    }\n                });\n                if (this.compilerProviders !== null) {\n                    providers.push.apply(providers, __spread(this.compilerProviders));\n                }\n                // TODO(ocombe): make this work with an Injector directly instead of creating a module for it\n                var CompilerModule = /** @class */ (function () {\n                    function CompilerModule() {\n                    }\n                    return CompilerModule;\n                }());\n                core.ɵcompileNgModuleDefs(CompilerModule, { providers: providers });\n                var CompilerModuleFactory = new core.ɵNgModuleFactory(CompilerModule);\n                this._injector = CompilerModuleFactory.create(this.platform.injector).injector;\n                return this._injector;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        // get overrides for a specific provider (if any)\n        R3TestBedCompiler.prototype.getSingleProviderOverrides = function (provider) {\n            var token = getProviderToken(provider);\n            return this.providerOverridesByToken.get(token) || null;\n        };\n        R3TestBedCompiler.prototype.getProviderOverrides = function (providers) {\n            var _this = this;\n            if (!providers || !providers.length || this.providerOverridesByToken.size === 0)\n                return [];\n            // There are two flattening operations here. The inner flatten() operates on the metadata's\n            // providers and applies a mapping function which retrieves overrides for each incoming\n            // provider. The outer flatten() then flattens the produced overrides array. If this is not\n            // done, the array can contain other empty arrays (e.g. `[[], []]`) which leak into the\n            // providers array and contaminate any error messages that might be generated.\n            return flatten(flatten(providers, function (provider) { return _this.getSingleProviderOverrides(provider) || []; }));\n        };\n        R3TestBedCompiler.prototype.getOverriddenProviders = function (providers) {\n            var _this = this;\n            if (!providers || !providers.length || this.providerOverridesByToken.size === 0)\n                return [];\n            var flattenedProviders = flatten(providers);\n            var overrides = this.getProviderOverrides(flattenedProviders);\n            var overriddenProviders = __spread(flattenedProviders, overrides);\n            var final = [];\n            var seenOverriddenProviders = new Set();\n            // We iterate through the list of providers in reverse order to make sure provider overrides\n            // take precedence over the values defined in provider list. We also filter out all providers\n            // that have overrides, keeping overridden values only. This is needed, since presence of a\n            // provider with `ngOnDestroy` hook will cause this hook to be registered and invoked later.\n            forEachRight(overriddenProviders, function (provider) {\n                var token = getProviderToken(provider);\n                if (_this.providerOverridesByToken.has(token)) {\n                    if (!seenOverriddenProviders.has(token)) {\n                        seenOverriddenProviders.add(token);\n                        // Treat all overridden providers as `{multi: false}` (even if it's a multi-provider) to\n                        // make sure that provided override takes highest precedence and is not combined with\n                        // other instances of the same multi provider.\n                        final.unshift(__assign(__assign({}, provider), { multi: false }));\n                    }\n                }\n                else {\n                    final.unshift(provider);\n                }\n            });\n            return final;\n        };\n        R3TestBedCompiler.prototype.hasProviderOverrides = function (providers) {\n            return this.getProviderOverrides(providers).length > 0;\n        };\n        R3TestBedCompiler.prototype.patchDefWithProviderOverrides = function (declaration, field) {\n            var _this = this;\n            var def = declaration[field];\n            if (def && def.providersResolver) {\n                this.maybeStoreNgDef(field, declaration);\n                var resolver_1 = def.providersResolver;\n                var processProvidersFn_1 = function (providers) { return _this.getOverriddenProviders(providers); };\n                this.storeFieldOfDefOnType(declaration, field, 'providersResolver');\n                def.providersResolver = function (ngDef) { return resolver_1(ngDef, processProvidersFn_1); };\n            }\n        };\n        return R3TestBedCompiler;\n    }());\n    function initResolvers() {\n        return {\n            module: new NgModuleResolver(),\n            component: new ComponentResolver(),\n            directive: new DirectiveResolver(),\n            pipe: new PipeResolver()\n        };\n    }\n    function hasNgModuleDef(value) {\n        return value.hasOwnProperty('ɵmod');\n    }\n    function maybeUnwrapFn(maybeFn) {\n        return maybeFn instanceof Function ? maybeFn() : maybeFn;\n    }\n    function flatten(values, mapFn) {\n        var out = [];\n        values.forEach(function (value) {\n            if (Array.isArray(value)) {\n                out.push.apply(out, __spread(flatten(value, mapFn)));\n            }\n            else {\n                out.push(mapFn ? mapFn(value) : value);\n            }\n        });\n        return out;\n    }\n    function getProviderField(provider, field) {\n        return provider && typeof provider === 'object' && provider[field];\n    }\n    function getProviderToken(provider) {\n        return getProviderField(provider, 'provide') || provider;\n    }\n    function isModuleWithProviders(value) {\n        return value.hasOwnProperty('ngModule');\n    }\n    function forEachRight(values, fn) {\n        for (var idx = values.length - 1; idx >= 0; idx--) {\n            fn(values[idx], idx);\n        }\n    }\n    function invalidTypeError(name, expectedType) {\n        return new Error(name + \" class doesn't have @\" + expectedType + \" decorator or is missing metadata.\");\n    }\n    var R3TestCompiler = /** @class */ (function () {\n        function R3TestCompiler(testBed) {\n            this.testBed = testBed;\n        }\n        R3TestCompiler.prototype.compileModuleSync = function (moduleType) {\n            this.testBed._compileNgModuleSync(moduleType);\n            return new core.ɵNgModuleFactory(moduleType);\n        };\n        R3TestCompiler.prototype.compileModuleAsync = function (moduleType) {\n            return __awaiter(this, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.testBed._compileNgModuleAsync(moduleType)];\n                        case 1:\n                            _a.sent();\n                            return [2 /*return*/, new core.ɵNgModuleFactory(moduleType)];\n                    }\n                });\n            });\n        };\n        R3TestCompiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {\n            var ngModuleFactory = this.compileModuleSync(moduleType);\n            var componentFactories = this.testBed._getComponentFactories(moduleType);\n            return new core.ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n        };\n        R3TestCompiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {\n            return __awaiter(this, void 0, void 0, function () {\n                var ngModuleFactory, componentFactories;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.compileModuleAsync(moduleType)];\n                        case 1:\n                            ngModuleFactory = _a.sent();\n                            componentFactories = this.testBed._getComponentFactories(moduleType);\n                            return [2 /*return*/, new core.ModuleWithComponentFactories(ngModuleFactory, componentFactories)];\n                    }\n                });\n            });\n        };\n        R3TestCompiler.prototype.clearCache = function () { };\n        R3TestCompiler.prototype.clearCacheFor = function (type) { };\n        R3TestCompiler.prototype.getModuleId = function (moduleType) {\n            var meta = this.testBed._getModuleResolver().resolve(moduleType);\n            return meta && meta.id || undefined;\n        };\n        return R3TestCompiler;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * An abstract class for inserting the root test component element in a platform independent way.\n     *\n     * @publicApi\n     */\n    var TestComponentRenderer = /** @class */ (function () {\n        function TestComponentRenderer() {\n        }\n        TestComponentRenderer.prototype.insertRootElement = function (rootElementId) { };\n        return TestComponentRenderer;\n    }());\n    /**\n     * @publicApi\n     */\n    var ComponentFixtureAutoDetect = new core.InjectionToken('ComponentFixtureAutoDetect');\n    /**\n     * @publicApi\n     */\n    var ComponentFixtureNoNgZone = new core.InjectionToken('ComponentFixtureNoNgZone');\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _nextRootElementId = 0;\n    /**\n     * @description\n     * Configures and initializes environment for unit testing and provides methods for\n     * creating components and services in unit tests.\n     *\n     * TestBed is the primary api for writing unit tests for Angular applications and libraries.\n     *\n     * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n     * according to the compiler used.\n     */\n    var TestBedRender3 = /** @class */ (function () {\n        function TestBedRender3() {\n            // Properties\n            this.platform = null;\n            this.ngModule = null;\n            this._compiler = null;\n            this._testModuleRef = null;\n            this._activeFixtures = [];\n            this._globalCompilationChecked = false;\n        }\n        /**\n         * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n         * angular module. These are common to every test in the suite.\n         *\n         * This may only be called once, to set up the common providers for the current test\n         * suite on the current platform. If you absolutely need to change the providers,\n         * first use `resetTestEnvironment`.\n         *\n         * Test modules and platforms for individual platforms are available from\n         * '@angular/<platform_name>/testing'.\n         *\n         * @publicApi\n         */\n        TestBedRender3.initTestEnvironment = function (ngModule, platform, aotSummaries) {\n            var testBed = _getTestBedRender3();\n            testBed.initTestEnvironment(ngModule, platform, aotSummaries);\n            return testBed;\n        };\n        /**\n         * Reset the providers for the test injector.\n         *\n         * @publicApi\n         */\n        TestBedRender3.resetTestEnvironment = function () {\n            _getTestBedRender3().resetTestEnvironment();\n        };\n        TestBedRender3.configureCompiler = function (config) {\n            _getTestBedRender3().configureCompiler(config);\n            return TestBedRender3;\n        };\n        /**\n         * Allows overriding default providers, directives, pipes, modules of the test injector,\n         * which are defined in test_injector.js\n         */\n        TestBedRender3.configureTestingModule = function (moduleDef) {\n            _getTestBedRender3().configureTestingModule(moduleDef);\n            return TestBedRender3;\n        };\n        /**\n         * Compile components with a `templateUrl` for the test's NgModule.\n         * It is necessary to call this function\n         * as fetching urls is asynchronous.\n         */\n        TestBedRender3.compileComponents = function () {\n            return _getTestBedRender3().compileComponents();\n        };\n        TestBedRender3.overrideModule = function (ngModule, override) {\n            _getTestBedRender3().overrideModule(ngModule, override);\n            return TestBedRender3;\n        };\n        TestBedRender3.overrideComponent = function (component, override) {\n            _getTestBedRender3().overrideComponent(component, override);\n            return TestBedRender3;\n        };\n        TestBedRender3.overrideDirective = function (directive, override) {\n            _getTestBedRender3().overrideDirective(directive, override);\n            return TestBedRender3;\n        };\n        TestBedRender3.overridePipe = function (pipe, override) {\n            _getTestBedRender3().overridePipe(pipe, override);\n            return TestBedRender3;\n        };\n        TestBedRender3.overrideTemplate = function (component, template) {\n            _getTestBedRender3().overrideComponent(component, { set: { template: template, templateUrl: null } });\n            return TestBedRender3;\n        };\n        /**\n         * Overrides the template of the given component, compiling the template\n         * in the context of the TestingModule.\n         *\n         * Note: This works for JIT and AOTed components as well.\n         */\n        TestBedRender3.overrideTemplateUsingTestingModule = function (component, template) {\n            _getTestBedRender3().overrideTemplateUsingTestingModule(component, template);\n            return TestBedRender3;\n        };\n        TestBedRender3.overrideProvider = function (token, provider) {\n            _getTestBedRender3().overrideProvider(token, provider);\n            return TestBedRender3;\n        };\n        TestBedRender3.inject = function (token, notFoundValue, flags) {\n            return _getTestBedRender3().inject(token, notFoundValue, flags);\n        };\n        /** @deprecated from v9.0.0 use TestBed.inject */\n        TestBedRender3.get = function (token, notFoundValue, flags) {\n            if (notFoundValue === void 0) { notFoundValue = core.Injector.THROW_IF_NOT_FOUND; }\n            if (flags === void 0) { flags = core.InjectFlags.Default; }\n            return _getTestBedRender3().inject(token, notFoundValue, flags);\n        };\n        TestBedRender3.createComponent = function (component) {\n            return _getTestBedRender3().createComponent(component);\n        };\n        TestBedRender3.resetTestingModule = function () {\n            _getTestBedRender3().resetTestingModule();\n            return TestBedRender3;\n        };\n        /**\n         * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n         * angular module. These are common to every test in the suite.\n         *\n         * This may only be called once, to set up the common providers for the current test\n         * suite on the current platform. If you absolutely need to change the providers,\n         * first use `resetTestEnvironment`.\n         *\n         * Test modules and platforms for individual platforms are available from\n         * '@angular/<platform_name>/testing'.\n         *\n         * @publicApi\n         */\n        TestBedRender3.prototype.initTestEnvironment = function (ngModule, platform, aotSummaries) {\n            if (this.platform || this.ngModule) {\n                throw new Error('Cannot set base providers because it has already been called');\n            }\n            this.platform = platform;\n            this.ngModule = ngModule;\n            this._compiler = new R3TestBedCompiler(this.platform, this.ngModule);\n        };\n        /**\n         * Reset the providers for the test injector.\n         *\n         * @publicApi\n         */\n        TestBedRender3.prototype.resetTestEnvironment = function () {\n            this.resetTestingModule();\n            this._compiler = null;\n            this.platform = null;\n            this.ngModule = null;\n        };\n        TestBedRender3.prototype.resetTestingModule = function () {\n            this.checkGlobalCompilationFinished();\n            core.ɵresetCompiledComponents();\n            if (this._compiler !== null) {\n                this.compiler.restoreOriginalState();\n            }\n            this._compiler = new R3TestBedCompiler(this.platform, this.ngModule);\n            this._testModuleRef = null;\n            this.destroyActiveFixtures();\n        };\n        TestBedRender3.prototype.configureCompiler = function (config) {\n            if (config.useJit != null) {\n                throw new Error('the Render3 compiler JiT mode is not configurable !');\n            }\n            if (config.providers !== undefined) {\n                this.compiler.setCompilerProviders(config.providers);\n            }\n        };\n        TestBedRender3.prototype.configureTestingModule = function (moduleDef) {\n            this.assertNotInstantiated('R3TestBed.configureTestingModule', 'configure the test module');\n            this.compiler.configureTestingModule(moduleDef);\n        };\n        TestBedRender3.prototype.compileComponents = function () {\n            return this.compiler.compileComponents();\n        };\n        TestBedRender3.prototype.inject = function (token, notFoundValue, flags) {\n            if (token === TestBedRender3) {\n                return this;\n            }\n            var UNDEFINED = {};\n            var result = this.testModuleRef.injector.get(token, UNDEFINED, flags);\n            return result === UNDEFINED ? this.compiler.injector.get(token, notFoundValue, flags) :\n                result;\n        };\n        /** @deprecated from v9.0.0 use TestBed.inject */\n        TestBedRender3.prototype.get = function (token, notFoundValue, flags) {\n            if (notFoundValue === void 0) { notFoundValue = core.Injector.THROW_IF_NOT_FOUND; }\n            if (flags === void 0) { flags = core.InjectFlags.Default; }\n            return this.inject(token, notFoundValue, flags);\n        };\n        TestBedRender3.prototype.execute = function (tokens, fn, context) {\n            var _this = this;\n            var params = tokens.map(function (t) { return _this.inject(t); });\n            return fn.apply(context, params);\n        };\n        TestBedRender3.prototype.overrideModule = function (ngModule, override) {\n            this.assertNotInstantiated('overrideModule', 'override module metadata');\n            this.compiler.overrideModule(ngModule, override);\n        };\n        TestBedRender3.prototype.overrideComponent = function (component, override) {\n            this.assertNotInstantiated('overrideComponent', 'override component metadata');\n            this.compiler.overrideComponent(component, override);\n        };\n        TestBedRender3.prototype.overrideTemplateUsingTestingModule = function (component, template) {\n            this.assertNotInstantiated('R3TestBed.overrideTemplateUsingTestingModule', 'Cannot override template when the test module has already been instantiated');\n            this.compiler.overrideTemplateUsingTestingModule(component, template);\n        };\n        TestBedRender3.prototype.overrideDirective = function (directive, override) {\n            this.assertNotInstantiated('overrideDirective', 'override directive metadata');\n            this.compiler.overrideDirective(directive, override);\n        };\n        TestBedRender3.prototype.overridePipe = function (pipe, override) {\n            this.assertNotInstantiated('overridePipe', 'override pipe metadata');\n            this.compiler.overridePipe(pipe, override);\n        };\n        /**\n         * Overwrites all providers for the given token with the given provider definition.\n         */\n        TestBedRender3.prototype.overrideProvider = function (token, provider) {\n            this.compiler.overrideProvider(token, provider);\n        };\n        TestBedRender3.prototype.createComponent = function (type) {\n            var _this = this;\n            var testComponentRenderer = this.inject(TestComponentRenderer);\n            var rootElId = \"root-ng-internal-isolated-\" + _nextRootElementId++;\n            testComponentRenderer.insertRootElement(rootElId);\n            var componentDef = type.ɵcmp;\n            if (!componentDef) {\n                throw new Error(\"It looks like '\" + core.ɵstringify(type) + \"' has not been IVY compiled - it has no '\\u0275cmp' field\");\n            }\n            // TODO: Don't cast as `InjectionToken<boolean>`, proper type is boolean[]\n            var noNgZone = this.inject(ComponentFixtureNoNgZone, false);\n            // TODO: Don't cast as `InjectionToken<boolean>`, proper type is boolean[]\n            var autoDetect = this.inject(ComponentFixtureAutoDetect, false);\n            var ngZone = noNgZone ? null : this.inject(core.NgZone, null);\n            var componentFactory = new core.ɵRender3ComponentFactory(componentDef);\n            var initComponent = function () {\n                var componentRef = componentFactory.create(core.Injector.NULL, [], \"#\" + rootElId, _this.testModuleRef);\n                return new ComponentFixture(componentRef, ngZone, autoDetect);\n            };\n            var fixture = ngZone ? ngZone.run(initComponent) : initComponent();\n            this._activeFixtures.push(fixture);\n            return fixture;\n        };\n        Object.defineProperty(TestBedRender3.prototype, \"compiler\", {\n            /**\n             * @internal strip this from published d.ts files due to\n             * https://github.com/microsoft/TypeScript/issues/36216\n             */\n            get: function () {\n                if (this._compiler === null) {\n                    throw new Error(\"Need to call TestBed.initTestEnvironment() first\");\n                }\n                return this._compiler;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TestBedRender3.prototype, \"testModuleRef\", {\n            /**\n             * @internal strip this from published d.ts files due to\n             * https://github.com/microsoft/TypeScript/issues/36216\n             */\n            get: function () {\n                if (this._testModuleRef === null) {\n                    this._testModuleRef = this.compiler.finalize();\n                }\n                return this._testModuleRef;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        TestBedRender3.prototype.assertNotInstantiated = function (methodName, methodDescription) {\n            if (this._testModuleRef !== null) {\n                throw new Error(\"Cannot \" + methodDescription + \" when the test module has already been instantiated. \" +\n                    (\"Make sure you are not using `inject` before `\" + methodName + \"`.\"));\n            }\n        };\n        /**\n         * Check whether the module scoping queue should be flushed, and flush it if needed.\n         *\n         * When the TestBed is reset, it clears the JIT module compilation queue, cancelling any\n         * in-progress module compilation. This creates a potential hazard - the very first time the\n         * TestBed is initialized (or if it's reset without being initialized), there may be pending\n         * compilations of modules declared in global scope. These compilations should be finished.\n         *\n         * To ensure that globally declared modules have their components scoped properly, this function\n         * is called whenever TestBed is initialized or reset. The _first_ time that this happens, prior\n         * to any other operations, the scoping queue is flushed.\n         */\n        TestBedRender3.prototype.checkGlobalCompilationFinished = function () {\n            // Checking _testNgModuleRef is null should not be necessary, but is left in as an additional\n            // guard that compilations queued in tests (after instantiation) are never flushed accidentally.\n            if (!this._globalCompilationChecked && this._testModuleRef === null) {\n                core.ɵflushModuleScopingQueueAsMuchAsPossible();\n            }\n            this._globalCompilationChecked = true;\n        };\n        TestBedRender3.prototype.destroyActiveFixtures = function () {\n            this._activeFixtures.forEach(function (fixture) {\n                try {\n                    fixture.destroy();\n                }\n                catch (e) {\n                    console.error('Error during cleanup of component', {\n                        component: fixture.componentInstance,\n                        stacktrace: e,\n                    });\n                }\n            });\n            this._activeFixtures = [];\n        };\n        return TestBedRender3;\n    }());\n    var testBed;\n    function _getTestBedRender3() {\n        return testBed = testBed || new TestBedRender3();\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function unimplemented() {\n        throw Error('unimplemented');\n    }\n    /**\n     * Special interface to the compiler only used by testing\n     *\n     * @publicApi\n     */\n    var TestingCompiler = /** @class */ (function (_super) {\n        __extends(TestingCompiler, _super);\n        function TestingCompiler() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(TestingCompiler.prototype, \"injector\", {\n            get: function () {\n                throw unimplemented();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        TestingCompiler.prototype.overrideModule = function (module, overrides) {\n            throw unimplemented();\n        };\n        TestingCompiler.prototype.overrideDirective = function (directive, overrides) {\n            throw unimplemented();\n        };\n        TestingCompiler.prototype.overrideComponent = function (component, overrides) {\n            throw unimplemented();\n        };\n        TestingCompiler.prototype.overridePipe = function (directive, overrides) {\n            throw unimplemented();\n        };\n        /**\n         * Allows to pass the compile summary from AOT compilation to the JIT compiler,\n         * so that it can use the code generated by AOT.\n         */\n        TestingCompiler.prototype.loadAotSummaries = function (summaries) {\n            throw unimplemented();\n        };\n        /**\n         * Gets the component factory for the given component.\n         * This assumes that the component has been compiled before calling this call using\n         * `compileModuleAndAllComponents*`.\n         */\n        TestingCompiler.prototype.getComponentFactory = function (component) {\n            throw unimplemented();\n        };\n        /**\n         * Returns the component type that is stored in the given error.\n         * This can be used for errors created by compileModule...\n         */\n        TestingCompiler.prototype.getComponentFromError = function (error) {\n            throw unimplemented();\n        };\n        TestingCompiler = __decorate([\n            core.Injectable()\n        ], TestingCompiler);\n        return TestingCompiler;\n    }(core.Compiler));\n    /**\n     * A factory for creating a Compiler\n     *\n     * @publicApi\n     */\n    var TestingCompilerFactory = /** @class */ (function () {\n        function TestingCompilerFactory() {\n        }\n        return TestingCompilerFactory;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _nextRootElementId$1 = 0;\n    /**\n     * @description\n     * Configures and initializes environment for unit testing and provides methods for\n     * creating components and services in unit tests.\n     *\n     * `TestBed` is the primary api for writing unit tests for Angular applications and libraries.\n     *\n     * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n     * according to the compiler used.\n     */\n    var TestBedViewEngine = /** @class */ (function () {\n        function TestBedViewEngine() {\n            this._instantiated = false;\n            this._compiler = null;\n            this._moduleRef = null;\n            this._moduleFactory = null;\n            this._compilerOptions = [];\n            this._moduleOverrides = [];\n            this._componentOverrides = [];\n            this._directiveOverrides = [];\n            this._pipeOverrides = [];\n            this._providers = [];\n            this._declarations = [];\n            this._imports = [];\n            this._schemas = [];\n            this._activeFixtures = [];\n            this._testEnvAotSummaries = function () { return []; };\n            this._aotSummaries = [];\n            this._templateOverrides = [];\n            this._isRoot = true;\n            this._rootProviderOverrides = [];\n            this.platform = null;\n            this.ngModule = null;\n        }\n        /**\n         * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n         * angular module. These are common to every test in the suite.\n         *\n         * This may only be called once, to set up the common providers for the current test\n         * suite on the current platform. If you absolutely need to change the providers,\n         * first use `resetTestEnvironment`.\n         *\n         * Test modules and platforms for individual platforms are available from\n         * '@angular/<platform_name>/testing'.\n         */\n        TestBedViewEngine.initTestEnvironment = function (ngModule, platform, aotSummaries) {\n            var testBed = _getTestBedViewEngine();\n            testBed.initTestEnvironment(ngModule, platform, aotSummaries);\n            return testBed;\n        };\n        /**\n         * Reset the providers for the test injector.\n         */\n        TestBedViewEngine.resetTestEnvironment = function () {\n            _getTestBedViewEngine().resetTestEnvironment();\n        };\n        TestBedViewEngine.resetTestingModule = function () {\n            _getTestBedViewEngine().resetTestingModule();\n            return TestBedViewEngine;\n        };\n        /**\n         * Allows overriding default compiler providers and settings\n         * which are defined in test_injector.js\n         */\n        TestBedViewEngine.configureCompiler = function (config) {\n            _getTestBedViewEngine().configureCompiler(config);\n            return TestBedViewEngine;\n        };\n        /**\n         * Allows overriding default providers, directives, pipes, modules of the test injector,\n         * which are defined in test_injector.js\n         */\n        TestBedViewEngine.configureTestingModule = function (moduleDef) {\n            _getTestBedViewEngine().configureTestingModule(moduleDef);\n            return TestBedViewEngine;\n        };\n        /**\n         * Compile components with a `templateUrl` for the test's NgModule.\n         * It is necessary to call this function\n         * as fetching urls is asynchronous.\n         */\n        TestBedViewEngine.compileComponents = function () {\n            return getTestBed().compileComponents();\n        };\n        TestBedViewEngine.overrideModule = function (ngModule, override) {\n            _getTestBedViewEngine().overrideModule(ngModule, override);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.overrideComponent = function (component, override) {\n            _getTestBedViewEngine().overrideComponent(component, override);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.overrideDirective = function (directive, override) {\n            _getTestBedViewEngine().overrideDirective(directive, override);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.overridePipe = function (pipe, override) {\n            _getTestBedViewEngine().overridePipe(pipe, override);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.overrideTemplate = function (component, template) {\n            _getTestBedViewEngine().overrideComponent(component, { set: { template: template, templateUrl: null } });\n            return TestBedViewEngine;\n        };\n        /**\n         * Overrides the template of the given component, compiling the template\n         * in the context of the TestingModule.\n         *\n         * Note: This works for JIT and AOTed components as well.\n         */\n        TestBedViewEngine.overrideTemplateUsingTestingModule = function (component, template) {\n            _getTestBedViewEngine().overrideTemplateUsingTestingModule(component, template);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.overrideProvider = function (token, provider) {\n            _getTestBedViewEngine().overrideProvider(token, provider);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.inject = function (token, notFoundValue, flags) {\n            return _getTestBedViewEngine().inject(token, notFoundValue, flags);\n        };\n        /** @deprecated from v9.0.0 use TestBed.inject */\n        TestBedViewEngine.get = function (token, notFoundValue, flags) {\n            if (notFoundValue === void 0) { notFoundValue = core.Injector.THROW_IF_NOT_FOUND; }\n            if (flags === void 0) { flags = core.InjectFlags.Default; }\n            return _getTestBedViewEngine().inject(token, notFoundValue, flags);\n        };\n        TestBedViewEngine.createComponent = function (component) {\n            return _getTestBedViewEngine().createComponent(component);\n        };\n        /**\n         * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n         * angular module. These are common to every test in the suite.\n         *\n         * This may only be called once, to set up the common providers for the current test\n         * suite on the current platform. If you absolutely need to change the providers,\n         * first use `resetTestEnvironment`.\n         *\n         * Test modules and platforms for individual platforms are available from\n         * '@angular/<platform_name>/testing'.\n         */\n        TestBedViewEngine.prototype.initTestEnvironment = function (ngModule, platform, aotSummaries) {\n            if (this.platform || this.ngModule) {\n                throw new Error('Cannot set base providers because it has already been called');\n            }\n            this.platform = platform;\n            this.ngModule = ngModule;\n            if (aotSummaries) {\n                this._testEnvAotSummaries = aotSummaries;\n            }\n        };\n        /**\n         * Reset the providers for the test injector.\n         */\n        TestBedViewEngine.prototype.resetTestEnvironment = function () {\n            this.resetTestingModule();\n            this.platform = null;\n            this.ngModule = null;\n            this._testEnvAotSummaries = function () { return []; };\n        };\n        TestBedViewEngine.prototype.resetTestingModule = function () {\n            core.ɵclearOverrides();\n            this._aotSummaries = [];\n            this._templateOverrides = [];\n            this._compiler = null;\n            this._moduleOverrides = [];\n            this._componentOverrides = [];\n            this._directiveOverrides = [];\n            this._pipeOverrides = [];\n            this._isRoot = true;\n            this._rootProviderOverrides = [];\n            this._moduleRef = null;\n            this._moduleFactory = null;\n            this._compilerOptions = [];\n            this._providers = [];\n            this._declarations = [];\n            this._imports = [];\n            this._schemas = [];\n            this._instantiated = false;\n            this._activeFixtures.forEach(function (fixture) {\n                try {\n                    fixture.destroy();\n                }\n                catch (e) {\n                    console.error('Error during cleanup of component', {\n                        component: fixture.componentInstance,\n                        stacktrace: e,\n                    });\n                }\n            });\n            this._activeFixtures = [];\n        };\n        TestBedViewEngine.prototype.configureCompiler = function (config) {\n            this._assertNotInstantiated('TestBed.configureCompiler', 'configure the compiler');\n            this._compilerOptions.push(config);\n        };\n        TestBedViewEngine.prototype.configureTestingModule = function (moduleDef) {\n            var _a, _b, _c, _d;\n            this._assertNotInstantiated('TestBed.configureTestingModule', 'configure the test module');\n            if (moduleDef.providers) {\n                (_a = this._providers).push.apply(_a, __spread(moduleDef.providers));\n            }\n            if (moduleDef.declarations) {\n                (_b = this._declarations).push.apply(_b, __spread(moduleDef.declarations));\n            }\n            if (moduleDef.imports) {\n                (_c = this._imports).push.apply(_c, __spread(moduleDef.imports));\n            }\n            if (moduleDef.schemas) {\n                (_d = this._schemas).push.apply(_d, __spread(moduleDef.schemas));\n            }\n            if (moduleDef.aotSummaries) {\n                this._aotSummaries.push(moduleDef.aotSummaries);\n            }\n        };\n        TestBedViewEngine.prototype.compileComponents = function () {\n            var _this = this;\n            if (this._moduleFactory || this._instantiated) {\n                return Promise.resolve(null);\n            }\n            var moduleType = this._createCompilerAndModule();\n            return this._compiler.compileModuleAndAllComponentsAsync(moduleType)\n                .then(function (moduleAndComponentFactories) {\n                _this._moduleFactory = moduleAndComponentFactories.ngModuleFactory;\n            });\n        };\n        TestBedViewEngine.prototype._initIfNeeded = function () {\n            var e_1, _a;\n            if (this._instantiated) {\n                return;\n            }\n            if (!this._moduleFactory) {\n                try {\n                    var moduleType = this._createCompilerAndModule();\n                    this._moduleFactory =\n                        this._compiler.compileModuleAndAllComponentsSync(moduleType).ngModuleFactory;\n                }\n                catch (e) {\n                    var errorCompType = this._compiler.getComponentFromError(e);\n                    if (errorCompType) {\n                        throw new Error(\"This test module uses the component \" + core.ɵstringify(errorCompType) + \" which is using a \\\"templateUrl\\\" or \\\"styleUrls\\\", but they were never compiled. \" +\n                            \"Please call \\\"TestBed.compileComponents\\\" before your test.\");\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n            }\n            try {\n                for (var _b = __values(this._templateOverrides), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var _d = _c.value, component = _d.component, templateOf = _d.templateOf;\n                    var compFactory = this._compiler.getComponentFactory(templateOf);\n                    core.ɵoverrideComponentView(component, compFactory);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            var ngZone = new core.NgZone({ enableLongStackTrace: true, shouldCoalesceEventChangeDetection: false });\n            var providers = [{ provide: core.NgZone, useValue: ngZone }];\n            var ngZoneInjector = core.Injector.create({\n                providers: providers,\n                parent: this.platform.injector,\n                name: this._moduleFactory.moduleType.name\n            });\n            this._moduleRef = this._moduleFactory.create(ngZoneInjector);\n            // ApplicationInitStatus.runInitializers() is marked @internal to core. So casting to any\n            // before accessing it.\n            this._moduleRef.injector.get(core.ApplicationInitStatus).runInitializers();\n            this._instantiated = true;\n        };\n        TestBedViewEngine.prototype._createCompilerAndModule = function () {\n            var e_2, _a;\n            var _this = this;\n            var providers = this._providers.concat([{ provide: TestBed, useValue: this }]);\n            var declarations = __spread(this._declarations, this._templateOverrides.map(function (entry) { return entry.templateOf; }));\n            var rootScopeImports = [];\n            var rootProviderOverrides = this._rootProviderOverrides;\n            if (this._isRoot) {\n                var RootScopeModule = /** @class */ (function () {\n                    function RootScopeModule() {\n                    }\n                    RootScopeModule = __decorate([\n                        core.NgModule({\n                            providers: __spread(rootProviderOverrides),\n                            jit: true,\n                        })\n                    ], RootScopeModule);\n                    return RootScopeModule;\n                }());\n                rootScopeImports.push(RootScopeModule);\n            }\n            providers.push({ provide: core.ɵINJECTOR_SCOPE, useValue: this._isRoot ? 'root' : null });\n            var imports = [rootScopeImports, this.ngModule, this._imports];\n            var schemas = this._schemas;\n            var DynamicTestModule = /** @class */ (function () {\n                function DynamicTestModule() {\n                }\n                DynamicTestModule = __decorate([\n                    core.NgModule({ providers: providers, declarations: declarations, imports: imports, schemas: schemas, jit: true })\n                ], DynamicTestModule);\n                return DynamicTestModule;\n            }());\n            var compilerFactory = this.platform.injector.get(TestingCompilerFactory);\n            this._compiler = compilerFactory.createTestingCompiler(this._compilerOptions);\n            try {\n                for (var _b = __values(__spread([this._testEnvAotSummaries], this._aotSummaries)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var summary = _c.value;\n                    this._compiler.loadAotSummaries(summary);\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n            this._moduleOverrides.forEach(function (entry) { return _this._compiler.overrideModule(entry[0], entry[1]); });\n            this._componentOverrides.forEach(function (entry) { return _this._compiler.overrideComponent(entry[0], entry[1]); });\n            this._directiveOverrides.forEach(function (entry) { return _this._compiler.overrideDirective(entry[0], entry[1]); });\n            this._pipeOverrides.forEach(function (entry) { return _this._compiler.overridePipe(entry[0], entry[1]); });\n            return DynamicTestModule;\n        };\n        TestBedViewEngine.prototype._assertNotInstantiated = function (methodName, methodDescription) {\n            if (this._instantiated) {\n                throw new Error(\"Cannot \" + methodDescription + \" when the test module has already been instantiated. \" +\n                    (\"Make sure you are not using `inject` before `\" + methodName + \"`.\"));\n            }\n        };\n        TestBedViewEngine.prototype.inject = function (token, notFoundValue, flags) {\n            this._initIfNeeded();\n            if (token === TestBed) {\n                return this;\n            }\n            // Tests can inject things from the ng module and from the compiler,\n            // but the ng module can't inject things from the compiler and vice versa.\n            var UNDEFINED = {};\n            var result = this._moduleRef.injector.get(token, UNDEFINED, flags);\n            return result === UNDEFINED ? this._compiler.injector.get(token, notFoundValue, flags) :\n                result;\n        };\n        /** @deprecated from v9.0.0 use TestBed.inject */\n        TestBedViewEngine.prototype.get = function (token, notFoundValue, flags) {\n            if (notFoundValue === void 0) { notFoundValue = core.Injector.THROW_IF_NOT_FOUND; }\n            if (flags === void 0) { flags = core.InjectFlags.Default; }\n            return this.inject(token, notFoundValue, flags);\n        };\n        TestBedViewEngine.prototype.execute = function (tokens, fn, context) {\n            var _this = this;\n            this._initIfNeeded();\n            var params = tokens.map(function (t) { return _this.inject(t); });\n            return fn.apply(context, params);\n        };\n        TestBedViewEngine.prototype.overrideModule = function (ngModule, override) {\n            this._assertNotInstantiated('overrideModule', 'override module metadata');\n            this._moduleOverrides.push([ngModule, override]);\n        };\n        TestBedViewEngine.prototype.overrideComponent = function (component, override) {\n            this._assertNotInstantiated('overrideComponent', 'override component metadata');\n            this._componentOverrides.push([component, override]);\n        };\n        TestBedViewEngine.prototype.overrideDirective = function (directive, override) {\n            this._assertNotInstantiated('overrideDirective', 'override directive metadata');\n            this._directiveOverrides.push([directive, override]);\n        };\n        TestBedViewEngine.prototype.overridePipe = function (pipe, override) {\n            this._assertNotInstantiated('overridePipe', 'override pipe metadata');\n            this._pipeOverrides.push([pipe, override]);\n        };\n        TestBedViewEngine.prototype.overrideProvider = function (token, provider) {\n            this.overrideProviderImpl(token, provider);\n        };\n        TestBedViewEngine.prototype.overrideProviderImpl = function (token, provider, deprecated) {\n            if (deprecated === void 0) { deprecated = false; }\n            var def = null;\n            if (typeof token !== 'string' && (def = core.ɵgetInjectableDef(token)) && def.providedIn === 'root') {\n                if (provider.useFactory) {\n                    this._rootProviderOverrides.push({ provide: token, useFactory: provider.useFactory, deps: provider.deps || [] });\n                }\n                else {\n                    this._rootProviderOverrides.push({ provide: token, useValue: provider.useValue });\n                }\n            }\n            var flags = 0;\n            var value;\n            if (provider.useFactory) {\n                flags |= 1024 /* TypeFactoryProvider */;\n                value = provider.useFactory;\n            }\n            else {\n                flags |= 256 /* TypeValueProvider */;\n                value = provider.useValue;\n            }\n            var deps = (provider.deps || []).map(function (dep) {\n                var depFlags = 0 /* None */;\n                var depToken;\n                if (Array.isArray(dep)) {\n                    dep.forEach(function (entry) {\n                        if (entry instanceof core.Optional) {\n                            depFlags |= 2 /* Optional */;\n                        }\n                        else if (entry instanceof core.SkipSelf) {\n                            depFlags |= 1 /* SkipSelf */;\n                        }\n                        else {\n                            depToken = entry;\n                        }\n                    });\n                }\n                else {\n                    depToken = dep;\n                }\n                return [depFlags, depToken];\n            });\n            core.ɵoverrideProvider({ token: token, flags: flags, deps: deps, value: value, deprecatedBehavior: deprecated });\n        };\n        TestBedViewEngine.prototype.overrideTemplateUsingTestingModule = function (component, template) {\n            this._assertNotInstantiated('overrideTemplateUsingTestingModule', 'override template');\n            var OverrideComponent = /** @class */ (function () {\n                function OverrideComponent() {\n                }\n                OverrideComponent = __decorate([\n                    core.Component({ selector: 'empty', template: template, jit: true })\n                ], OverrideComponent);\n                return OverrideComponent;\n            }());\n            this._templateOverrides.push({ component: component, templateOf: OverrideComponent });\n        };\n        TestBedViewEngine.prototype.createComponent = function (component) {\n            var _this = this;\n            this._initIfNeeded();\n            var componentFactory = this._compiler.getComponentFactory(component);\n            if (!componentFactory) {\n                throw new Error(\"Cannot create the component \" + core.ɵstringify(component) + \" as it was not imported into the testing module!\");\n            }\n            // TODO: Don't cast as `InjectionToken<boolean>`, declared type is boolean[]\n            var noNgZone = this.inject(ComponentFixtureNoNgZone, false);\n            // TODO: Don't cast as `InjectionToken<boolean>`, declared type is boolean[]\n            var autoDetect = this.inject(ComponentFixtureAutoDetect, false);\n            var ngZone = noNgZone ? null : this.inject(core.NgZone, null);\n            var testComponentRenderer = this.inject(TestComponentRenderer);\n            var rootElId = \"root\" + _nextRootElementId$1++;\n            testComponentRenderer.insertRootElement(rootElId);\n            var initComponent = function () {\n                var componentRef = componentFactory.create(core.Injector.NULL, [], \"#\" + rootElId, _this._moduleRef);\n                return new ComponentFixture(componentRef, ngZone, autoDetect);\n            };\n            var fixture = !ngZone ? initComponent() : ngZone.run(initComponent);\n            this._activeFixtures.push(fixture);\n            return fixture;\n        };\n        return TestBedViewEngine;\n    }());\n    /**\n     * @description\n     * Configures and initializes environment for unit testing and provides methods for\n     * creating components and services in unit tests.\n     *\n     * `TestBed` is the primary api for writing unit tests for Angular applications and libraries.\n     *\n     * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n     * according to the compiler used.\n     *\n     * @publicApi\n     */\n    var TestBed = core.ɵivyEnabled ? TestBedRender3 : TestBedViewEngine;\n    /**\n     * Returns a singleton of the applicable `TestBed`.\n     *\n     * It will be either an instance of `TestBedViewEngine` or `TestBedRender3`.\n     *\n     * @publicApi\n     */\n    var getTestBed = core.ɵivyEnabled ? _getTestBedRender3 : _getTestBedViewEngine;\n    var testBed$1;\n    function _getTestBedViewEngine() {\n        return testBed$1 = testBed$1 || new TestBedViewEngine();\n    }\n    /**\n     * Allows injecting dependencies in `beforeEach()` and `it()`.\n     *\n     * Example:\n     *\n     * ```\n     * beforeEach(inject([Dependency, AClass], (dep, object) => {\n     *   // some code that uses `dep` and `object`\n     *   // ...\n     * }));\n     *\n     * it('...', inject([AClass], (object) => {\n     *   object.doSomething();\n     *   expect(...);\n     * })\n     * ```\n     *\n     * Notes:\n     * - inject is currently a function because of some Traceur limitation the syntax should\n     * eventually\n     *   becomes `it('...', @Inject (object: AClass, async: AsyncTestCompleter) => { ... });`\n     *\n     * @publicApi\n     */\n    function inject(tokens, fn) {\n        var testBed = getTestBed();\n        if (tokens.indexOf(AsyncTestCompleter) >= 0) {\n            // Not using an arrow function to preserve context passed from call site\n            return function () {\n                var _this = this;\n                // Return an async test method that returns a Promise if AsyncTestCompleter is one of\n                // the injected tokens.\n                return testBed.compileComponents().then(function () {\n                    var completer = testBed.inject(AsyncTestCompleter);\n                    testBed.execute(tokens, fn, _this);\n                    return completer.promise;\n                });\n            };\n        }\n        else {\n            // Not using an arrow function to preserve context passed from call site\n            return function () {\n                return testBed.execute(tokens, fn, this);\n            };\n        }\n    }\n    /**\n     * @publicApi\n     */\n    var InjectSetupWrapper = /** @class */ (function () {\n        function InjectSetupWrapper(_moduleDef) {\n            this._moduleDef = _moduleDef;\n        }\n        InjectSetupWrapper.prototype._addModule = function () {\n            var moduleDef = this._moduleDef();\n            if (moduleDef) {\n                getTestBed().configureTestingModule(moduleDef);\n            }\n        };\n        InjectSetupWrapper.prototype.inject = function (tokens, fn) {\n            var self = this;\n            // Not using an arrow function to preserve context passed from call site\n            return function () {\n                self._addModule();\n                return inject(tokens, fn).call(this);\n            };\n        };\n        return InjectSetupWrapper;\n    }());\n    function withModule(moduleDef, fn) {\n        if (fn) {\n            // Not using an arrow function to preserve context passed from call site\n            return function () {\n                var testBed = getTestBed();\n                if (moduleDef) {\n                    testBed.configureTestingModule(moduleDef);\n                }\n                return fn.apply(this);\n            };\n        }\n        return new InjectSetupWrapper(function () { return moduleDef; });\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _global$1 = (typeof window === 'undefined' ? global : window);\n    // Reset the test providers and the fake async zone before each test.\n    if (_global$1.beforeEach) {\n        _global$1.beforeEach(function () {\n            TestBed.resetTestingModule();\n            resetFakeAsyncZone();\n        });\n    }\n    // TODO(juliemr): remove this, only used because we need to export something to have compilation\n    // work.\n    var __core_private_testing_placeholder__ = '';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // This file only reexports content of the `src` folder. Keep it that way.\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.ComponentFixture = ComponentFixture;\n    exports.ComponentFixtureAutoDetect = ComponentFixtureAutoDetect;\n    exports.ComponentFixtureNoNgZone = ComponentFixtureNoNgZone;\n    exports.InjectSetupWrapper = InjectSetupWrapper;\n    exports.TestBed = TestBed;\n    exports.TestComponentRenderer = TestComponentRenderer;\n    exports.__core_private_testing_placeholder__ = __core_private_testing_placeholder__;\n    exports.async = async;\n    exports.discardPeriodicTasks = discardPeriodicTasks;\n    exports.fakeAsync = fakeAsync;\n    exports.flush = flush;\n    exports.flushMicrotasks = flushMicrotasks;\n    exports.getTestBed = getTestBed;\n    exports.inject = inject;\n    exports.resetFakeAsyncZone = resetFakeAsyncZone;\n    exports.tick = tick;\n    exports.withModule = withModule;\n    exports.ɵMetadataOverrider = MetadataOverrider;\n    exports.ɵTestingCompiler = TestingCompiler;\n    exports.ɵTestingCompilerFactory = TestingCompilerFactory;\n    exports.ɵangular_packages_core_testing_testing_a = TestBedViewEngine;\n    exports.ɵangular_packages_core_testing_testing_b = TestBedRender3;\n    exports.ɵangular_packages_core_testing_testing_c = _getTestBedRender3;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=core-testing.umd.js.map\n"]}