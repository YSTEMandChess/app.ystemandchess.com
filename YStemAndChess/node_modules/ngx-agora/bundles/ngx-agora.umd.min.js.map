{"version":3,"sources":["ng://ngx-agora/lib/ngx-agora.service.ts","ng://ngx-agora/lib/ngx-agora.component.ts","ng://ngx-agora/lib/ngx-agora.module.ts","ng://ngx-agora/lib/data/enums/channel-media-message.enum.ts","ng://ngx-agora/lib/data/enums/client-event.enum.ts","ng://ngx-agora/lib/data/enums/log-level.enum.ts","ng://ngx-agora/lib/data/enums/codec-type.enum.ts","ng://ngx-agora/lib/data/enums/mute-state.enum.ts","ng://ngx-agora/lib/data/enums/stream-event.enum.ts"],"names":["NgxAgoraService","config","this","audioDevices","videoDevices","AgoraRTC","checkSystemRequirements","collectDevices","Logger","error","prototype","createClient","autoInitializing","onSuccess","onFailure","client","init","AppID","createStream","spec","microphoneId","length","defaultMic","deviceId","cameraId","defaultCamera","appId","_this","getDevices","devices","filter","device","kind","agoraSDK","Injectable","args","providedIn","Inject","NgxAgoraComponent","ngOnInit","Component","selector","template","NgxAgoraModule","forRoot","ngModule","providers","provide","useValue","NgModule","declarations","exports","ChannelMediaMessage","RELAY_OK","SERVER_ERROR_RESPONSE","SERVER_NO_RESPONSE","NO_RESOURCE_AVAILABLE","FAILED_JOIN_SRC","FAILED_JOIN_DEST","FAILED_PACKET_RECEIVED_FROM_SRC","FAILED_PACKET_SENT_TO_DEST","SERVER_CONNECTION_LOST","INTERNAL_ERROR","SRC_TOKEN_EXPIRED","DEST_TOKEN_EXPIRED","RELAY_ALREADY_START","RELAY_NOT_START","LogLevel","Debug","Info","Warning","Error","None","FirstAudioFrameDecoded","FirstVideoFrameDecoded","LocalStreamPublished","RemoteStreamAdded","RemoteStreamRemoved","RemoteStreamSubscribed","PeerLeave","PeerOnline","RemoteAudioMuted","RemoteAudioUnmuted","RemoveVideoMuted","RemoteVideoUnmuted","CryptError","LocalClientBanned","ActiveSpeaker","VolumeIndicator","LiveStreamingStarted","LiveStreamingFailed","LiveStreamingStopped","LiveTranscodingUpdated","StreamInjectedStatusUpdated","TokenPrivelegeWillExpire","TokenPrivelegeExpired","NetworkTypeChanged","RecordingDeviceChanged","AudioOutputDeviceChanged","CameraChanged","StreamTypeChanged","ConnectionStateChanged","StreamReconnectionStart","StreamReconnectionEnd","ClientRoleChanged","NetworkQualityReported","StreamFallback","StreamUpdated","Exception","RemoteVideoCaptureEnabled","RemoteVideoCaptureDisabled","MediaStreamEventRelayed","MediaStreamRelayStateChanged","Opus","AAC","Unmuted","Muted","MediaAccessAllowed","MediaAccessDenied","ScreenSharingStopped","VideoTrackEnded","AudioTrackEnded","AudioMixingPlayed","AudioMixingFinished","StreamPlaybackStatusChanged"],"mappings":"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","sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport * as agoraSDK from 'agora-rtc-sdk';\n\nimport { AgoraClient } from './data/models/agora-client.model';\nimport { AgoraConfig } from './data/models/agora-config.model';\nimport { AgoraRTC, ClientConfig, MediaDeviceInfo, Stream, StreamSpec } from './data/models';\n\n/**\n * Provides access to the Agora web API, including the AgoraRTC and Client objects.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxAgoraService {\n  private static AgoraRTC: AgoraRTC = agoraSDK;\n\n  /**\n   * The local Agora.io Client object.\n   * @see [Web Client](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html)\n   */\n  client: AgoraClient;\n  /**\n   * All audio devices collected from the AgoraRTC `getDevices()` method.\n   * @see [getDevices()](https://docs.agora.io/en/Video/API%20Reference/web/globals.html#getdevices)\n   *\n   */\n  audioDevices: MediaDeviceInfo[] = [];\n  /**\n   * All video devices collected from the AgoraRTC `getDevices()` method.\n   * @see [getDevices()](https://docs.agora.io/en/Video/API%20Reference/web/globals.html#getdevices)\n   */\n  videoDevices: MediaDeviceInfo[] = [];\n  /**\n   * Instance reference to the `static` AgoraRTC library object.\n   */\n  AgoraRTC: AgoraRTC = NgxAgoraService.AgoraRTC;\n\n  constructor(@Inject('config') private config: AgoraConfig) {\n    if (!this.checkSystemRequirements()) {\n      this.AgoraRTC.Logger.error('Web RTC is not supported in this browser');\n    } else {\n      this.collectDevices();\n    }\n  }\n\n  /**\n   * Checks the Web Browser Compatibility\n   *\n   * This method checks the compatibility between the Web SDK and the current web browser.\n   * Use this method before calling createClient to check the compatibility between the system and the web browser.\n   *\n   * - true: The Web SDK is compatible with the current web browser.\n   * - false: The Web SDK is not compatible with the current web browser.\n   *\n   * @remark\n   * Agora has yet to conduct comprehensive tests on Chromium kernel browsers, such as QQ and 360.\n   * Agora will gradually achieve compatibility on most mainstream browsers in subsequent versions of the Web SDK.\n   */\n  checkSystemRequirements(): boolean {\n    return this.AgoraRTC.checkSystemRequirements();\n  }\n\n  /**\n   * Creates a Client object.\n   *\n   * This method creates and returns a client object. You can only call this method once each call session.\n   *\n   * @param config\n   * Defines the property of the client, see\n   * [ClientConfig](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.clientconfig.html) for details.\n   * @param [autoInitializing=true] Ngx-agora by default automatically initializes the client with the provided `AppID` after it is created.\n   * Set this property to `false` to disable this functionality, if you are going to call `init()` separately\n   * (after creating the client only).\n   * @param [onSuccess] The callback when the method succeeds.\n   * @param [onFailure] The callback when the method fails.\n   *\n   * @example\n   * AgoraRTC.createClient(config);\n   */\n  createClient(\n    config: ClientConfig,\n    autoInitializing: boolean = true,\n    onSuccess?: () => void,\n    onFailure?: (error: Error) => void\n  ): AgoraClient {\n    this.client = this.AgoraRTC.createClient(config);\n    if (autoInitializing) {\n      this.init(this.config.AppID, onSuccess, onFailure);\n    }\n    return this.client;\n  }\n\n  /**\n   * This method creates and returns a stream object.\n   *\n   * @example\n   * AgoraRTC.createStream(spec)\n   *\n   * @param spec Defines the properties of the stream\n   * @see [StreamSpec](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.streamspec.html) for details.\n   */\n  createStream(spec: StreamSpec): Stream {\n    if (!spec.microphoneId && this.audioDevices && this.audioDevices.length) {\n      const defaultMic = this.audioDevices[0].deviceId;\n      spec.microphoneId = defaultMic;\n    }\n    if (!spec.cameraId && this.videoDevices && this.videoDevices.length) {\n      const defaultCamera = this.videoDevices[0].deviceId;\n      spec.cameraId = spec.cameraId || defaultCamera;\n    }\n\n    return this.AgoraRTC.createStream(spec);\n  }\n\n  /**\n   * Initializes the Client object.\n   *\n   * @param appId Pass in the App ID for your project.\n   * ASCII characters only, and the string length must be greater than 0 and less than 256 bytes.\n   * To get your App ID,\n   * @see [Get an App ID](https://docs.agora.io/en/Video/web_prepare?platform=Web#create-an-agora-account-and-get-an-app-id).\n   * @param [onSuccess] The callback when the method succeeds.\n   * @param [onFailure] The callback when the method fails.\n   *\n   * @example\n   * this.ngxAgoraService.client.init(appId, () => {\n   * console.log(\"client initialized\");\n   * // Join a channel\n   * //……\n   * }, error => {\n   *     console.log(\"client init failed \", err);\n   *     // Error handling\n   * });\n   */\n  init(appId: string, onSuccess?: () => void, onFailure?: (error: Error) => void): void {\n    this.client.init(appId, onSuccess, onFailure);\n  }\n\n  /**\n   * Attempts to automatically collect audio and video devices from the AgoraRTC `getDevices()` method.\n   */\n  private collectDevices(): void {\n    this.AgoraRTC.getDevices((devices: MediaDeviceInfo[]) => {\n      const audioDevices = devices.filter(device => {\n        return device.kind === 'audioinput' && device.deviceId !== 'default';\n      });\n\n      const videoDevices = devices.filter(device => {\n        return device.kind === 'videoinput' && device.deviceId !== 'default';\n      });\n\n      this.audioDevices = audioDevices;\n      this.videoDevices = videoDevices;\n    });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-ngx-agora',\n  template: `\n    <p>\n      ngx-agora works!\n    </p>\n  `,\n  styles: []\n})\nexport class NgxAgoraComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { AgoraConfig } from './data/models/agora-config.model';\nimport { NgxAgoraComponent } from './ngx-agora.component';\nimport { NgxAgoraService } from './ngx-agora.service';\n\n@NgModule({\n  declarations: [NgxAgoraComponent],\n  exports: [NgxAgoraComponent]\n})\nexport class NgxAgoraModule {\n  static forRoot(config: AgoraConfig): ModuleWithProviders<RouterModule> {\n    return {\n      ngModule: NgxAgoraModule,\n      providers: [NgxAgoraService, { provide: 'config', useValue: config }]\n    };\n  }\n}\n","/**\n * Error message of the media stream relay.\n */\nexport enum ChannelMediaMessage {\n  /** No error. */\n  'RELAY_OK',\n  /** An error occurs in the server response. */\n  'SERVER_ERROR_RESPONSE',\n  /** No server response. */\n  'SERVER_NO_RESPONSE',\n  /** The SDK fails to access the service, probably due to limited resources of the server. */\n  'NO_RESOURCE_AVAILABLE',\n  /** Fails to send the relay request. */\n  'FAILED_JOIN_SRC',\n  /** Fails to accept the relay request. */\n  'FAILED_JOIN_DEST',\n  /** The server fails to receive the media stream. */\n  'FAILED_PACKET_RECEIVED_FROM_SRC',\n  /** The server fails to send the media stream. */\n  'FAILED_PACKET_SENT_TO_DEST',\n  /**\n   * The SDK disconnects from the server and fails to reconnect to the server due to a poor network connection.\n   * In this case, the SDK resets the media stream relay state.\n   * You can try\n   * [startChannelMediaRelay](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#startchannelmediarelay)\n   * to restart the media stream relay.\n   */\n  'SERVER_CONNECTION_LOST',\n  /** An internal error occurs in the server. */\n  'INTERNAL_ERROR',\n  /** The token of the source channel has expired. */\n  'SRC_TOKEN_EXPIRED',\n  /** The token of the destination channel has expired. */\n  'DEST_TOKEN_EXPIRED',\n  /**\n   * The relay has already started. Possibly caused by calling\n   * [startChannelMediaRelay](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#startchannelmediarelay)\n   * repeatedly, or calling\n   * [startChannelMediaRelay](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#startchannelmediarelay)\n   * before\n   * [stopChannelMediaRelay](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#stopchannelmediarelay)\n   * succeeds.\n   */\n  'RELAY_ALREADY_START',\n  /**\n   * The relay has not started. Possibly caused by calling\n   * [updateChannelMediaRelay](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#updatechannelmediarelay)\n   * before\n   * [startChannelMediaRelay](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#startchannelmediarelay)\n   * succeeds.\n   */\n  'RELAY_NOT_START',\n}\n","/**\n * Events that the Agora.io SDK `client.on()` function recognizes.\n *\n * If the API changes faster than the library, a quick type override can help bypass compiler errors:\n *\n * @example\n * this.ngxAgoraService.client.on('new-event' as ClientEvent, (data) => {})\n */\nexport enum ClientEvent {\n  /**\n   * Occurs when the first remote audio frame is decoded.\n   * The SDK triggers this callback when the local client successfully subscribes to a remote stream and decodes the first audio frame.\n   *\n   * @example\n   * client.on('first-audio-frame-decode', function (evt) {\n   *  console.log('first-audio-frame-decode');\n   *  console.log(evt.stream);\n   * })\n   */\n  FirstAudioFrameDecoded = 'first-audio-frame-decode',\n  /**\n   * Occurs when the first remote video frame is decoded.\n   * The SDK triggers this callback when the local client successfully subscribes to a remote stream and decodes the first video frame.\n   *\n   * @example\n   * client.on('first-video-frame-decode', function (evt) {\n   *  console.log('first-video-frame-decode');\n   *  console.log(evt.stream);\n   * })\n   */\n  FirstVideoFrameDecoded = 'first-video-frame-decode',\n  /**\n   * Occurs when the local stream is published.\n   *\n   * @example\n   * client.on(\"stream-published\", function(evt) {\n   *  console.log(\"local stream published\");\n   *  //……\n   * })\n   */\n  LocalStreamPublished = 'stream-published',\n  /**\n   * Occurs when the remote stream is added.\n   *\n   * @remark\n   * When the local user joins the channel, if other users are already in the channel,\n   * the SDK also reports to the app on the existing remote streams.\n   *\n   * @example\n   * client.on(\"stream-added\", function(evt) {\n   *  var stream = evt.stream;\n   *  console.log(\"new stream added \", stream.getId());\n   *  // Subscribe the stream.\n   *  //……\n   * })\n   */\n  RemoteStreamAdded = 'stream-added',\n  /**\n   * Occurs when the remote stream is removed; for example, a peer user calls\n   * [Client.unpublish](https://docs.agora.io/en/Voice/API%20Reference/web/interfaces/agorartc.client.html#unpublish).\n   *\n   * @example\n   * client.on(\"stream-removed\", function(evt) {\n   *  var stream = evt.stream;\n   *  console.log(\"remote stream was removed\", stream.getId());\n   *  //……\n   * });\n   */\n  RemoteStreamRemoved = 'stream-removed',\n  /**\n   * Occurs when a user subscribes to a remote stream.\n   *\n   * @example\n   * client.on(\"stream-subscribed\", function(evt) {\n   *  var stream = evt.stream;\n   *  console.log(\"new stream subscribed \", stream.getId());\n   *  // Play the stream.\n   *  //……\n   * })\n   */\n  RemoteStreamSubscribed = 'stream-subscribed',\n  /**\n   * Occurs when the peer user leaves the channel; for example, the peer user calls\n   * [Client.leave](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#leave).\n   */\n  PeerLeave = 'peer-leave',\n  /**\n   * Occurs when a remote user or host joins the channel.\n   * - Communication channel (rtc mode): This callback notifies the app that another user joins the channel.\n   *   If other users are already in the channel, the SDK also reports to the app on the existing users.\n   * - Live-broadcast channel (live mode): This callback notifies the app that the host joins the channel.\n   *   If other hosts are already in the channel, the SDK also reports to the app on the existing hosts.\n   *   Agora recommends limiting the number of hosts to 17.\n   */\n  PeerOnline = 'peer-online',\n  /**\n   * Occurs when the peer user mutes the audio.\n   *\n   * @example\n   * client.on(\"mute-audio\", function(evt) {\n   *  var uid = evt.uid;\n   *  console.log(\"mute audio:\" + uid);\n   *  //alert(\"mute audio:\" + uid)\n   * });\n   */\n  RemoteAudioMuted = 'mute-audio',\n  /**\n   * Occurs when the peer user unmutes the audio.\n   *\n   * @example\n   * client.on(\"unmute-audio\", function (evt) {\n   *  var uid = evt.uid;\n   *  console.log(\"unmute audio:\" + uid);\n   * });\n   */\n  RemoteAudioUnmuted = 'unmute-audio',\n  /**\n   * Occurs when the peer user turns off the video.\n   *\n   * @example\n   * client.on(\"mute-video\", function (evt) {\n   *  var uid = evt.uid;\n   *  console.log(\"mute video\" + uid);\n   *  //alert(\"mute video:\" + uid);\n   * })\n   */\n  RemoveVideoMuted = 'mute-video',\n  /**\n   * Occurs when the peer user turns on the video.\n   *\n   * @example\n   * client.on(\"unmute-video\", function (evt) {\n   *  var uid = evt.uid;\n   *  console.log(\"unmute video:\" + uid);\n   * })\n   */\n  RemoteVideoUnmuted = 'unmute-video',\n  /**\n   * Occurs when encryption or decryption fails during publishing or subscribing to a stream.\n   * The failure is usually due to a wrong encryption password\n   * ([setEncryptionSecret](https://docs.agora.io/en/Voice/API%20Reference/web/interfaces/agorartc.client.html#setencryptionsecret))\n   * or an incorrect encryption\n   * mode ([setEncryptionMode](https://docs.agora.io/en/Voice/API%20Reference/web/interfaces/agorartc.client.html#setencryptionmode)).\n   *\n   * @since 3.0.0\n   */\n  CryptError = 'crypt-error',\n  /**\n   * This callback notifies the peer user that he/she is banned from the channel. Only the banned users receive this callback.\n   * Usually the reason is that the UID is banned (`K_UID_BANNED`(14)).\n   *\n   * @example\n   * client.on(\"client-banned\", function (evt) {\n   *  var uid = evt.uid;\n   *  var attr = evt.attr;\n   *  console.log(\" user banned:\" + uid + \", bantype:\" + attr);\n   *  alert(\" user banned:\" + uid + \", bantype:\" + attr);\n   * });\n   */\n  LocalClientBanned = 'client-banned',\n  /** This callback notifies the application who is the active speaker in the channel. */\n  ActiveSpeaker = 'active-speaker',\n  /**\n   * This callback notifies the application of all the speaking remote users and their volumes.\n   *\n   * It is disabled by default. You can enable this event by calling enableAudioVolumeIndicator.\n   * If enabled, it reports the volumes every two seconds regardless of whether there are users speaking.\n   *\n   * The volume is an integer ranging from 0 to 100. Usually a user with volume above five will be countedas a speaking user.\n   */\n  VolumeIndicator = 'volume-indicator',\n  /** Occurs when the live streaming starts. */\n  LiveStreamingStarted = 'liveStreamingStarted',\n  /** Occurs when the live streaming fails. */\n  LiveStreamingFailed = 'liveStreamingFailed',\n  /** Occurs when the live streaming stops. */\n  LiveStreamingStopped = 'liveStreamingStopped',\n  /**\n   * Occurs when the live transcoding setting is updated.\n   *\n   * The SDK triggers this callback when the live transcoding setting is updated by calling the\n   * [setLiveTranscoding](https://docs.agora.io/en/Voice/API%20Reference/web/interfaces/agorartc.client.html#setlivetranscoding) method.\n   *\n   * @remark\n   * The first call of the\n   * [setLiveTranscoding](https://docs.agora.io/en/Voice/API%20Reference/web/interfaces/agorartc.client.html#setlivetranscoding)\n   * method does not trigger this callback.\n   */\n  LiveTranscodingUpdated = 'liveTranscodingUpdated',\n  /** Occurs when the injected online media stream's status is updated. */\n  StreamInjectedStatusUpdated = 'streamInjectedStatus',\n  /**\n   * Occurs when the Token expires in 30 seconds.\n   *\n   * You should request a new Token from your server and call\n   * [Client.renewToken](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#renewtoken).\n   */\n  TokenPrivelegeWillExpire = 'onTokenPrivilegeWillExpire',\n  /**\n   * Occurs when the Token expires.\n   *\n   * You should request a new Token from your server and call\n   * [Client.renewToken](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#renewtoken).\n   */\n  TokenPrivelegeExpired = 'onTokenPrivilegeDidExpire',\n  /**\n   * Occurs when an error message is reported and requires error handling.\n   * For details, @see [Error Codes and Warning Codes](https://docs.agora.io/en/Video/the_error_web).\n   */\n  Error = 'error',\n  /**\n   * Occurs when the network type changes.\n   *\n   * @remark\n   * Chrome 61+ is required for this function, and the compatibility is not guaranteed.\n   *\n   * @see [Network Information API](https://developer.mozilla.org/en-US/docs/Web/API/Network_Information_API) for details.\n   */\n  NetworkTypeChanged = 'network-type-changed',\n  /**\n   * Occurs when an audio input device is added or removed.\n   *\n   * @example\n   * client.on(\"recording-device-changed\", function(evt) {\n   *  console.log(\"Recording Device Changed\", evt.state, evt.device);\n   * });\n   */\n  RecordingDeviceChanged = 'recording-device-changed',\n  /**\n   * Occurs when an audio output device is added or removed.\n   * @remark\n   * Only supports Chrome 49+.\n   */\n  AudioOutputDeviceChanged = 'playout-device-changed',\n  /** Occurs when a camera is added or removed. */\n  CameraChanged = 'camera-changed',\n  /**\n   * Occurs when the type of a video stream changes.\n   * It happens when a high-video stream changes to a low-video stream, or vice versa.\n   *\n   * The stream type (streamType):\n   * - 0: High-bitrate, high-resolution video stream.\n   * - 1: Low-bitrate, low-resolution video stream.\n   */\n  StreamTypeChanged = 'stream-type-changed',\n  /**\n   * Occurs when the network connection state changes.\n   *\n   * The connection between the SDK and Agora's edge server has the following states:\n   *\n   * - DISCONNECTED: The SDK is disconnected from Agora's edge server.\n   *   This is the initial state before Client.join.\n   *   The SDK also enters this state after the app calls Client.leave.\n   * - CONNECTING: The SDK is connecting to Agora's edge server. The SDK enters this state when calling Client.join or\n   *   reconnecting to Agora's edge server automatically after the connection is lost.\n   * - CONNECTED: The SDK is connected to Agora's edge server and joins a channel. You can now publish or subscribe to a stream\n   *   in the channel. If the connection is lost because, for example, the network is down or switched, the SDK triggers this callback\n   *   and notifies the app that the state changes from CONNECTED to CONNECTING.\n   * - DISCONNECTING: The SDK is disconnecting from Agora's edge server. The SDK enters this state when calling Client.leave.\n   */\n  ConnectionStateChanged = 'connection-state-change',\n  /** Occurs when the SDK starts republishing or re-subscribing to a stream. */\n  StreamReconnectionStart = 'stream-reconnect-start',\n  /** Occurs when the SDK finishes republishing or re-subscribing to a stream. */\n  StreamReconnectionEnd = 'stream-reconnect-end',\n  /** Occurs when the user role switches in a live broadcast. For example, from a host to an audience or vice versa. */\n  ClientRoleChanged = 'client-role-changed',\n\n  /**\n   * Reports the network quality of the local user once every two seconds.\n   *\n   * This callback reports on the uplink and downlink network conditions of the local user.\n   *\n   * @remark\n   * This is an experimental feature and the network quality rating is for reference only.\n   */\n  NetworkQualityReported = 'network-quality',\n  /**\n   * Occurs when the remote video stream falls back to an audio-only stream due to unreliable network\n   * conditions or switches back to the video after the network conditions improve.\n   *\n   * If you set `fallbackType` as 2 in\n   * [setStreamFallbackOption](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#setstreamfallbackoption),\n   * the SDK triggers this callback when the remote media stream falls back to audio only due to unreliable network conditions\n   * or switches back to the video after the network condition improves.\n   *\n   * @remark\n   * Once the remote media stream is switched to the low stream due to unreliable network conditions, you can monitor\n   * the stream switch between a high stream and low stream in the stream-type-changed callback.\n   */\n  StreamFallback = 'stream-fallback',\n  /**\n   * Occurs when a remote stream adds or removes a track.\n   *\n   * When a remote stream calls the [addTrack](https://docs.agora.io/en/Voice/API%20Reference/web/interfaces/agorartc.stream.html#addtrack)\n   * or [removeTrack](https://docs.agora.io/en/Voice/API%20Reference/web/interfaces/agorartc.stream.html#removetrack)\n   * method, the SDK triggers this callback.\n   */\n  StreamUpdated = 'stream-updated',\n  /**\n   * Reports exception events in the channel.\n   * Exceptions are not errors, but usually mean quality issues.\n   * This callback also reports recovery from an exception.\n   * Each exception event has a corresponding recovery event\n   * @see https://web-cdn.agora.io/docs-files/1547180053430 for details\n   */\n  Exception = 'exception',\n  /**\n   * Occurs when a remote user of the Native SDK calls `enableLocalVideo(true)` to enable video capture.\n   *\n   * @since 3.0.0\n   */\n  RemoteVideoCaptureEnabled = 'enable-local-video',\n  /**\n   * Occurs when a remote user of the Native SDK calls `enableLocalVideo(false)` to disable video capture.\n   *\n   * @since 3.0.0\n   */\n  RemoteVideoCaptureDisabled = 'disable-local-video',\n  /**\n   * Reports events during the media stream relay.\n   *\n   * Parameters\n   * - evt: `object`\n   *  - code: `number`\n   *  The event code for media stream relay.\n   *    - 0: The user disconnects from the server due to a poor network connection.\n   *    - 1: The user is connected to the server.\n   *    - 2: The user joins the source channel.\n   *    - 3: The user joins the destination channel.\n   *    - 4: The SDK starts relaying the media stream to the destination channel.\n   *    - 5: The server receives the video stream from the source channel.\n   *    - 6: The server receives the audio stream from the source channel.\n   *    - 7: The destination channel is updated.\n   */\n  MediaStreamEventRelayed = 'channel-media-relay-event',\n  /**\n   * Occurs when the state of the media stream relay changes.\n   *\n   * @since 3.0.0\n   * @description\n   * The SDK reports the state and error code of the current media relay in this callback.\n   *\n   * Parameters\n   * - evt: `object`\n   *  - code: `number`\n   *  The error code.\n   *    - 0: No error.\n   *    - 1: An error occurs in the server response.\n   *    - 2: No server response.\n   *    - 3: The SDK fails to access the service, probably due to limited resources of the server.\n   *    - 4: Fails to send the relay request.\n   *    - 5: Fails to accept the relay request.\n   *    - 6: The server fails to receive the media stream.\n   *    - 7: The server fails to send the media stream.\n   *    - 8: The SDK disconnects from the server and fails to reconnect to the server due to a poor network connection.\n   *         In this case, the SDK resets the relay state. You can try\n   *  [startChannelMediaRelay](https://docs.agora.io/en/Voice/API%20Reference/web/interfaces/agorartc.client.html#startchannelmediarelay)\n   *         to restart the media stream relay.\n   *    - 9: An internal error occurs in the server.\n   *    - 10: The token of the source channel has expired.\n   *    - 11: The token of the destination channel has expired.\n   *    - 12: The relay has already started. Possibly caused by calling\n   *  [startChannelMediaRelay](https://docs.agora.io/en/Voice/API%20Reference/web/interfaces/agorartc.client.html#startchannelmediarelay)\n   *          repeatedly, or calling\n   *  [startChannelMediaRelay](https://docs.agora.io/en/Voice/API%20Reference/web/interfaces/agorartc.client.html#startchannelmediarelay)\n   *          before\n   *  [stopChannelMediaRelay](https://docs.agora.io/en/Voice/API%20Reference/web/interfaces/agorartc.client.html#stopchannelmediarelay)\n   *          succeeds.\n   *    - 13: The relay has not started. Possibly caused by calling\n   *  [updateChannelMediaRelay](https://docs.agora.io/en/Voice/API%20Reference/web/interfaces/agorartc.client.html#updatechannelmediarelay)\n   *          before\n   *  [startChannelMediaRelay](https://docs.agora.io/en/Voice/API%20Reference/web/interfaces/agorartc.client.html#startchannelmediarelay)\n   *          succeeds.\n   *\n   *  - state: `number`\n   *    The state code.\n   *    - 0: The SDK is initializing.\n   *    - 1: The SDK tries to relay the media stream to the destination channel.\n   *    - 2: The SDK successfully relays the media stream to the destination channel.\n   *    - 3: An error occurs. See `code` for the error code. In case of an error, the SDK resets the media stream relay state,\n   *         and you need to call\n   * [startChannelMediaRelay](https://docs.agora.io/en/Voice/API%20Reference/web/interfaces/agorartc.client.html#startchannelmediarelay)\n   *         to restart the relay.\n   */\n  MediaStreamRelayStateChanged = 'channel-media-relay-state',\n}\n","/**\n * Allowed logging levels for the AgoraRTC.Logger module.\n */\nexport enum LogLevel {\n  /** Outputs all logs. */\n  Debug,\n  /** Outputs logs of the INFO, WARNING and ERROR levels. */\n  Info,\n  /** Outputs logs of the WARNING and ERROR levels. */\n  Warning,\n  /** Outputs logs of the ERROR level. */\n  Error,\n  /** Outputs no logs. */\n  None\n}\n","export enum CodecType {\n  Opus = '1',\n  AAC = '2'\n}\n","export enum MuteState {\n  Unmuted = '0',\n  Muted = '1'\n}\n","/**\n * /**\n * Events that the Agora.io SDK `Stream.on()` function recognizes.\n *\n * If the API changes faster than the library, a quick type override can help bypass compiler errors:\n *\n * @example\n * localStream.on('new-event' as ClientEvent, (data) => {})\n */\nexport enum StreamEvent {\n  /** Occurs when the user gives access to the camera and microphone. */\n  MediaAccessAllowed = 'accessAllowed',\n  /** Occurs when the user denies access to the camera and microphone. */\n  MediaAccessDenied = 'accessDenied',\n  /** Occurs when screen-sharing stops. */\n  ScreenSharingStopped = 'stopScreenSharing',\n  /**\n   * Occurs when the video track no longer provides data to the stream.\n   *\n   * Possible reasons include device removal and deauthorization.\n   *\n   * @see [Media​Stream​Track​.onended](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/onended).\n   */\n  VideoTrackEnded = 'videoTrackEnded',\n  /**\n   * Occurs when the audio track no longer provides data to the stream.\n   *\n   * Possible reasons include device removal and deauthorization.\n   *\n   * @see [Media​Stream​Track​.onended](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/onended).\n   */\n  AudioTrackEnded = 'audioTrackEnded',\n  /**\n   * Occurs when the audio mixing stream playback starts/resumes.\n   *\n   * @remark\n   * This callback is triggered when the audio mixing stream is loaded and starts playing,\n   * or when the paused audio mixing stream resumes playing.\n   */\n  AudioMixingPlayed = 'audioMixingPlayed',\n  /** Occurs when the last audio mixing stream playback finishes. */\n  AudioMixingFinished = 'audioMixingFinished',\n  /**\n   * Occurs when the stream playback status changes.\n   *\n   * On Windows, frequent DOM manipulations might cause the browser to pause the Chrome player.\n   * To avoid this, you can listen for this event and call the\n   * [Stream.resume](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html#resume)\n   * method to resume the playback.\n   *\n   * This callback has the following properties.\n   *\n   * - isErrorState: Whether or not the playback fails.\n   *  - true: The playback fails.\n   *  - false: The playback is normal.\n   *\n   * - mediaType: The player type.\n   *  - \"audio\": Audio player.\n   *  - \"video\": Video player.\n   *\n   * - status: The playback status.\n   *  - \"play\": Playing.\n   *  - \"aborted\": The player is removed before the stream is played successfully.\n   *  - \"paused\": The player is stopped.\n   *\n   * - reason: The reason why the playback status changes. Usually, this value is the event that triggers the status change.\n   *   Possible values include the following:\n   *  - \"playing\": The playback starts.\n   *    See [HTMLMedia​Element: playing event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playing_event).\n   *  - \"stalled\": The failure might be caused by the browser policy.\n   *    See [stalled event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/stalled_event).\n   *  - \"pause\": The stream playback might be paused by the user.\n   *    See [pause event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/pause_event).\n   *  - \"suspend\": The failure might be caused by the browser policy.\n   *    See [suspend event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/suspend_event).\n   *  - \"canplay\": Some browsers automatically stop the playback when the playback window is not displayed on the screen.\n   *    See [canplay event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canplay_event).\n   *  - \"timer\": The playback failure is caused by an unknown reason and captured by the internal timer.\n   *\n   * @example\n   * stream.on(\"player-status-change\", function(evt) {\n   *   if (evt.isErrorState && evt.status === \"paused\") {\n   *       console.error(`Stream is paused unexpectedly. Trying to resume...`);\n   *       stream.resume().then(function() {\n   *           console.log(`Stream is resumed successfully`);\n   *       }).catch(function(e) {\n   *           console.error(`Failed to resume stream. Error ${e.name} Reason ${e.message}`);\n   *       });\n   *   }\n   * });\n   */\n  StreamPlaybackStatusChanged = 'player-status-change',\n}\n"]}