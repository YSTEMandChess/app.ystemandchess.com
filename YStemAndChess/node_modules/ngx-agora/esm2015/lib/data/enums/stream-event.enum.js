/**
 * @fileoverview added by tsickle
 * Generated from: lib/data/enums/stream-event.enum.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const StreamEvent = {
    /** Occurs when the user gives access to the camera and microphone. */
    MediaAccessAllowed: "accessAllowed",
    /** Occurs when the user denies access to the camera and microphone. */
    MediaAccessDenied: "accessDenied",
    /** Occurs when screen-sharing stops. */
    ScreenSharingStopped: "stopScreenSharing",
    /**
     * Occurs when the video track no longer provides data to the stream.
     *
     * Possible reasons include device removal and deauthorization.
     *
     * @see [Media​Stream​Track​.onended](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/onended).
     */
    VideoTrackEnded: "videoTrackEnded",
    /**
     * Occurs when the audio track no longer provides data to the stream.
     *
     * Possible reasons include device removal and deauthorization.
     *
     * @see [Media​Stream​Track​.onended](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/onended).
     */
    AudioTrackEnded: "audioTrackEnded",
    /**
     * Occurs when the audio mixing stream playback starts/resumes.
     *
     * @remark
     * This callback is triggered when the audio mixing stream is loaded and starts playing,
     * or when the paused audio mixing stream resumes playing.
     */
    AudioMixingPlayed: "audioMixingPlayed",
    /** Occurs when the last audio mixing stream playback finishes. */
    AudioMixingFinished: "audioMixingFinished",
    /**
     * Occurs when the stream playback status changes.
     *
     * On Windows, frequent DOM manipulations might cause the browser to pause the Chrome player.
     * To avoid this, you can listen for this event and call the
     * [Stream.resume](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html#resume)
     * method to resume the playback.
     *
     * This callback has the following properties.
     *
     * - isErrorState: Whether or not the playback fails.
     *  - true: The playback fails.
     *  - false: The playback is normal.
     *
     * - mediaType: The player type.
     *  - "audio": Audio player.
     *  - "video": Video player.
     *
     * - status: The playback status.
     *  - "play": Playing.
     *  - "aborted": The player is removed before the stream is played successfully.
     *  - "paused": The player is stopped.
     *
     * - reason: The reason why the playback status changes. Usually, this value is the event that triggers the status change.
     *   Possible values include the following:
     *  - "playing": The playback starts.
     *    See [HTMLMedia​Element: playing event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playing_event).
     *  - "stalled": The failure might be caused by the browser policy.
     *    See [stalled event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/stalled_event).
     *  - "pause": The stream playback might be paused by the user.
     *    See [pause event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/pause_event).
     *  - "suspend": The failure might be caused by the browser policy.
     *    See [suspend event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/suspend_event).
     *  - "canplay": Some browsers automatically stop the playback when the playback window is not displayed on the screen.
     *    See [canplay event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canplay_event).
     *  - "timer": The playback failure is caused by an unknown reason and captured by the internal timer.
     *
     * @example
     * stream.on("player-status-change", function(evt) {
     *   if (evt.isErrorState && evt.status === "paused") {
     *       console.error(`Stream is paused unexpectedly. Trying to resume...`);
     *       stream.resume().then(function() {
     *           console.log(`Stream is resumed successfully`);
     *       }).catch(function(e) {
     *           console.error(`Failed to resume stream. Error ${e.name} Reason ${e.message}`);
     *       });
     *   }
     * });
     */
    StreamPlaybackStatusChanged: "player-status-change",
};
export { StreamEvent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyZWFtLWV2ZW50LmVudW0uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtYWdvcmEvIiwic291cmNlcyI6WyJsaWIvZGF0YS9lbnVtcy9zdHJlYW0tZXZlbnQuZW51bS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFTQSxNQUFZLFdBQVc7SUFDckIsc0VBQXNFO0lBQ3RFLGtCQUFrQixpQkFBa0I7SUFDcEMsdUVBQXVFO0lBQ3ZFLGlCQUFpQixnQkFBaUI7SUFDbEMsd0NBQXdDO0lBQ3hDLG9CQUFvQixxQkFBc0I7SUFDMUM7Ozs7OztPQU1HO0lBQ0gsZUFBZSxtQkFBb0I7SUFDbkM7Ozs7OztPQU1HO0lBQ0gsZUFBZSxtQkFBb0I7SUFDbkM7Ozs7OztPQU1HO0lBQ0gsaUJBQWlCLHFCQUFzQjtJQUN2QyxrRUFBa0U7SUFDbEUsbUJBQW1CLHVCQUF3QjtJQUMzQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BZ0RHO0lBQ0gsMkJBQTJCLHdCQUF5QjtFQUNyRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogLyoqXG4gKiBFdmVudHMgdGhhdCB0aGUgQWdvcmEuaW8gU0RLIGBTdHJlYW0ub24oKWAgZnVuY3Rpb24gcmVjb2duaXplcy5cbiAqXG4gKiBJZiB0aGUgQVBJIGNoYW5nZXMgZmFzdGVyIHRoYW4gdGhlIGxpYnJhcnksIGEgcXVpY2sgdHlwZSBvdmVycmlkZSBjYW4gaGVscCBieXBhc3MgY29tcGlsZXIgZXJyb3JzOlxuICpcbiAqIEBleGFtcGxlXG4gKiBsb2NhbFN0cmVhbS5vbignbmV3LWV2ZW50JyBhcyBDbGllbnRFdmVudCwgKGRhdGEpID0+IHt9KVxuICovXG5leHBvcnQgZW51bSBTdHJlYW1FdmVudCB7XG4gIC8qKiBPY2N1cnMgd2hlbiB0aGUgdXNlciBnaXZlcyBhY2Nlc3MgdG8gdGhlIGNhbWVyYSBhbmQgbWljcm9waG9uZS4gKi9cbiAgTWVkaWFBY2Nlc3NBbGxvd2VkID0gJ2FjY2Vzc0FsbG93ZWQnLFxuICAvKiogT2NjdXJzIHdoZW4gdGhlIHVzZXIgZGVuaWVzIGFjY2VzcyB0byB0aGUgY2FtZXJhIGFuZCBtaWNyb3Bob25lLiAqL1xuICBNZWRpYUFjY2Vzc0RlbmllZCA9ICdhY2Nlc3NEZW5pZWQnLFxuICAvKiogT2NjdXJzIHdoZW4gc2NyZWVuLXNoYXJpbmcgc3RvcHMuICovXG4gIFNjcmVlblNoYXJpbmdTdG9wcGVkID0gJ3N0b3BTY3JlZW5TaGFyaW5nJyxcbiAgLyoqXG4gICAqIE9jY3VycyB3aGVuIHRoZSB2aWRlbyB0cmFjayBubyBsb25nZXIgcHJvdmlkZXMgZGF0YSB0byB0aGUgc3RyZWFtLlxuICAgKlxuICAgKiBQb3NzaWJsZSByZWFzb25zIGluY2x1ZGUgZGV2aWNlIHJlbW92YWwgYW5kIGRlYXV0aG9yaXphdGlvbi5cbiAgICpcbiAgICogQHNlZSBbTWVkaWHigItTdHJlYW3igItUcmFja+KAiy5vbmVuZGVkXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvTWVkaWFTdHJlYW1UcmFjay9vbmVuZGVkKS5cbiAgICovXG4gIFZpZGVvVHJhY2tFbmRlZCA9ICd2aWRlb1RyYWNrRW5kZWQnLFxuICAvKipcbiAgICogT2NjdXJzIHdoZW4gdGhlIGF1ZGlvIHRyYWNrIG5vIGxvbmdlciBwcm92aWRlcyBkYXRhIHRvIHRoZSBzdHJlYW0uXG4gICAqXG4gICAqIFBvc3NpYmxlIHJlYXNvbnMgaW5jbHVkZSBkZXZpY2UgcmVtb3ZhbCBhbmQgZGVhdXRob3JpemF0aW9uLlxuICAgKlxuICAgKiBAc2VlIFtNZWRpYeKAi1N0cmVhbeKAi1RyYWNr4oCLLm9uZW5kZWRdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9NZWRpYVN0cmVhbVRyYWNrL29uZW5kZWQpLlxuICAgKi9cbiAgQXVkaW9UcmFja0VuZGVkID0gJ2F1ZGlvVHJhY2tFbmRlZCcsXG4gIC8qKlxuICAgKiBPY2N1cnMgd2hlbiB0aGUgYXVkaW8gbWl4aW5nIHN0cmVhbSBwbGF5YmFjayBzdGFydHMvcmVzdW1lcy5cbiAgICpcbiAgICogQHJlbWFya1xuICAgKiBUaGlzIGNhbGxiYWNrIGlzIHRyaWdnZXJlZCB3aGVuIHRoZSBhdWRpbyBtaXhpbmcgc3RyZWFtIGlzIGxvYWRlZCBhbmQgc3RhcnRzIHBsYXlpbmcsXG4gICAqIG9yIHdoZW4gdGhlIHBhdXNlZCBhdWRpbyBtaXhpbmcgc3RyZWFtIHJlc3VtZXMgcGxheWluZy5cbiAgICovXG4gIEF1ZGlvTWl4aW5nUGxheWVkID0gJ2F1ZGlvTWl4aW5nUGxheWVkJyxcbiAgLyoqIE9jY3VycyB3aGVuIHRoZSBsYXN0IGF1ZGlvIG1peGluZyBzdHJlYW0gcGxheWJhY2sgZmluaXNoZXMuICovXG4gIEF1ZGlvTWl4aW5nRmluaXNoZWQgPSAnYXVkaW9NaXhpbmdGaW5pc2hlZCcsXG4gIC8qKlxuICAgKiBPY2N1cnMgd2hlbiB0aGUgc3RyZWFtIHBsYXliYWNrIHN0YXR1cyBjaGFuZ2VzLlxuICAgKlxuICAgKiBPbiBXaW5kb3dzLCBmcmVxdWVudCBET00gbWFuaXB1bGF0aW9ucyBtaWdodCBjYXVzZSB0aGUgYnJvd3NlciB0byBwYXVzZSB0aGUgQ2hyb21lIHBsYXllci5cbiAgICogVG8gYXZvaWQgdGhpcywgeW91IGNhbiBsaXN0ZW4gZm9yIHRoaXMgZXZlbnQgYW5kIGNhbGwgdGhlXG4gICAqIFtTdHJlYW0ucmVzdW1lXShodHRwczovL2RvY3MuYWdvcmEuaW8vZW4vVmlkZW8vQVBJJTIwUmVmZXJlbmNlL3dlYi9pbnRlcmZhY2VzL2Fnb3JhcnRjLnN0cmVhbS5odG1sI3Jlc3VtZSlcbiAgICogbWV0aG9kIHRvIHJlc3VtZSB0aGUgcGxheWJhY2suXG4gICAqXG4gICAqIFRoaXMgY2FsbGJhY2sgaGFzIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllcy5cbiAgICpcbiAgICogLSBpc0Vycm9yU3RhdGU6IFdoZXRoZXIgb3Igbm90IHRoZSBwbGF5YmFjayBmYWlscy5cbiAgICogIC0gdHJ1ZTogVGhlIHBsYXliYWNrIGZhaWxzLlxuICAgKiAgLSBmYWxzZTogVGhlIHBsYXliYWNrIGlzIG5vcm1hbC5cbiAgICpcbiAgICogLSBtZWRpYVR5cGU6IFRoZSBwbGF5ZXIgdHlwZS5cbiAgICogIC0gXCJhdWRpb1wiOiBBdWRpbyBwbGF5ZXIuXG4gICAqICAtIFwidmlkZW9cIjogVmlkZW8gcGxheWVyLlxuICAgKlxuICAgKiAtIHN0YXR1czogVGhlIHBsYXliYWNrIHN0YXR1cy5cbiAgICogIC0gXCJwbGF5XCI6IFBsYXlpbmcuXG4gICAqICAtIFwiYWJvcnRlZFwiOiBUaGUgcGxheWVyIGlzIHJlbW92ZWQgYmVmb3JlIHRoZSBzdHJlYW0gaXMgcGxheWVkIHN1Y2Nlc3NmdWxseS5cbiAgICogIC0gXCJwYXVzZWRcIjogVGhlIHBsYXllciBpcyBzdG9wcGVkLlxuICAgKlxuICAgKiAtIHJlYXNvbjogVGhlIHJlYXNvbiB3aHkgdGhlIHBsYXliYWNrIHN0YXR1cyBjaGFuZ2VzLiBVc3VhbGx5LCB0aGlzIHZhbHVlIGlzIHRoZSBldmVudCB0aGF0IHRyaWdnZXJzIHRoZSBzdGF0dXMgY2hhbmdlLlxuICAgKiAgIFBvc3NpYmxlIHZhbHVlcyBpbmNsdWRlIHRoZSBmb2xsb3dpbmc6XG4gICAqICAtIFwicGxheWluZ1wiOiBUaGUgcGxheWJhY2sgc3RhcnRzLlxuICAgKiAgICBTZWUgW0hUTUxNZWRpYeKAi0VsZW1lbnQ6IHBsYXlpbmcgZXZlbnRdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9IVE1MTWVkaWFFbGVtZW50L3BsYXlpbmdfZXZlbnQpLlxuICAgKiAgLSBcInN0YWxsZWRcIjogVGhlIGZhaWx1cmUgbWlnaHQgYmUgY2F1c2VkIGJ5IHRoZSBicm93c2VyIHBvbGljeS5cbiAgICogICAgU2VlIFtzdGFsbGVkIGV2ZW50XShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSFRNTE1lZGlhRWxlbWVudC9zdGFsbGVkX2V2ZW50KS5cbiAgICogIC0gXCJwYXVzZVwiOiBUaGUgc3RyZWFtIHBsYXliYWNrIG1pZ2h0IGJlIHBhdXNlZCBieSB0aGUgdXNlci5cbiAgICogICAgU2VlIFtwYXVzZSBldmVudF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hUTUxNZWRpYUVsZW1lbnQvcGF1c2VfZXZlbnQpLlxuICAgKiAgLSBcInN1c3BlbmRcIjogVGhlIGZhaWx1cmUgbWlnaHQgYmUgY2F1c2VkIGJ5IHRoZSBicm93c2VyIHBvbGljeS5cbiAgICogICAgU2VlIFtzdXNwZW5kIGV2ZW50XShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSFRNTE1lZGlhRWxlbWVudC9zdXNwZW5kX2V2ZW50KS5cbiAgICogIC0gXCJjYW5wbGF5XCI6IFNvbWUgYnJvd3NlcnMgYXV0b21hdGljYWxseSBzdG9wIHRoZSBwbGF5YmFjayB3aGVuIHRoZSBwbGF5YmFjayB3aW5kb3cgaXMgbm90IGRpc3BsYXllZCBvbiB0aGUgc2NyZWVuLlxuICAgKiAgICBTZWUgW2NhbnBsYXkgZXZlbnRdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9IVE1MTWVkaWFFbGVtZW50L2NhbnBsYXlfZXZlbnQpLlxuICAgKiAgLSBcInRpbWVyXCI6IFRoZSBwbGF5YmFjayBmYWlsdXJlIGlzIGNhdXNlZCBieSBhbiB1bmtub3duIHJlYXNvbiBhbmQgY2FwdHVyZWQgYnkgdGhlIGludGVybmFsIHRpbWVyLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBzdHJlYW0ub24oXCJwbGF5ZXItc3RhdHVzLWNoYW5nZVwiLCBmdW5jdGlvbihldnQpIHtcbiAgICogICBpZiAoZXZ0LmlzRXJyb3JTdGF0ZSAmJiBldnQuc3RhdHVzID09PSBcInBhdXNlZFwiKSB7XG4gICAqICAgICAgIGNvbnNvbGUuZXJyb3IoYFN0cmVhbSBpcyBwYXVzZWQgdW5leHBlY3RlZGx5LiBUcnlpbmcgdG8gcmVzdW1lLi4uYCk7XG4gICAqICAgICAgIHN0cmVhbS5yZXN1bWUoKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgKiAgICAgICAgICAgY29uc29sZS5sb2coYFN0cmVhbSBpcyByZXN1bWVkIHN1Y2Nlc3NmdWxseWApO1xuICAgKiAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlKSB7XG4gICAqICAgICAgICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gcmVzdW1lIHN0cmVhbS4gRXJyb3IgJHtlLm5hbWV9IFJlYXNvbiAke2UubWVzc2FnZX1gKTtcbiAgICogICAgICAgfSk7XG4gICAqICAgfVxuICAgKiB9KTtcbiAgICovXG4gIFN0cmVhbVBsYXliYWNrU3RhdHVzQ2hhbmdlZCA9ICdwbGF5ZXItc3RhdHVzLWNoYW5nZScsXG59XG4iXX0=