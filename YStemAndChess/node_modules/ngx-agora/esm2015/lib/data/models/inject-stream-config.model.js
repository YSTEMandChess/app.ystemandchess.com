/**
 * @fileoverview added by tsickle
 * Generated from: lib/data/models/inject-stream-config.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * A class for configuring the imported live broadcast voice or video stream.
 *
 * \@example
 * const injectStreamConfig = {
 *  width: 0,
 *  height: 0,
 *  videoGop: 30,
 *  videoFramerate: 15,
 *  videoBitrate: 400,
 *  audioSampleRate: 44100,
 *  audioChannels: 1,
 * };
 * @record
 */
export function InjectStreamConfig() { }
if (false) {
    /**
     * Audio bitrate of the added stream to the broadcast.
     * Positive integer. The default value is 48. The value range is [1, 10000].
     *
     * \@remark
     * Agora recommends that you stay with the default value and not reset it at this point of time.
     * @type {?|undefined}
     */
    InjectStreamConfig.prototype.audioBitrate;
    /**
     * Audio channels to add into the broadcast.
     * Positive integer. The default value is 1. The value range is [1, 2].
     *
     * \@remark
     * Agora recommends that you stay with the default value and not reset it at this point of time.
     * @type {?|undefined}
     */
    InjectStreamConfig.prototype.audioChannels;
    /**
     * Audio sampling rate of the added stream to the broadcast.
     * 32000: 32 kHz
     * 44100: (Default) 44.1 kHz
     * 48000: 48 kHz
     *
     * \@remark
     * Agora recommends that you stay with the default value and not reset it at this point of time.
     * @type {?|undefined}
     */
    InjectStreamConfig.prototype.audioSampleRate;
    /**
     * Video bitrate of the added stream to the broadcast.
     * Positive integer. The default value is 400 Kbps. The value range is [1, 10000].
     *
     * \@remark
     * The setting of the video bitrate is closely linked to the resolution. If the video bitrate you set is beyond
     * the reasonable range, the SDK will set it within the reasonable range instead.
     * @type {?|undefined}
     */
    InjectStreamConfig.prototype.videoBitrate;
    /**
     * Video frame rate of the added stream to the broadcast.
     * Positive integer. The default value is 15 fps. The value range is [1, 10000].
     * @type {?|undefined}
     */
    InjectStreamConfig.prototype.videoFramerate;
    /**
     * Video GOP of the added stream to the broadcast.
     * Positive integer. The default value is 30 frames. The value range is [1, 10000].
     * @type {?|undefined}
     */
    InjectStreamConfig.prototype.videoGop;
    /**
     * Width of the added stream to the broadcast.
     * Integer, the default value is 0, which is the same width as the original stream. The value range is [0, 10000].
     * @type {?|undefined}
     */
    InjectStreamConfig.prototype.width;
    /**
     * Height of the added stream to the broadcast.
     * Integer, the default value is 0, which is the same height as the original stream. The value range is [0, 10000].
     * @type {?|undefined}
     */
    InjectStreamConfig.prototype.height;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0LXN0cmVhbS1jb25maWcubW9kZWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtYWdvcmEvIiwic291cmNlcyI6WyJsaWIvZGF0YS9tb2RlbHMvaW5qZWN0LXN0cmVhbS1jb25maWcubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFjQSx3Q0F3REM7Ozs7Ozs7Ozs7SUFoREMsMENBQXNCOzs7Ozs7Ozs7SUFRdEIsMkNBQXVCOzs7Ozs7Ozs7OztJQVV2Qiw2Q0FBeUI7Ozs7Ozs7Ozs7SUFTekIsMENBQXNCOzs7Ozs7SUFLdEIsNENBQXdCOzs7Ozs7SUFLeEIsc0NBQWtCOzs7Ozs7SUFLbEIsbUNBQWU7Ozs7OztJQUtmLG9DQUFnQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBjbGFzcyBmb3IgY29uZmlndXJpbmcgdGhlIGltcG9ydGVkIGxpdmUgYnJvYWRjYXN0IHZvaWNlIG9yIHZpZGVvIHN0cmVhbS5cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3QgaW5qZWN0U3RyZWFtQ29uZmlnID0ge1xuICogIHdpZHRoOiAwLFxuICogIGhlaWdodDogMCxcbiAqICB2aWRlb0dvcDogMzAsXG4gKiAgdmlkZW9GcmFtZXJhdGU6IDE1LFxuICogIHZpZGVvQml0cmF0ZTogNDAwLFxuICogIGF1ZGlvU2FtcGxlUmF0ZTogNDQxMDAsXG4gKiAgYXVkaW9DaGFubmVsczogMSxcbiAqIH07XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSW5qZWN0U3RyZWFtQ29uZmlnIHtcbiAgLyoqXG4gICAqIEF1ZGlvIGJpdHJhdGUgb2YgdGhlIGFkZGVkIHN0cmVhbSB0byB0aGUgYnJvYWRjYXN0LlxuICAgKiBQb3NpdGl2ZSBpbnRlZ2VyLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyA0OC4gVGhlIHZhbHVlIHJhbmdlIGlzIFsxLCAxMDAwMF0uXG4gICAqXG4gICAqIEByZW1hcmtcbiAgICogQWdvcmEgcmVjb21tZW5kcyB0aGF0IHlvdSBzdGF5IHdpdGggdGhlIGRlZmF1bHQgdmFsdWUgYW5kIG5vdCByZXNldCBpdCBhdCB0aGlzIHBvaW50IG9mIHRpbWUuXG4gICAqL1xuICBhdWRpb0JpdHJhdGU/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBBdWRpbyBjaGFubmVscyB0byBhZGQgaW50byB0aGUgYnJvYWRjYXN0LlxuICAgKiBQb3NpdGl2ZSBpbnRlZ2VyLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyAxLiBUaGUgdmFsdWUgcmFuZ2UgaXMgWzEsIDJdLlxuICAgKlxuICAgKiBAcmVtYXJrXG4gICAqIEFnb3JhIHJlY29tbWVuZHMgdGhhdCB5b3Ugc3RheSB3aXRoIHRoZSBkZWZhdWx0IHZhbHVlIGFuZCBub3QgcmVzZXQgaXQgYXQgdGhpcyBwb2ludCBvZiB0aW1lLlxuICAgKi9cbiAgYXVkaW9DaGFubmVscz86IG51bWJlcjtcbiAgLyoqXG4gICAqIEF1ZGlvIHNhbXBsaW5nIHJhdGUgb2YgdGhlIGFkZGVkIHN0cmVhbSB0byB0aGUgYnJvYWRjYXN0LlxuICAgKiAzMjAwMDogMzIga0h6XG4gICAqIDQ0MTAwOiAoRGVmYXVsdCkgNDQuMSBrSHpcbiAgICogNDgwMDA6IDQ4IGtIelxuICAgKlxuICAgKiBAcmVtYXJrXG4gICAqIEFnb3JhIHJlY29tbWVuZHMgdGhhdCB5b3Ugc3RheSB3aXRoIHRoZSBkZWZhdWx0IHZhbHVlIGFuZCBub3QgcmVzZXQgaXQgYXQgdGhpcyBwb2ludCBvZiB0aW1lLlxuICAgKi9cbiAgYXVkaW9TYW1wbGVSYXRlPzogbnVtYmVyO1xuICAvKipcbiAgICogVmlkZW8gYml0cmF0ZSBvZiB0aGUgYWRkZWQgc3RyZWFtIHRvIHRoZSBicm9hZGNhc3QuXG4gICAqIFBvc2l0aXZlIGludGVnZXIuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIDQwMCBLYnBzLiBUaGUgdmFsdWUgcmFuZ2UgaXMgWzEsIDEwMDAwXS5cbiAgICpcbiAgICogQHJlbWFya1xuICAgKiBUaGUgc2V0dGluZyBvZiB0aGUgdmlkZW8gYml0cmF0ZSBpcyBjbG9zZWx5IGxpbmtlZCB0byB0aGUgcmVzb2x1dGlvbi4gSWYgdGhlIHZpZGVvIGJpdHJhdGUgeW91IHNldCBpcyBiZXlvbmRcbiAgICogdGhlIHJlYXNvbmFibGUgcmFuZ2UsIHRoZSBTREsgd2lsbCBzZXQgaXQgd2l0aGluIHRoZSByZWFzb25hYmxlIHJhbmdlIGluc3RlYWQuXG4gICAqL1xuICB2aWRlb0JpdHJhdGU/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBWaWRlbyBmcmFtZSByYXRlIG9mIHRoZSBhZGRlZCBzdHJlYW0gdG8gdGhlIGJyb2FkY2FzdC5cbiAgICogUG9zaXRpdmUgaW50ZWdlci4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgMTUgZnBzLiBUaGUgdmFsdWUgcmFuZ2UgaXMgWzEsIDEwMDAwXS5cbiAgICovXG4gIHZpZGVvRnJhbWVyYXRlPzogbnVtYmVyO1xuICAvKipcbiAgICogVmlkZW8gR09QIG9mIHRoZSBhZGRlZCBzdHJlYW0gdG8gdGhlIGJyb2FkY2FzdC5cbiAgICogUG9zaXRpdmUgaW50ZWdlci4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgMzAgZnJhbWVzLiBUaGUgdmFsdWUgcmFuZ2UgaXMgWzEsIDEwMDAwXS5cbiAgICovXG4gIHZpZGVvR29wPzogbnVtYmVyO1xuICAvKipcbiAgICogV2lkdGggb2YgdGhlIGFkZGVkIHN0cmVhbSB0byB0aGUgYnJvYWRjYXN0LlxuICAgKiBJbnRlZ2VyLCB0aGUgZGVmYXVsdCB2YWx1ZSBpcyAwLCB3aGljaCBpcyB0aGUgc2FtZSB3aWR0aCBhcyB0aGUgb3JpZ2luYWwgc3RyZWFtLiBUaGUgdmFsdWUgcmFuZ2UgaXMgWzAsIDEwMDAwXS5cbiAgICovXG4gIHdpZHRoPzogbnVtYmVyO1xuICAvKipcbiAgICogSGVpZ2h0IG9mIHRoZSBhZGRlZCBzdHJlYW0gdG8gdGhlIGJyb2FkY2FzdC5cbiAgICogSW50ZWdlciwgdGhlIGRlZmF1bHQgdmFsdWUgaXMgMCwgd2hpY2ggaXMgdGhlIHNhbWUgaGVpZ2h0IGFzIHRoZSBvcmlnaW5hbCBzdHJlYW0uIFRoZSB2YWx1ZSByYW5nZSBpcyBbMCwgMTAwMDBdLlxuICAgKi9cbiAgaGVpZ2h0PzogbnVtYmVyO1xufVxuIl19