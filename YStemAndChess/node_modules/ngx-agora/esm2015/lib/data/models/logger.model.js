/**
 * @fileoverview added by tsickle
 * Generated from: lib/data/models/logger.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Provides methods to enable/disable log upload and set output log level.
 * @record
 */
export function Logger() { }
if (false) {
    /**
     * Outputs all logs.
     * @type {?}
     */
    Logger.prototype.DEBUG;
    /**
     * Outputs logs of the INFO, WARNING and ERROR levels.
     * @type {?}
     */
    Logger.prototype.INFO;
    /**
     * Outputs logs of the WARNING and ERROR levels.
     * @type {?}
     */
    Logger.prototype.WARNING;
    /**
     * Outputs logs of the ERROR level.
     * @type {?}
     */
    Logger.prototype.ERROR;
    /**
     * Outputs no logs.
     * @type {?}
     */
    Logger.prototype.NONE;
    /** @type {?} */
    Logger.prototype.debug;
    /** @type {?} */
    Logger.prototype.error;
    /** @type {?} */
    Logger.prototype.info;
    /** @type {?} */
    Logger.prototype.warning;
    /**
     * This method disables log upload.
     *
     * By default, the log-upload function is disabled. If you have used
     * [enableLogUpload](https://docs.agora.io/en/Video/API%20Reference/web/modules/agorartc.logger.html#enablelogupload),
     * call this method when you need to stop uploading the log.
     *
     * \@example
     * AgoraRTC.Logger.disableLogUpload();
     * @type {?}
     */
    Logger.prototype.disableLogUpload;
    /**
     * Call this method to enable log upload to Agora’s server.
     *
     * The log-upload function is disabled by default, if you need to enable this function,
     * please call this method before all the other methods.
     *
     * \@remark
     * If the user fails to join the channel, the log information is not available on Agora’s server.
     *
     * \@example
     * AgoraRTC.Logger.enableLogUpload();
     * @type {?}
     */
    Logger.prototype.enableLogUpload;
    /**
     * This method sets the output log level.
     *
     * The log level follows the sequence of NONE, ERROR, WARNING, INFO, and DEBUG.
     * For example, if you set the log level as AgoraRTC.Logger.setLogLevel(AgoraRTC.Logger.INFO);,
     * then you can see logs in levels INFO, ERROR, and WARNING.
     * @type {?}
     */
    Logger.prototype.setLogLevel;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWFnb3JhLyIsInNvdXJjZXMiOlsibGliL2RhdGEvbW9kZWxzL2xvZ2dlci5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFLQSw0QkFnREM7Ozs7OztJQTlDQyx1QkFBc0I7Ozs7O0lBRXRCLHNCQUFvQjs7Ozs7SUFFcEIseUJBQTBCOzs7OztJQUUxQix1QkFBc0I7Ozs7O0lBRXRCLHNCQUFvQjs7SUFDcEIsdUJBQWlDOztJQUNqQyx1QkFBaUM7O0lBQ2pDLHNCQUFnQzs7SUFDaEMseUJBQW1DOzs7Ozs7Ozs7Ozs7SUFZbkMsa0NBQTZCOzs7Ozs7Ozs7Ozs7OztJQWE3QixpQ0FBNEI7Ozs7Ozs7OztJQVE1Qiw2QkFBdUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMb2dMZXZlbCB9IGZyb20gJy4uL2VudW1zL2xvZy1sZXZlbC5lbnVtJztcblxuLyoqXG4gKiBQcm92aWRlcyBtZXRob2RzIHRvIGVuYWJsZS9kaXNhYmxlIGxvZyB1cGxvYWQgYW5kIHNldCBvdXRwdXQgbG9nIGxldmVsLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIExvZ2dlciB7XG4gIC8qKiBPdXRwdXRzIGFsbCBsb2dzLiAqL1xuICBERUJVRzogTG9nTGV2ZWwuRGVidWc7XG4gIC8qKiBPdXRwdXRzIGxvZ3Mgb2YgdGhlIElORk8sIFdBUk5JTkcgYW5kIEVSUk9SIGxldmVscy4gKi9cbiAgSU5GTzogTG9nTGV2ZWwuSW5mbztcbiAgLyoqIE91dHB1dHMgbG9ncyBvZiB0aGUgV0FSTklORyBhbmQgRVJST1IgbGV2ZWxzLiAqL1xuICBXQVJOSU5HOiBMb2dMZXZlbC5XYXJuaW5nO1xuICAvKiogT3V0cHV0cyBsb2dzIG9mIHRoZSBFUlJPUiBsZXZlbC4gKi9cbiAgRVJST1I6IExvZ0xldmVsLkVycm9yO1xuICAvKiogT3V0cHV0cyBubyBsb2dzLiAqL1xuICBOT05FOiBMb2dMZXZlbC5Ob25lO1xuICBkZWJ1ZzogKG1lc3NhZ2U6IHN0cmluZykgPT4gdm9pZDtcbiAgZXJyb3I6IChtZXNzYWdlOiBzdHJpbmcpID0+IHZvaWQ7XG4gIGluZm86IChtZXNzYWdlOiBzdHJpbmcpID0+IHZvaWQ7XG4gIHdhcm5pbmc6IChtZXNzYWdlOiBzdHJpbmcpID0+IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIGRpc2FibGVzIGxvZyB1cGxvYWQuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIHRoZSBsb2ctdXBsb2FkIGZ1bmN0aW9uIGlzIGRpc2FibGVkLiBJZiB5b3UgaGF2ZSB1c2VkXG4gICAqIFtlbmFibGVMb2dVcGxvYWRdKGh0dHBzOi8vZG9jcy5hZ29yYS5pby9lbi9WaWRlby9BUEklMjBSZWZlcmVuY2Uvd2ViL21vZHVsZXMvYWdvcmFydGMubG9nZ2VyLmh0bWwjZW5hYmxlbG9ndXBsb2FkKSxcbiAgICogY2FsbCB0aGlzIG1ldGhvZCB3aGVuIHlvdSBuZWVkIHRvIHN0b3AgdXBsb2FkaW5nIHRoZSBsb2cuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIEFnb3JhUlRDLkxvZ2dlci5kaXNhYmxlTG9nVXBsb2FkKCk7XG4gICAqL1xuICBkaXNhYmxlTG9nVXBsb2FkOiAoKSA9PiB2b2lkO1xuICAvKipcbiAgICogQ2FsbCB0aGlzIG1ldGhvZCB0byBlbmFibGUgbG9nIHVwbG9hZCB0byBBZ29yYeKAmXMgc2VydmVyLlxuICAgKlxuICAgKiBUaGUgbG9nLXVwbG9hZCBmdW5jdGlvbiBpcyBkaXNhYmxlZCBieSBkZWZhdWx0LCBpZiB5b3UgbmVlZCB0byBlbmFibGUgdGhpcyBmdW5jdGlvbixcbiAgICogcGxlYXNlIGNhbGwgdGhpcyBtZXRob2QgYmVmb3JlIGFsbCB0aGUgb3RoZXIgbWV0aG9kcy5cbiAgICpcbiAgICogQHJlbWFya1xuICAgKiBJZiB0aGUgdXNlciBmYWlscyB0byBqb2luIHRoZSBjaGFubmVsLCB0aGUgbG9nIGluZm9ybWF0aW9uIGlzIG5vdCBhdmFpbGFibGUgb24gQWdvcmHigJlzIHNlcnZlci5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogQWdvcmFSVEMuTG9nZ2VyLmVuYWJsZUxvZ1VwbG9hZCgpO1xuICAgKi9cbiAgZW5hYmxlTG9nVXBsb2FkOiAoKSA9PiB2b2lkO1xuICAvKipcbiAgICogVGhpcyBtZXRob2Qgc2V0cyB0aGUgb3V0cHV0IGxvZyBsZXZlbC5cbiAgICpcbiAgICogVGhlIGxvZyBsZXZlbCBmb2xsb3dzIHRoZSBzZXF1ZW5jZSBvZiBOT05FLCBFUlJPUiwgV0FSTklORywgSU5GTywgYW5kIERFQlVHLlxuICAgKiBGb3IgZXhhbXBsZSwgaWYgeW91IHNldCB0aGUgbG9nIGxldmVsIGFzIEFnb3JhUlRDLkxvZ2dlci5zZXRMb2dMZXZlbChBZ29yYVJUQy5Mb2dnZXIuSU5GTyk7LFxuICAgKiB0aGVuIHlvdSBjYW4gc2VlIGxvZ3MgaW4gbGV2ZWxzIElORk8sIEVSUk9SLCBhbmQgV0FSTklORy5cbiAgICovXG4gIHNldExvZ0xldmVsOiAobGV2ZWw6IExvZ0xldmVsKSA9PiB2b2lkO1xufVxuIl19