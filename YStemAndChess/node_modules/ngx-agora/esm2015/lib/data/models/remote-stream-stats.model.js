/**
 * @fileoverview added by tsickle
 * Generated from: lib/data/models/remote-stream-stats.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * The connection statistics of the remote stream.
 * @record
 */
export function RemoteStreamStats() { }
if (false) {
    /**
     * Bytes of the received audio.
     * @type {?}
     */
    RemoteStreamStats.prototype.audioReceiveBytes;
    /**
     * Delay in receiving the audio (ms).
     *
     * Delay from sending to playing the audio, only supported by Chrome for now.
     * @type {?}
     */
    RemoteStreamStats.prototype.audioReceiveDelay;
    /**
     * Packets of the received audio.
     * @type {?}
     */
    RemoteStreamStats.prototype.audioReceivePackets;
    /**
     * Number of lost packets of the received audio.
     * @type {?}
     */
    RemoteStreamStats.prototype.audioReceivePacketsLost;
    /**
     * Delay from sending to receiving data.
     * @type {?}
     */
    RemoteStreamStats.prototype.endToEndDelay;
    /**
     * Bytes of the received video.
     * @type {?}
     */
    RemoteStreamStats.prototype.videoReceiveBytes;
    /**
     * Decode frame rate after the video is received.
     * @type {?}
     */
    RemoteStreamStats.prototype.videoReceiveDecodeFrameRate;
    /**
     * Delay in receiving the video (ms).
     *
     * Delay from sending to playing the video, only supported by Chrome for now.
     * @type {?}
     */
    RemoteStreamStats.prototype.videoReceiveDelay;
    /**
     * Frame rate rof the received video.
     * @type {?}
     */
    RemoteStreamStats.prototype.videoReceiveFrameRate;
    /**
     * Packets of the received video.
     * @type {?}
     */
    RemoteStreamStats.prototype.videoReceivePackets;
    /**
     * Number of lost packets of the received video.
     * @type {?}
     */
    RemoteStreamStats.prototype.videoReceivePacketsLost;
    /**
     * Resolution height of the received video.
     * @type {?|undefined}
     */
    RemoteStreamStats.prototype.videoReceiveResolutionHeight;
    /**
     * Resolution width of the received video.
     * @type {?|undefined}
     */
    RemoteStreamStats.prototype.videoReceiveResolutionWidth;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVtb3RlLXN0cmVhbS1zdGF0cy5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1hZ29yYS8iLCJzb3VyY2VzIjpbImxpYi9kYXRhL21vZGVscy9yZW1vdGUtc3RyZWFtLXN0YXRzLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUtBLHVDQWlDQzs7Ozs7O0lBL0JDLDhDQUEwQjs7Ozs7OztJQUsxQiw4Q0FBMEI7Ozs7O0lBRTFCLGdEQUE0Qjs7Ozs7SUFFNUIsb0RBQWdDOzs7OztJQUVoQywwQ0FBc0I7Ozs7O0lBRXRCLDhDQUEwQjs7Ozs7SUFFMUIsd0RBQW9DOzs7Ozs7O0lBS3BDLDhDQUEwQjs7Ozs7SUFFMUIsa0RBQThCOzs7OztJQUU5QixnREFBNEI7Ozs7O0lBRTVCLG9EQUFnQzs7Ozs7SUFFaEMseURBQXNDOzs7OztJQUV0Qyx3REFBcUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdHJlYW1TdGF0cyB9IGZyb20gJy4vc3RyZWFtLXN0YXRzLm1vZGVsJztcblxuLyoqXG4gKiBUaGUgY29ubmVjdGlvbiBzdGF0aXN0aWNzIG9mIHRoZSByZW1vdGUgc3RyZWFtLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlbW90ZVN0cmVhbVN0YXRzIGV4dGVuZHMgU3RyZWFtU3RhdHMge1xuICAvKiogQnl0ZXMgb2YgdGhlIHJlY2VpdmVkIGF1ZGlvLiAqL1xuICBhdWRpb1JlY2VpdmVCeXRlczogc3RyaW5nO1xuICAvKiogRGVsYXkgaW4gcmVjZWl2aW5nIHRoZSBhdWRpbyAobXMpLlxuICAgKlxuICAgKiBEZWxheSBmcm9tIHNlbmRpbmcgdG8gcGxheWluZyB0aGUgYXVkaW8sIG9ubHkgc3VwcG9ydGVkIGJ5IENocm9tZSBmb3Igbm93LlxuICAgKi9cbiAgYXVkaW9SZWNlaXZlRGVsYXk6IHN0cmluZztcbiAgLyoqIFBhY2tldHMgb2YgdGhlIHJlY2VpdmVkIGF1ZGlvLiAqL1xuICBhdWRpb1JlY2VpdmVQYWNrZXRzOiBzdHJpbmc7XG4gIC8qKiBOdW1iZXIgb2YgbG9zdCBwYWNrZXRzIG9mIHRoZSByZWNlaXZlZCBhdWRpby4gKi9cbiAgYXVkaW9SZWNlaXZlUGFja2V0c0xvc3Q6IHN0cmluZztcbiAgLyoqIERlbGF5IGZyb20gc2VuZGluZyB0byByZWNlaXZpbmcgZGF0YS4gKi9cbiAgZW5kVG9FbmREZWxheTogc3RyaW5nO1xuICAvKiogQnl0ZXMgb2YgdGhlIHJlY2VpdmVkIHZpZGVvLiAqL1xuICB2aWRlb1JlY2VpdmVCeXRlczogc3RyaW5nO1xuICAvKiogRGVjb2RlIGZyYW1lIHJhdGUgYWZ0ZXIgdGhlIHZpZGVvIGlzIHJlY2VpdmVkLiAqL1xuICB2aWRlb1JlY2VpdmVEZWNvZGVGcmFtZVJhdGU6IHN0cmluZztcbiAgLyoqIERlbGF5IGluIHJlY2VpdmluZyB0aGUgdmlkZW8gKG1zKS5cbiAgICpcbiAgICogRGVsYXkgZnJvbSBzZW5kaW5nIHRvIHBsYXlpbmcgdGhlIHZpZGVvLCBvbmx5IHN1cHBvcnRlZCBieSBDaHJvbWUgZm9yIG5vdy5cbiAgICovXG4gIHZpZGVvUmVjZWl2ZURlbGF5OiBzdHJpbmc7XG4gIC8qKiBGcmFtZSByYXRlIHJvZiB0aGUgcmVjZWl2ZWQgdmlkZW8uICovXG4gIHZpZGVvUmVjZWl2ZUZyYW1lUmF0ZTogc3RyaW5nO1xuICAvKiogUGFja2V0cyBvZiB0aGUgcmVjZWl2ZWQgdmlkZW8uICovXG4gIHZpZGVvUmVjZWl2ZVBhY2tldHM6IHN0cmluZztcbiAgLyoqIE51bWJlciBvZiBsb3N0IHBhY2tldHMgb2YgdGhlIHJlY2VpdmVkIHZpZGVvLiAqL1xuICB2aWRlb1JlY2VpdmVQYWNrZXRzTG9zdDogc3RyaW5nO1xuICAvKiogUmVzb2x1dGlvbiBoZWlnaHQgb2YgdGhlIHJlY2VpdmVkIHZpZGVvLiAqL1xuICB2aWRlb1JlY2VpdmVSZXNvbHV0aW9uSGVpZ2h0Pzogc3RyaW5nO1xuICAvKiogUmVzb2x1dGlvbiB3aWR0aCBvZiB0aGUgcmVjZWl2ZWQgdmlkZW8uICovXG4gIHZpZGVvUmVjZWl2ZVJlc29sdXRpb25XaWR0aD86IHN0cmluZztcbn1cbiJdfQ==