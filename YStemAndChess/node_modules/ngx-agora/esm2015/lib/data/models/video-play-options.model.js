/**
 * @fileoverview added by tsickle
 * Generated from: lib/data/models/video-play-options.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Options for playing an Agora.io media stream.
 * @record
 */
export function VideoPlayOptions() { }
if (false) {
    /**
     * Video display mode:
     * - `'cover'`: Uniformly scale the video until it fills the visible boundaries (cropped).
     *   One dimension of the video may have clipped contents. Refer to the cover option of object-fit in CSS.
     * - `'contain'`: Uniformly scale the video until one of its dimension fits the boundary (zoomed to fit).
     *   Areas that are not filled due to the disparity in the aspect ratio will be filled with black.
     *   Refer to the contain option of object-fit in CSS.
     *
     * For local streams, by default the cover mode is used for video playing and the contain mode is used for screen sharing;
     * for remote streams, by default the cover mode is used.
     * @type {?|undefined}
     */
    VideoPlayOptions.prototype.fit;
    /**
     * Sets whether to mute the playing stream.
     *
     * The `muted` flag can be used as a workaround for the browser's autoplay policy.
     *
     * On Chrome 70+ and Safari, a video stream with sound does not play until triggered by a user gesture.
     * If you want to play the video anyway without a user gesture, you can set the muted flag to true, so that the video is
     * automatically played without sound.
     *
     * @see [Autoplay Policy Changes](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes) for more information.
     * @type {?|undefined}
     */
    VideoPlayOptions.prototype.muted;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlkZW8tcGxheS1vcHRpb25zLm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWFnb3JhLyIsInNvdXJjZXMiOlsibGliL2RhdGEvbW9kZWxzL3ZpZGVvLXBsYXktb3B0aW9ucy5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFHQSxzQ0F5QkM7Ozs7Ozs7Ozs7Ozs7O0lBYkMsK0JBQTBCOzs7Ozs7Ozs7Ozs7O0lBWTFCLGlDQUFnQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogT3B0aW9ucyBmb3IgcGxheWluZyBhbiBBZ29yYS5pbyBtZWRpYSBzdHJlYW0uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVmlkZW9QbGF5T3B0aW9ucyB7XG4gIC8qKlxuICAgKiBWaWRlbyBkaXNwbGF5IG1vZGU6XG4gICAqIC0gYCdjb3ZlcidgOiBVbmlmb3JtbHkgc2NhbGUgdGhlIHZpZGVvIHVudGlsIGl0IGZpbGxzIHRoZSB2aXNpYmxlIGJvdW5kYXJpZXMgKGNyb3BwZWQpLlxuICAgKiAgIE9uZSBkaW1lbnNpb24gb2YgdGhlIHZpZGVvIG1heSBoYXZlIGNsaXBwZWQgY29udGVudHMuIFJlZmVyIHRvIHRoZSBjb3ZlciBvcHRpb24gb2Ygb2JqZWN0LWZpdCBpbiBDU1MuXG4gICAqIC0gYCdjb250YWluJ2A6IFVuaWZvcm1seSBzY2FsZSB0aGUgdmlkZW8gdW50aWwgb25lIG9mIGl0cyBkaW1lbnNpb24gZml0cyB0aGUgYm91bmRhcnkgKHpvb21lZCB0byBmaXQpLlxuICAgKiAgIEFyZWFzIHRoYXQgYXJlIG5vdCBmaWxsZWQgZHVlIHRvIHRoZSBkaXNwYXJpdHkgaW4gdGhlIGFzcGVjdCByYXRpbyB3aWxsIGJlIGZpbGxlZCB3aXRoIGJsYWNrLlxuICAgKiAgIFJlZmVyIHRvIHRoZSBjb250YWluIG9wdGlvbiBvZiBvYmplY3QtZml0IGluIENTUy5cbiAgICpcbiAgICogRm9yIGxvY2FsIHN0cmVhbXMsIGJ5IGRlZmF1bHQgdGhlIGNvdmVyIG1vZGUgaXMgdXNlZCBmb3IgdmlkZW8gcGxheWluZyBhbmQgdGhlIGNvbnRhaW4gbW9kZSBpcyB1c2VkIGZvciBzY3JlZW4gc2hhcmluZztcbiAgICogZm9yIHJlbW90ZSBzdHJlYW1zLCBieSBkZWZhdWx0IHRoZSBjb3ZlciBtb2RlIGlzIHVzZWQuXG4gICAqL1xuICBmaXQ/OiAnY292ZXInIHwgJ2NvbnRhaW4nO1xuICAvKipcbiAgICogU2V0cyB3aGV0aGVyIHRvIG11dGUgdGhlIHBsYXlpbmcgc3RyZWFtLlxuICAgKlxuICAgKiBUaGUgYG11dGVkYCBmbGFnIGNhbiBiZSB1c2VkIGFzIGEgd29ya2Fyb3VuZCBmb3IgdGhlIGJyb3dzZXIncyBhdXRvcGxheSBwb2xpY3kuXG4gICAqXG4gICAqIE9uIENocm9tZSA3MCsgYW5kIFNhZmFyaSwgYSB2aWRlbyBzdHJlYW0gd2l0aCBzb3VuZCBkb2VzIG5vdCBwbGF5IHVudGlsIHRyaWdnZXJlZCBieSBhIHVzZXIgZ2VzdHVyZS5cbiAgICogSWYgeW91IHdhbnQgdG8gcGxheSB0aGUgdmlkZW8gYW55d2F5IHdpdGhvdXQgYSB1c2VyIGdlc3R1cmUsIHlvdSBjYW4gc2V0IHRoZSBtdXRlZCBmbGFnIHRvIHRydWUsIHNvIHRoYXQgdGhlIHZpZGVvIGlzXG4gICAqIGF1dG9tYXRpY2FsbHkgcGxheWVkIHdpdGhvdXQgc291bmQuXG4gICAqXG4gICAqIEBzZWUgW0F1dG9wbGF5IFBvbGljeSBDaGFuZ2VzXShodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS93ZWIvdXBkYXRlcy8yMDE3LzA5L2F1dG9wbGF5LXBvbGljeS1jaGFuZ2VzKSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICovXG4gIG11dGVkPzogYm9vbGVhbjtcbn1cbiJdfQ==