/**
 * @fileoverview added by tsickle
 * Generated from: lib/data/models/agora-rtc.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * AgoraRTC is the entry point for all the methods that can be called in Agora Web SDK.
 *
 * You can use the AgoraRTC methods to create
 * [Client](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html) and
 * [Stream](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html) objects.
 * Other methods of the AgoraRTC object check for system requirements and set up error logging.
 * @record
 */
export function AgoraRTC() { }
if (false) {
    /**
     * Checks the Web Browser Compatibility
     *
     * This method checks the compatibility between the Web SDK and the current web browser.
     * Use this method before calling createClient to check the compatibility between the system and the web browser.
     *
     * - true: The Web SDK is compatible with the current web browser.
     * - false: The Web SDK is not compatible with the current web browser.
     *
     * \@remark
     * Agora has yet to conduct comprehensive tests on Chromium kernel browsers, such as QQ and 360.
     * Agora will gradually achieve compatibility on most mainstream browsers in subsequent versions of the Web SDK.
     * @type {?}
     */
    AgoraRTC.prototype.checkSystemRequirements;
    /**
     * Creates a Client Object
     *
     * This method creates and returns a client object. You can only call this method once each call session.
     *
     * \@param config
     * Defines the property of the client, see
     * [ClientConfig](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.clientconfig.html) for details.
     *
     * \@example
     * AgoraRTC.createClient(config);
     * @type {?}
     */
    AgoraRTC.prototype.createClient;
    /**
     * This method creates and returns a stream object.
     *
     * \@example
     * AgoraRTC.createStream(spec)
     *
     * \@param spec Defines the properties of the stream
     * @see [StreamSpec](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.streamspec.html) for details.
     * @type {?}
     */
    AgoraRTC.prototype.createStream;
    /**
     * This method enumerates the available media input and output devices, such as microphones, cameras, headsets, and so on.
     *
     * If this method succeeds, the SDK returns a list of media devices in an array of `MediaDeviceInfo` objects.
     *
     * \@example
     * AgoraRTC.getDevices(devices => {
     *   const devCount = devices.length;
     *   const id = devices[0].deviceId;
     * });
     * @type {?}
     */
    AgoraRTC.prototype.getDevices;
    /**
     * Gets the Sources for Screen-sharing
     *
     * To share the screen on Electron, call this method to get the screen sources.
     * @see [Share the Screen](https://docs.agora.io/en/Video/screensharing_web?platform=Web#electron) for details.
     *
     * If this method succeeds, the SDK returns a list of screen sources in an array of
     * [DesktopCapturerSource](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.desktopcapturersource.html) objects.
     *
     * \@example
     * AgoraRTC.getScreenSources(function(err, sources) {
     *  console.log(sources)
     * }
     *
     * @type {?}
     */
    AgoraRTC.prototype.getScreenSources;
    /**
     * This method returns the codecs supported by both the Agora Web SDK and the web browser.
     * The Agora Web SDK supports VP8 and H.264 for video, and OPUS for audio.
     *
     * This method supports all web browsers. For web browsers that do not support WebRTC or
     * are not recognized, the returned codec list is empty.
     *
     * \@remark
     * In the `.then(function(result){})` callback, `result` has the following properties:
     * - `video`: array, the supported video codecs. The array might include `'H264'` and `'VP8'`, or be empty.
     * - `audio`: array, the supported audio codecs. The array might include `'OPUS'`, or be empty.
     *
     * \@example
     * // Gets the supported decoding formats as the receiver
     * AgoraRTC.getSupportedCodec()
     *   .then(result => {
     *     console.log(`Supported video codec: ${result.video.join(',')}`);
     *     console.log(`Supported audio codec: ${result.audio.join(',')}`);
     *   });
     *
     * // Gets the supported encoding formats as the sender
     * navigator.mediaDevices.getUserMedia({video: true, audio: true})
     *  .then(mediaStream => {
     *     return AgoraRTC.getSupportedCodec({stream: mediaStream});
     *  })
     *  .then(result => {
     *     console.log(`Supported video codec: ${result.video.join(',')}`);
     *     console.log(`Supported audio codec: ${result.audio.join(',')}`);
     *  });
     * @type {?}
     */
    AgoraRTC.prototype.getSupportedCodec;
    /**
     * Logs connection information and errors to the console during active periods of the Agora.io SDK.
     * @type {?}
     */
    AgoraRTC.prototype.Logger;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdvcmEtcnRjLm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWFnb3JhLyIsInNvdXJjZXMiOlsibGliL2RhdGEvbW9kZWxzL2Fnb3JhLXJ0Yy5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQWdCQSw4QkFxR0M7Ozs7Ozs7Ozs7Ozs7Ozs7SUF2RkMsMkNBQXVDOzs7Ozs7Ozs7Ozs7OztJQWF2QyxnQ0FBb0Q7Ozs7Ozs7Ozs7O0lBVXBELGdDQUEyQzs7Ozs7Ozs7Ozs7OztJQVkzQyw4QkFBcUU7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBZ0JyRSxvQ0FBaUY7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBK0JqRixxQ0FBeUY7Ozs7O0lBSXpGLDBCQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWdvcmFDbGllbnQgfSBmcm9tICcuL2Fnb3JhLWNsaWVudC5tb2RlbCc7XG5pbXBvcnQgeyBDbGllbnRDb25maWcgfSBmcm9tICcuL2NsaWVudC1jb25maWcubW9kZWwnO1xuaW1wb3J0IHsgRGVza3RvcENhcHR1cmVyU291cmNlIH0gZnJvbSAnLi9kZXNrdG9wLWNhcHR1cmVyLXNvdXJjZS5tb2RlbCc7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuL2xvZ2dlci5tb2RlbCc7XG5pbXBvcnQgeyBNZWRpYVN0cmVhbSB9IGZyb20gJy4vbWVkaWEtc3RyZWFtLm1vZGVsJztcbmltcG9ydCB7IFN0cmVhbVNwZWMgfSBmcm9tICcuL3N0cmVhbS1zcGVjLm1vZGVsJztcbmltcG9ydCB7IFN0cmVhbSB9IGZyb20gJy4vc3RyZWFtLm1vZGVsJztcblxuLyoqXG4gKiBBZ29yYVJUQyBpcyB0aGUgZW50cnkgcG9pbnQgZm9yIGFsbCB0aGUgbWV0aG9kcyB0aGF0IGNhbiBiZSBjYWxsZWQgaW4gQWdvcmEgV2ViIFNESy5cbiAqXG4gKiBZb3UgY2FuIHVzZSB0aGUgQWdvcmFSVEMgbWV0aG9kcyB0byBjcmVhdGVcbiAqIFtDbGllbnRdKGh0dHBzOi8vZG9jcy5hZ29yYS5pby9lbi9WaWRlby9BUEklMjBSZWZlcmVuY2Uvd2ViL2ludGVyZmFjZXMvYWdvcmFydGMuY2xpZW50Lmh0bWwpIGFuZFxuICogW1N0cmVhbV0oaHR0cHM6Ly9kb2NzLmFnb3JhLmlvL2VuL1ZpZGVvL0FQSSUyMFJlZmVyZW5jZS93ZWIvaW50ZXJmYWNlcy9hZ29yYXJ0Yy5zdHJlYW0uaHRtbCkgb2JqZWN0cy5cbiAqIE90aGVyIG1ldGhvZHMgb2YgdGhlIEFnb3JhUlRDIG9iamVjdCBjaGVjayBmb3Igc3lzdGVtIHJlcXVpcmVtZW50cyBhbmQgc2V0IHVwIGVycm9yIGxvZ2dpbmcuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWdvcmFSVEMge1xuICAvKipcbiAgICogQ2hlY2tzIHRoZSBXZWIgQnJvd3NlciBDb21wYXRpYmlsaXR5XG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGNoZWNrcyB0aGUgY29tcGF0aWJpbGl0eSBiZXR3ZWVuIHRoZSBXZWIgU0RLIGFuZCB0aGUgY3VycmVudCB3ZWIgYnJvd3Nlci5cbiAgICogVXNlIHRoaXMgbWV0aG9kIGJlZm9yZSBjYWxsaW5nIGNyZWF0ZUNsaWVudCB0byBjaGVjayB0aGUgY29tcGF0aWJpbGl0eSBiZXR3ZWVuIHRoZSBzeXN0ZW0gYW5kIHRoZSB3ZWIgYnJvd3Nlci5cbiAgICpcbiAgICogLSB0cnVlOiBUaGUgV2ViIFNESyBpcyBjb21wYXRpYmxlIHdpdGggdGhlIGN1cnJlbnQgd2ViIGJyb3dzZXIuXG4gICAqIC0gZmFsc2U6IFRoZSBXZWIgU0RLIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggdGhlIGN1cnJlbnQgd2ViIGJyb3dzZXIuXG4gICAqXG4gICAqIEByZW1hcmtcbiAgICogQWdvcmEgaGFzIHlldCB0byBjb25kdWN0IGNvbXByZWhlbnNpdmUgdGVzdHMgb24gQ2hyb21pdW0ga2VybmVsIGJyb3dzZXJzLCBzdWNoIGFzIFFRIGFuZCAzNjAuXG4gICAqIEFnb3JhIHdpbGwgZ3JhZHVhbGx5IGFjaGlldmUgY29tcGF0aWJpbGl0eSBvbiBtb3N0IG1haW5zdHJlYW0gYnJvd3NlcnMgaW4gc3Vic2VxdWVudCB2ZXJzaW9ucyBvZiB0aGUgV2ViIFNESy5cbiAgICovXG4gIGNoZWNrU3lzdGVtUmVxdWlyZW1lbnRzOiAoKSA9PiBib29sZWFuO1xuICAvKipcbiAgICogQ3JlYXRlcyBhIENsaWVudCBPYmplY3RcbiAgICpcbiAgICogVGhpcyBtZXRob2QgY3JlYXRlcyBhbmQgcmV0dXJucyBhIGNsaWVudCBvYmplY3QuIFlvdSBjYW4gb25seSBjYWxsIHRoaXMgbWV0aG9kIG9uY2UgZWFjaCBjYWxsIHNlc3Npb24uXG4gICAqXG4gICAqIEBwYXJhbSBjb25maWdcbiAgICogRGVmaW5lcyB0aGUgcHJvcGVydHkgb2YgdGhlIGNsaWVudCwgc2VlXG4gICAqIFtDbGllbnRDb25maWddKGh0dHBzOi8vZG9jcy5hZ29yYS5pby9lbi9WaWRlby9BUEklMjBSZWZlcmVuY2Uvd2ViL2ludGVyZmFjZXMvYWdvcmFydGMuY2xpZW50Y29uZmlnLmh0bWwpIGZvciBkZXRhaWxzLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBBZ29yYVJUQy5jcmVhdGVDbGllbnQoY29uZmlnKTtcbiAgICovXG4gIGNyZWF0ZUNsaWVudDogKGNvbmZpZzogQ2xpZW50Q29uZmlnKSA9PiBBZ29yYUNsaWVudDtcbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIGNyZWF0ZXMgYW5kIHJldHVybnMgYSBzdHJlYW0gb2JqZWN0LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBBZ29yYVJUQy5jcmVhdGVTdHJlYW0oc3BlYylcbiAgICpcbiAgICogQHBhcmFtIHNwZWMgRGVmaW5lcyB0aGUgcHJvcGVydGllcyBvZiB0aGUgc3RyZWFtXG4gICAqIEBzZWUgW1N0cmVhbVNwZWNdKGh0dHBzOi8vZG9jcy5hZ29yYS5pby9lbi9WaWRlby9BUEklMjBSZWZlcmVuY2Uvd2ViL2ludGVyZmFjZXMvYWdvcmFydGMuc3RyZWFtc3BlYy5odG1sKSBmb3IgZGV0YWlscy5cbiAgICovXG4gIGNyZWF0ZVN0cmVhbTogKHNwZWM6IFN0cmVhbVNwZWMpID0+IFN0cmVhbTtcbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIGVudW1lcmF0ZXMgdGhlIGF2YWlsYWJsZSBtZWRpYSBpbnB1dCBhbmQgb3V0cHV0IGRldmljZXMsIHN1Y2ggYXMgbWljcm9waG9uZXMsIGNhbWVyYXMsIGhlYWRzZXRzLCBhbmQgc28gb24uXG4gICAqXG4gICAqIElmIHRoaXMgbWV0aG9kIHN1Y2NlZWRzLCB0aGUgU0RLIHJldHVybnMgYSBsaXN0IG9mIG1lZGlhIGRldmljZXMgaW4gYW4gYXJyYXkgb2YgYE1lZGlhRGV2aWNlSW5mb2Agb2JqZWN0cy5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogQWdvcmFSVEMuZ2V0RGV2aWNlcyhkZXZpY2VzID0+IHtcbiAgICogICBjb25zdCBkZXZDb3VudCA9IGRldmljZXMubGVuZ3RoO1xuICAgKiAgIGNvbnN0IGlkID0gZGV2aWNlc1swXS5kZXZpY2VJZDtcbiAgICogfSk7XG4gICAqL1xuICBnZXREZXZpY2VzOiAoY2FsbGJhY2s6IChkZXZpY2VzOiBNZWRpYURldmljZUluZm9bXSkgPT4gdm9pZCkgPT4gdm9pZDtcbiAgLyoqXG4gICAqIEdldHMgdGhlIFNvdXJjZXMgZm9yIFNjcmVlbi1zaGFyaW5nXG4gICAqXG4gICAqIFRvIHNoYXJlIHRoZSBzY3JlZW4gb24gRWxlY3Ryb24sIGNhbGwgdGhpcyBtZXRob2QgdG8gZ2V0IHRoZSBzY3JlZW4gc291cmNlcy5cbiAgICogQHNlZSBbU2hhcmUgdGhlIFNjcmVlbl0oaHR0cHM6Ly9kb2NzLmFnb3JhLmlvL2VuL1ZpZGVvL3NjcmVlbnNoYXJpbmdfd2ViP3BsYXRmb3JtPVdlYiNlbGVjdHJvbikgZm9yIGRldGFpbHMuXG4gICAqXG4gICAqIElmIHRoaXMgbWV0aG9kIHN1Y2NlZWRzLCB0aGUgU0RLIHJldHVybnMgYSBsaXN0IG9mIHNjcmVlbiBzb3VyY2VzIGluIGFuIGFycmF5IG9mXG4gICAqIFtEZXNrdG9wQ2FwdHVyZXJTb3VyY2VdKGh0dHBzOi8vZG9jcy5hZ29yYS5pby9lbi9WaWRlby9BUEklMjBSZWZlcmVuY2Uvd2ViL2ludGVyZmFjZXMvYWdvcmFydGMuZGVza3RvcGNhcHR1cmVyc291cmNlLmh0bWwpIG9iamVjdHMuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIEFnb3JhUlRDLmdldFNjcmVlblNvdXJjZXMoZnVuY3Rpb24oZXJyLCBzb3VyY2VzKSB7XG4gICAqICBjb25zb2xlLmxvZyhzb3VyY2VzKVxuICAgKiB9XG4gICAqXG4gICAqL1xuICBnZXRTY3JlZW5Tb3VyY2VzOiAoY2FsbGJhY2s6IChzb3VyY2VzOiBEZXNrdG9wQ2FwdHVyZXJTb3VyY2VbXSkgPT4gdm9pZCkgPT4gdm9pZDtcbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGNvZGVjcyBzdXBwb3J0ZWQgYnkgYm90aCB0aGUgQWdvcmEgV2ViIFNESyBhbmQgdGhlIHdlYiBicm93c2VyLlxuICAgKiBUaGUgQWdvcmEgV2ViIFNESyBzdXBwb3J0cyBWUDggYW5kIEguMjY0IGZvciB2aWRlbywgYW5kIE9QVVMgZm9yIGF1ZGlvLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBzdXBwb3J0cyBhbGwgd2ViIGJyb3dzZXJzLiBGb3Igd2ViIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgV2ViUlRDIG9yXG4gICAqIGFyZSBub3QgcmVjb2duaXplZCwgdGhlIHJldHVybmVkIGNvZGVjIGxpc3QgaXMgZW1wdHkuXG4gICAqXG4gICAqIEByZW1hcmtcbiAgICogSW4gdGhlIGAudGhlbihmdW5jdGlvbihyZXN1bHQpe30pYCBjYWxsYmFjaywgYHJlc3VsdGAgaGFzIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICogLSBgdmlkZW9gOiBhcnJheSwgdGhlIHN1cHBvcnRlZCB2aWRlbyBjb2RlY3MuIFRoZSBhcnJheSBtaWdodCBpbmNsdWRlIGAnSDI2NCdgIGFuZCBgJ1ZQOCdgLCBvciBiZSBlbXB0eS5cbiAgICogLSBgYXVkaW9gOiBhcnJheSwgdGhlIHN1cHBvcnRlZCBhdWRpbyBjb2RlY3MuIFRoZSBhcnJheSBtaWdodCBpbmNsdWRlIGAnT1BVUydgLCBvciBiZSBlbXB0eS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogLy8gR2V0cyB0aGUgc3VwcG9ydGVkIGRlY29kaW5nIGZvcm1hdHMgYXMgdGhlIHJlY2VpdmVyXG4gICAqIEFnb3JhUlRDLmdldFN1cHBvcnRlZENvZGVjKClcbiAgICogICAudGhlbihyZXN1bHQgPT4ge1xuICAgKiAgICAgY29uc29sZS5sb2coYFN1cHBvcnRlZCB2aWRlbyBjb2RlYzogJHtyZXN1bHQudmlkZW8uam9pbignLCcpfWApO1xuICAgKiAgICAgY29uc29sZS5sb2coYFN1cHBvcnRlZCBhdWRpbyBjb2RlYzogJHtyZXN1bHQuYXVkaW8uam9pbignLCcpfWApO1xuICAgKiAgIH0pO1xuICAgKlxuICAgKiAvLyBHZXRzIHRoZSBzdXBwb3J0ZWQgZW5jb2RpbmcgZm9ybWF0cyBhcyB0aGUgc2VuZGVyXG4gICAqIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKHt2aWRlbzogdHJ1ZSwgYXVkaW86IHRydWV9KVxuICAgKiAgLnRoZW4obWVkaWFTdHJlYW0gPT4ge1xuICAgKiAgICAgcmV0dXJuIEFnb3JhUlRDLmdldFN1cHBvcnRlZENvZGVjKHtzdHJlYW06IG1lZGlhU3RyZWFtfSk7XG4gICAqICB9KVxuICAgKiAgLnRoZW4ocmVzdWx0ID0+IHtcbiAgICogICAgIGNvbnNvbGUubG9nKGBTdXBwb3J0ZWQgdmlkZW8gY29kZWM6ICR7cmVzdWx0LnZpZGVvLmpvaW4oJywnKX1gKTtcbiAgICogICAgIGNvbnNvbGUubG9nKGBTdXBwb3J0ZWQgYXVkaW8gY29kZWM6ICR7cmVzdWx0LmF1ZGlvLmpvaW4oJywnKX1gKTtcbiAgICogIH0pO1xuICAgKi9cbiAgZ2V0U3VwcG9ydGVkQ29kZWM6IChzdXBwb3J0ZWRDb2RlY09wdGlvbnM/OiB7IHN0cmVhbT86IE1lZGlhU3RyZWFtIH0pID0+IFByb21pc2U8b2JqZWN0PjtcbiAgLyoqXG4gICAqIExvZ3MgY29ubmVjdGlvbiBpbmZvcm1hdGlvbiBhbmQgZXJyb3JzIHRvIHRoZSBjb25zb2xlIGR1cmluZyBhY3RpdmUgcGVyaW9kcyBvZiB0aGUgQWdvcmEuaW8gU0RLLlxuICAgKi9cbiAgTG9nZ2VyOiBMb2dnZXI7XG59XG4iXX0=