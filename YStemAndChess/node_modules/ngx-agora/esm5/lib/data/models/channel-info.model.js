/**
 * @fileoverview added by tsickle
 * Generated from: lib/data/models/channel-info.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function ChannelInfo() { }
if (false) {
    /**
     * The channel name.
     * @type {?}
     */
    ChannelInfo.prototype.channelName;
    /**
     * The unique ID to identify the relay stream in the destination channel.
     * A 32-bit unsigned integer with a value ranging from 0 to (2^32-1).
     * If you set it as `0`, the server assigns a random one. To avoid UID conflicts, this uid must be different
     * from any other UIDs in the destination channel.
     * @type {?}
     */
    ChannelInfo.prototype.uid;
    /**
     * The token generated with the above `channelName` and `uid`. Do not set this parameter if you have not enabled token.
     * @type {?}
     */
    ChannelInfo.prototype.token;
}
/**
 * @record
 */
export function DestinationChannelInfo() { }
if (false) {
    /**
     * The unique ID to identify the relay stream in the destination channel.
     * A 32-bit unsigned integer with a value ranging from 0 to (2^32-1).
     * If you set it as `0`, the server assigns a random one. To avoid UID conflicts, this uid must be different
     * from any other UIDs in the destination channel.
     * @type {?}
     */
    DestinationChannelInfo.prototype.uid;
}
/**
 * @record
 */
export function SourceChannelInfo() { }
if (false) {
    /**
     * The unique ID to identify the relay stream in the source channel.
     * A 32-bit unsigned integer with a value ranging from 0 to (232-1).
     * If you set it as `0`, the server assigns a random one. To avoid UID conflicts, this value must be different
     * from the UID of the current host.
     * @type {?}
     */
    SourceChannelInfo.prototype.uid;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhbm5lbC1pbmZvLm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWFnb3JhLyIsInNvdXJjZXMiOlsibGliL2RhdGEvbW9kZWxzL2NoYW5uZWwtaW5mby5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLDBCQVlDOzs7Ozs7SUFWQyxrQ0FBb0I7Ozs7Ozs7O0lBT3BCLDBCQUFZOzs7OztJQUVaLDRCQUFjOzs7OztBQUdoQiw0Q0FRQzs7Ozs7Ozs7O0lBREMscUNBQVk7Ozs7O0FBR2QsdUNBUUM7Ozs7Ozs7OztJQURDLGdDQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW50ZXJmYWNlIENoYW5uZWxJbmZvIGV4dGVuZHMgUmVjb3JkPHN0cmluZyB8IG51bWJlciwgYW55PiB7XG4gIC8qKiBUaGUgY2hhbm5lbCBuYW1lLiAqL1xuICBjaGFubmVsTmFtZTogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIHVuaXF1ZSBJRCB0byBpZGVudGlmeSB0aGUgcmVsYXkgc3RyZWFtIGluIHRoZSBkZXN0aW5hdGlvbiBjaGFubmVsLlxuICAgKiBBIDMyLWJpdCB1bnNpZ25lZCBpbnRlZ2VyIHdpdGggYSB2YWx1ZSByYW5naW5nIGZyb20gMCB0byAoMl4zMi0xKS5cbiAgICogSWYgeW91IHNldCBpdCBhcyBgMGAsIHRoZSBzZXJ2ZXIgYXNzaWducyBhIHJhbmRvbSBvbmUuIFRvIGF2b2lkIFVJRCBjb25mbGljdHMsIHRoaXMgdWlkIG11c3QgYmUgZGlmZmVyZW50XG4gICAqIGZyb20gYW55IG90aGVyIFVJRHMgaW4gdGhlIGRlc3RpbmF0aW9uIGNoYW5uZWwuXG4gICAqL1xuICB1aWQ6IG51bWJlcjtcbiAgLyoqIFRoZSB0b2tlbiBnZW5lcmF0ZWQgd2l0aCB0aGUgYWJvdmUgYGNoYW5uZWxOYW1lYCBhbmQgYHVpZGAuIERvIG5vdCBzZXQgdGhpcyBwYXJhbWV0ZXIgaWYgeW91IGhhdmUgbm90IGVuYWJsZWQgdG9rZW4uICovXG4gIHRva2VuOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGVzdGluYXRpb25DaGFubmVsSW5mbyBleHRlbmRzIENoYW5uZWxJbmZvIHtcbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgSUQgdG8gaWRlbnRpZnkgdGhlIHJlbGF5IHN0cmVhbSBpbiB0aGUgZGVzdGluYXRpb24gY2hhbm5lbC5cbiAgICogQSAzMi1iaXQgdW5zaWduZWQgaW50ZWdlciB3aXRoIGEgdmFsdWUgcmFuZ2luZyBmcm9tIDAgdG8gKDJeMzItMSkuXG4gICAqIElmIHlvdSBzZXQgaXQgYXMgYDBgLCB0aGUgc2VydmVyIGFzc2lnbnMgYSByYW5kb20gb25lLiBUbyBhdm9pZCBVSUQgY29uZmxpY3RzLCB0aGlzIHVpZCBtdXN0IGJlIGRpZmZlcmVudFxuICAgKiBmcm9tIGFueSBvdGhlciBVSURzIGluIHRoZSBkZXN0aW5hdGlvbiBjaGFubmVsLlxuICAgKi9cbiAgdWlkOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU291cmNlQ2hhbm5lbEluZm8gZXh0ZW5kcyBDaGFubmVsSW5mbyB7XG4gIC8qKlxuICAgKiBUaGUgdW5pcXVlIElEIHRvIGlkZW50aWZ5IHRoZSByZWxheSBzdHJlYW0gaW4gdGhlIHNvdXJjZSBjaGFubmVsLlxuICAgKiBBIDMyLWJpdCB1bnNpZ25lZCBpbnRlZ2VyIHdpdGggYSB2YWx1ZSByYW5naW5nIGZyb20gMCB0byAoMjMyLTEpLlxuICAgKiBJZiB5b3Ugc2V0IGl0IGFzIGAwYCwgdGhlIHNlcnZlciBhc3NpZ25zIGEgcmFuZG9tIG9uZS4gVG8gYXZvaWQgVUlEIGNvbmZsaWN0cywgdGhpcyB2YWx1ZSBtdXN0IGJlIGRpZmZlcmVudFxuICAgKiBmcm9tIHRoZSBVSUQgb2YgdGhlIGN1cnJlbnQgaG9zdC5cbiAgICovXG4gIHVpZDogbnVtYmVyO1xufVxuIl19