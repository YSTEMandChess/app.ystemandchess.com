/**
 * @fileoverview added by tsickle
 * Generated from: lib/data/models/video-encoder-configuration.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * The video encoder configuration.
 *
 * This interface sets the video encoder configuration in
 * [setVideoEncoderConfiguration](https://docs.agora.io/en/Voice/API%20Reference/web/interfaces/agorartc.stream.html#setvideoencoderconfiguration).
 *
 * Depending on the OS, browser, and camera, the actual resolution, frame rate, and bitrate might be different from the set values.
 *
 * \@remark
 * - Whether 1080 resolution or above can be supported depends on the device.
 *   If the device cannot support 1080p, the actual frame rate is lower than the one listed in the table.
 *   Agora optimizes the video on low-end devices.
 * - With the update of web browsers, this table might not reflect all the supported profiles for each browser.
 *   The actual support is subject to the device and web browser version.
 * - Some versions of some web browsers might not support all the video profiles listed in the table.
 *   In this case, we recommend you use the mainstream video profiles (the ones with the _1 suffix in the above table).
 * - The Safari browser does not support modifying the video frame rate (30 fps by default).
 *   If you set a frame rate other than 30 fps on Safari, the browser may change or reject your setting.
 * - Due to limitations of some devices and browsers, the resolution you set may fail to take effect and get adjusted by
 *   the browser. In this case, billings are calculated based on the actual resolution.
 *
 * @see [Video Profile Definition](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.videoencoderconfiguration.html)
 * @record
 */
export function VideoEncoderConfiguration() { }
if (false) {
    /**
     * The video bitrate (Kbps). The value range is [1,10000000].
     *
     * We recommend setting the bitrate between 100 Kbps and 5000 Kbps. You can refer to the table below and set your bitrate.
     * @type {?|undefined}
     */
    VideoEncoderConfiguration.prototype.bitrate;
    /**
     * The video frame rate (fps).
     *
     * The value range is [1, 10000]. We recommend setting the frame rate between 5 fps and 30 fps.
     *
     * \@remark
     * - This parameter sets the local capturing video frame rate. The actual encoding frame rate depends on the device, system, and browser.
     * - When the network conditions change, the browser adjusts the encoding frame rate automatically.
     * @type {?|undefined}
     */
    VideoEncoderConfiguration.prototype.frameRate;
    /**
     * Resolution of the video.
     *
     * We recommend using common resolutions, for example:
     * - 480 x 360
     * - 640 x 480
     * - 960 x 720
     * @type {?|undefined}
     */
    VideoEncoderConfiguration.prototype.resolution;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlkZW8tZW5jb2Rlci1jb25maWd1cmF0aW9uLm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWFnb3JhLyIsInNvdXJjZXMiOlsibGliL2RhdGEvbW9kZWxzL3ZpZGVvLWVuY29kZXItY29uZmlndXJhdGlvbi5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVCQSwrQ0F5Q0M7Ozs7Ozs7O0lBbkNDLDRDQUtFOzs7Ozs7Ozs7OztJQVVGLDhDQUtFOzs7Ozs7Ozs7O0lBU0YsK0NBS0UiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSB2aWRlbyBlbmNvZGVyIGNvbmZpZ3VyYXRpb24uXG4gKlxuICogVGhpcyBpbnRlcmZhY2Ugc2V0cyB0aGUgdmlkZW8gZW5jb2RlciBjb25maWd1cmF0aW9uIGluXG4gKiBbc2V0VmlkZW9FbmNvZGVyQ29uZmlndXJhdGlvbl0oaHR0cHM6Ly9kb2NzLmFnb3JhLmlvL2VuL1ZvaWNlL0FQSSUyMFJlZmVyZW5jZS93ZWIvaW50ZXJmYWNlcy9hZ29yYXJ0Yy5zdHJlYW0uaHRtbCNzZXR2aWRlb2VuY29kZXJjb25maWd1cmF0aW9uKS5cbiAqXG4gKiBEZXBlbmRpbmcgb24gdGhlIE9TLCBicm93c2VyLCBhbmQgY2FtZXJhLCB0aGUgYWN0dWFsIHJlc29sdXRpb24sIGZyYW1lIHJhdGUsIGFuZCBiaXRyYXRlIG1pZ2h0IGJlIGRpZmZlcmVudCBmcm9tIHRoZSBzZXQgdmFsdWVzLlxuICpcbiAqIEByZW1hcmtcbiAqIC0gV2hldGhlciAxMDgwIHJlc29sdXRpb24gb3IgYWJvdmUgY2FuIGJlIHN1cHBvcnRlZCBkZXBlbmRzIG9uIHRoZSBkZXZpY2UuXG4gKiAgIElmIHRoZSBkZXZpY2UgY2Fubm90IHN1cHBvcnQgMTA4MHAsIHRoZSBhY3R1YWwgZnJhbWUgcmF0ZSBpcyBsb3dlciB0aGFuIHRoZSBvbmUgbGlzdGVkIGluIHRoZSB0YWJsZS5cbiAqICAgQWdvcmEgb3B0aW1pemVzIHRoZSB2aWRlbyBvbiBsb3ctZW5kIGRldmljZXMuXG4gKiAtIFdpdGggdGhlIHVwZGF0ZSBvZiB3ZWIgYnJvd3NlcnMsIHRoaXMgdGFibGUgbWlnaHQgbm90IHJlZmxlY3QgYWxsIHRoZSBzdXBwb3J0ZWQgcHJvZmlsZXMgZm9yIGVhY2ggYnJvd3Nlci5cbiAqICAgVGhlIGFjdHVhbCBzdXBwb3J0IGlzIHN1YmplY3QgdG8gdGhlIGRldmljZSBhbmQgd2ViIGJyb3dzZXIgdmVyc2lvbi5cbiAqIC0gU29tZSB2ZXJzaW9ucyBvZiBzb21lIHdlYiBicm93c2VycyBtaWdodCBub3Qgc3VwcG9ydCBhbGwgdGhlIHZpZGVvIHByb2ZpbGVzIGxpc3RlZCBpbiB0aGUgdGFibGUuXG4gKiAgIEluIHRoaXMgY2FzZSwgd2UgcmVjb21tZW5kIHlvdSB1c2UgdGhlIG1haW5zdHJlYW0gdmlkZW8gcHJvZmlsZXMgKHRoZSBvbmVzIHdpdGggdGhlIF8xIHN1ZmZpeCBpbiB0aGUgYWJvdmUgdGFibGUpLlxuICogLSBUaGUgU2FmYXJpIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBtb2RpZnlpbmcgdGhlIHZpZGVvIGZyYW1lIHJhdGUgKDMwIGZwcyBieSBkZWZhdWx0KS5cbiAqICAgSWYgeW91IHNldCBhIGZyYW1lIHJhdGUgb3RoZXIgdGhhbiAzMCBmcHMgb24gU2FmYXJpLCB0aGUgYnJvd3NlciBtYXkgY2hhbmdlIG9yIHJlamVjdCB5b3VyIHNldHRpbmcuXG4gKiAtIER1ZSB0byBsaW1pdGF0aW9ucyBvZiBzb21lIGRldmljZXMgYW5kIGJyb3dzZXJzLCB0aGUgcmVzb2x1dGlvbiB5b3Ugc2V0IG1heSBmYWlsIHRvIHRha2UgZWZmZWN0IGFuZCBnZXQgYWRqdXN0ZWQgYnlcbiAqICAgdGhlIGJyb3dzZXIuIEluIHRoaXMgY2FzZSwgYmlsbGluZ3MgYXJlIGNhbGN1bGF0ZWQgYmFzZWQgb24gdGhlIGFjdHVhbCByZXNvbHV0aW9uLlxuICpcbiAqIEBzZWUgW1ZpZGVvIFByb2ZpbGUgRGVmaW5pdGlvbl0oaHR0cHM6Ly9kb2NzLmFnb3JhLmlvL2VuL1ZpZGVvL0FQSSUyMFJlZmVyZW5jZS93ZWIvaW50ZXJmYWNlcy9hZ29yYXJ0Yy52aWRlb2VuY29kZXJjb25maWd1cmF0aW9uLmh0bWwpXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVmlkZW9FbmNvZGVyQ29uZmlndXJhdGlvbiB7XG4gIC8qKlxuICAgKiBUaGUgdmlkZW8gYml0cmF0ZSAoS2JwcykuIFRoZSB2YWx1ZSByYW5nZSBpcyBbMSwxMDAwMDAwMF0uXG4gICAqXG4gICAqIFdlIHJlY29tbWVuZCBzZXR0aW5nIHRoZSBiaXRyYXRlIGJldHdlZW4gMTAwIEticHMgYW5kIDUwMDAgS2Jwcy4gWW91IGNhbiByZWZlciB0byB0aGUgdGFibGUgYmVsb3cgYW5kIHNldCB5b3VyIGJpdHJhdGUuXG4gICAqL1xuICBiaXRyYXRlPzoge1xuICAgIC8qKiBUaGUgbWF4aW11bSBiaXRyYXRlLiAqL1xuICAgIG1heDogbnVtYmVyO1xuICAgIC8qKiBUaGUgbWluaW11bSBiaXRyYXRlLiAqL1xuICAgIG1pbjogbnVtYmVyO1xuICB9O1xuICAvKipcbiAgICogVGhlIHZpZGVvIGZyYW1lIHJhdGUgKGZwcykuXG4gICAqXG4gICAqIFRoZSB2YWx1ZSByYW5nZSBpcyBbMSwgMTAwMDBdLiBXZSByZWNvbW1lbmQgc2V0dGluZyB0aGUgZnJhbWUgcmF0ZSBiZXR3ZWVuIDUgZnBzIGFuZCAzMCBmcHMuXG4gICAqXG4gICAqIEByZW1hcmtcbiAgICogLSBUaGlzIHBhcmFtZXRlciBzZXRzIHRoZSBsb2NhbCBjYXB0dXJpbmcgdmlkZW8gZnJhbWUgcmF0ZS4gVGhlIGFjdHVhbCBlbmNvZGluZyBmcmFtZSByYXRlIGRlcGVuZHMgb24gdGhlIGRldmljZSwgc3lzdGVtLCBhbmQgYnJvd3Nlci5cbiAgICogLSBXaGVuIHRoZSBuZXR3b3JrIGNvbmRpdGlvbnMgY2hhbmdlLCB0aGUgYnJvd3NlciBhZGp1c3RzIHRoZSBlbmNvZGluZyBmcmFtZSByYXRlIGF1dG9tYXRpY2FsbHkuXG4gICAqL1xuICBmcmFtZVJhdGU/OiB7XG4gICAgLyoqIFRoZSBtYXhpbXVtIGZyYW1lIHJhdGUuICovXG4gICAgbWF4OiBudW1iZXI7XG4gICAgLyoqIFRoZSBtaW5pbXVtIGZyYW1lIHJhdGUuIFRoZSBTREsgdXNlcyB0aGlzIHZhbHVlIGFzIHRoZSBwcmVmZXJyZWQgZnJhbWUgcmF0ZS4gKi9cbiAgICBtaW46IG51bWJlcjtcbiAgfTtcbiAgLyoqXG4gICAqIFJlc29sdXRpb24gb2YgdGhlIHZpZGVvLlxuICAgKlxuICAgKiBXZSByZWNvbW1lbmQgdXNpbmcgY29tbW9uIHJlc29sdXRpb25zLCBmb3IgZXhhbXBsZTpcbiAgICogLSA0ODAgeCAzNjBcbiAgICogLSA2NDAgeCA0ODBcbiAgICogLSA5NjAgeCA3MjBcbiAgICovXG4gIHJlc29sdXRpb24/OiB7XG4gICAgLyoqIEhlaWdodCBvZiB0aGUgdmlkZW8uIFRoZSB2YWx1ZSByYW5nZSBpcyBbMSwxMDAwMF0uICovXG4gICAgaGVpZ2h0OiBudW1iZXI7XG4gICAgLyoqIFdpZHRoIG9mIHRoZSB2aWRlby4gVGhlIHZhbHVlIHJhbmdlIGlzIFsxLDEwMDAwXS4gKi9cbiAgICB3aWR0aDogbnVtYmVyO1xuICB9O1xufVxuIl19