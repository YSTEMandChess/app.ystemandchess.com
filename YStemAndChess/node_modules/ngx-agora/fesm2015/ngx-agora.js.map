{"version":3,"file":"ngx-agora.js","sources":["ng://ngx-agora/lib/ngx-agora.service.ts","ng://ngx-agora/lib/ngx-agora.component.ts","ng://ngx-agora/lib/ngx-agora.module.ts","ng://ngx-agora/lib/data/models/agora-client.model.ts","ng://ngx-agora/lib/data/models/agora-config.model.ts","ng://ngx-agora/lib/data/models/agora-rtc.model.ts","ng://ngx-agora/lib/data/models/audio-effect-options.model.ts","ng://ngx-agora/lib/data/models/audio-mixing-options.model.ts","ng://ngx-agora/lib/data/models/beauty-effect-options.model.ts","ng://ngx-agora/lib/data/models/channel-info.model.ts","ng://ngx-agora/lib/data/models/channel-media-error.model.ts","ng://ngx-agora/lib/data/models/channel-media-relay-configuration.model.ts","ng://ngx-agora/lib/data/models/client-config.model.ts","ng://ngx-agora/lib/data/models/desktop-capturer-source.model.ts","ng://ngx-agora/lib/data/models/inject-stream-config.model.ts","ng://ngx-agora/lib/data/models/live-transcoding.model.ts","ng://ngx-agora/lib/data/models/local-audio-stats-map.model.ts","ng://ngx-agora/lib/data/models/local-audio-stats.model.ts","ng://ngx-agora/lib/data/models/local-stream-stats.model.ts","ng://ngx-agora/lib/data/models/local-video-stats-map.model.ts","ng://ngx-agora/lib/data/models/local-video-stats.model.ts","ng://ngx-agora/lib/data/models/logger.model.ts","ng://ngx-agora/lib/data/models/media-device-info.model.ts","ng://ngx-agora/lib/data/models/media-stream-track.model.ts","ng://ngx-agora/lib/data/models/media-stream.model.ts","ng://ngx-agora/lib/data/models/remote-audio-stats-map.model.ts","ng://ngx-agora/lib/data/models/remote-audio-stats.model.ts","ng://ngx-agora/lib/data/models/remote-stream-stats.model.ts","ng://ngx-agora/lib/data/models/remote-video-stats-map.model.ts","ng://ngx-agora/lib/data/models/remote-video-stats.model.ts","ng://ngx-agora/lib/data/models/session-stats.model.ts","ng://ngx-agora/lib/data/models/stream-spec.model.ts","ng://ngx-agora/lib/data/models/stream-stats.model.ts","ng://ngx-agora/lib/data/models/stream.model.ts","ng://ngx-agora/lib/data/models/subscribe-options.model.ts","ng://ngx-agora/lib/data/models/system-stats.model.ts","ng://ngx-agora/lib/data/models/transcoding-user.model.ts","ng://ngx-agora/lib/data/models/transport-stats.model.ts","ng://ngx-agora/lib/data/models/turn-server.model.ts","ng://ngx-agora/lib/data/models/video-encoder-configuration.model.ts","ng://ngx-agora/lib/data/models/video-play-options.model.ts","ng://ngx-agora/lib/data/enums/channel-media-message.enum.ts","ng://ngx-agora/lib/data/enums/client-event.enum.ts","ng://ngx-agora/lib/data/enums/codec-type.enum.ts","ng://ngx-agora/lib/data/enums/log-level.enum.ts","ng://ngx-agora/lib/data/enums/mute-state.enum.ts","ng://ngx-agora/lib/data/enums/stream-event.enum.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport * as agoraSDK from 'agora-rtc-sdk';\n\nimport { AgoraClient } from './data/models/agora-client.model';\nimport { AgoraConfig } from './data/models/agora-config.model';\nimport { AgoraRTC, ClientConfig, MediaDeviceInfo, Stream, StreamSpec } from './data/models';\n\n/**\n * Provides access to the Agora web API, including the AgoraRTC and Client objects.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxAgoraService {\n  private static AgoraRTC: AgoraRTC = agoraSDK;\n\n  /**\n   * The local Agora.io Client object.\n   * @see [Web Client](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html)\n   */\n  client: AgoraClient;\n  /**\n   * All audio devices collected from the AgoraRTC `getDevices()` method.\n   * @see [getDevices()](https://docs.agora.io/en/Video/API%20Reference/web/globals.html#getdevices)\n   *\n   */\n  audioDevices: MediaDeviceInfo[] = [];\n  /**\n   * All video devices collected from the AgoraRTC `getDevices()` method.\n   * @see [getDevices()](https://docs.agora.io/en/Video/API%20Reference/web/globals.html#getdevices)\n   */\n  videoDevices: MediaDeviceInfo[] = [];\n  /**\n   * Instance reference to the `static` AgoraRTC library object.\n   */\n  AgoraRTC: AgoraRTC = NgxAgoraService.AgoraRTC;\n\n  constructor(@Inject('config') private config: AgoraConfig) {\n    if (!this.checkSystemRequirements()) {\n      this.AgoraRTC.Logger.error('Web RTC is not supported in this browser');\n    } else {\n      this.collectDevices();\n    }\n  }\n\n  /**\n   * Checks the Web Browser Compatibility\n   *\n   * This method checks the compatibility between the Web SDK and the current web browser.\n   * Use this method before calling createClient to check the compatibility between the system and the web browser.\n   *\n   * - true: The Web SDK is compatible with the current web browser.\n   * - false: The Web SDK is not compatible with the current web browser.\n   *\n   * @remark\n   * Agora has yet to conduct comprehensive tests on Chromium kernel browsers, such as QQ and 360.\n   * Agora will gradually achieve compatibility on most mainstream browsers in subsequent versions of the Web SDK.\n   */\n  checkSystemRequirements(): boolean {\n    return this.AgoraRTC.checkSystemRequirements();\n  }\n\n  /**\n   * Creates a Client object.\n   *\n   * This method creates and returns a client object. You can only call this method once each call session.\n   *\n   * @param config\n   * Defines the property of the client, see\n   * [ClientConfig](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.clientconfig.html) for details.\n   * @param [autoInitializing=true] Ngx-agora by default automatically initializes the client with the provided `AppID` after it is created.\n   * Set this property to `false` to disable this functionality, if you are going to call `init()` separately\n   * (after creating the client only).\n   * @param [onSuccess] The callback when the method succeeds.\n   * @param [onFailure] The callback when the method fails.\n   *\n   * @example\n   * AgoraRTC.createClient(config);\n   */\n  createClient(\n    config: ClientConfig,\n    autoInitializing: boolean = true,\n    onSuccess?: () => void,\n    onFailure?: (error: Error) => void\n  ): AgoraClient {\n    this.client = this.AgoraRTC.createClient(config);\n    if (autoInitializing) {\n      this.init(this.config.AppID, onSuccess, onFailure);\n    }\n    return this.client;\n  }\n\n  /**\n   * This method creates and returns a stream object.\n   *\n   * @example\n   * AgoraRTC.createStream(spec)\n   *\n   * @param spec Defines the properties of the stream\n   * @see [StreamSpec](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.streamspec.html) for details.\n   */\n  createStream(spec: StreamSpec): Stream {\n    if (!spec.microphoneId && this.audioDevices && this.audioDevices.length) {\n      const defaultMic = this.audioDevices[0].deviceId;\n      spec.microphoneId = defaultMic;\n    }\n    if (!spec.cameraId && this.videoDevices && this.videoDevices.length) {\n      const defaultCamera = this.videoDevices[0].deviceId;\n      spec.cameraId = spec.cameraId || defaultCamera;\n    }\n\n    return this.AgoraRTC.createStream(spec);\n  }\n\n  /**\n   * Initializes the Client object.\n   *\n   * @param appId Pass in the App ID for your project.\n   * ASCII characters only, and the string length must be greater than 0 and less than 256 bytes.\n   * To get your App ID,\n   * @see [Get an App ID](https://docs.agora.io/en/Video/web_prepare?platform=Web#create-an-agora-account-and-get-an-app-id).\n   * @param [onSuccess] The callback when the method succeeds.\n   * @param [onFailure] The callback when the method fails.\n   *\n   * @example\n   * this.ngxAgoraService.client.init(appId, () => {\n   * console.log(\"client initialized\");\n   * // Join a channel\n   * //……\n   * }, error => {\n   *     console.log(\"client init failed \", err);\n   *     // Error handling\n   * });\n   */\n  init(appId: string, onSuccess?: () => void, onFailure?: (error: Error) => void): void {\n    this.client.init(appId, onSuccess, onFailure);\n  }\n\n  /**\n   * Attempts to automatically collect audio and video devices from the AgoraRTC `getDevices()` method.\n   */\n  private collectDevices(): void {\n    this.AgoraRTC.getDevices((devices: MediaDeviceInfo[]) => {\n      const audioDevices = devices.filter(device => {\n        return device.kind === 'audioinput' && device.deviceId !== 'default';\n      });\n\n      const videoDevices = devices.filter(device => {\n        return device.kind === 'videoinput' && device.deviceId !== 'default';\n      });\n\n      this.audioDevices = audioDevices;\n      this.videoDevices = videoDevices;\n    });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-ngx-agora',\n  template: `\n    <p>\n      ngx-agora works!\n    </p>\n  `,\n  styles: []\n})\nexport class NgxAgoraComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { AgoraConfig } from './data/models/agora-config.model';\nimport { NgxAgoraComponent } from './ngx-agora.component';\nimport { NgxAgoraService } from './ngx-agora.service';\n\n@NgModule({\n  declarations: [NgxAgoraComponent],\n  exports: [NgxAgoraComponent]\n})\nexport class NgxAgoraModule {\n  static forRoot(config: AgoraConfig): ModuleWithProviders<RouterModule> {\n    return {\n      ngModule: NgxAgoraModule,\n      providers: [NgxAgoraService, { provide: 'config', useValue: config }]\n    };\n  }\n}\n","import { ClientEvent } from '../enums/client-event.enum';\nimport { ConnectionState } from '../types/connection-state.type';\nimport { ChannelMediaError } from './channel-media-error.model';\nimport { ChannelMediaRelayConfiguration } from './channel-media-relay-configuration.model';\nimport { InjectStreamConfig } from './inject-stream-config.model';\nimport { LiveTranscoding } from './live-transcoding.model';\nimport { LocalAudioStatsMap } from './local-audio-stats-map.model';\nimport { LocalVideoStatsMap } from './local-video-stats-map.model';\nimport { RemoteAudioStatsMap } from './remote-audio-stats-map.model';\nimport { RemoteVideoStatsMap } from './remote-video-stats-map.model';\nimport { SessionStats } from './session-stats.model';\nimport { Stream } from './stream.model';\nimport { SubscribeOptions } from './subscribe-options.model';\nimport { SystemStats } from './system-stats.model';\nimport { TransportStats } from './transport-stats.model';\nimport { TurnServer } from './turn-server.model';\n\n/**\n * The Client object returned by the [createClient](https://docs.agora.io/en/Video/API%20Reference/web/globals.html#createclient)\n * method provides access to much of the core AgoraRTC functionality.\n *\n * @see [Web Client](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html)\n */\nexport interface AgoraClient {\n  /**\n   * Injects an Online Media Stream to a Live Broadcast\n   *\n   * If this method is called successfully, the server pulls the voice or video stream and\n   * injects it into a live channel. This is applicable to scenarios where all of the audience members\n   * in the channel can watch a live show and interact with each other.\n   *\n   *\n   * This method call triggers the following callbacks:\n   *\n   * - On the local client:\n   *   - `Client.on(\"streamInjectedStatus\")`, with the state of injecting the online stream.\n   *   - `Client.on(\"stream-added\")` and `Client.on(\"peer-online\")` (uid: 666), if the online media stream is injected into the channel.\n   *\n   * - On the remote client:\n   *   - `Client.on(\"stream-added\")` and `Client.on(\"peer-online\")` (uid: 666), if the online media stream is injected into the channel.\n   *\n   * @remarks\n   * You can only inject one online media stream into the same channel at the same time.\n   * Ensure that you [enable the RTMP Converter service](https://docs.agora.io/en/Video/cdn_streaming_web#prerequisites)\n   * before using this function.\n   *\n   * @param url URL address of the live streaming.\n   * ASCII characters only, and the string length must be greater than 0 and less than 256 bytes.\n   * Valid protocols are RTMP, HLS, and HTTP-FLV.\n   *\n   * - Supported FLV audio codec type: AAC.\n   * - Supported FLV video codec type: H.264 (AVC).\n   *\n   * @param config Configuration of the inject stream, see\n   * [InjectStreamConfig](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.injectstreamconfig.html) for details.\n   *\n   * @see [Inject an Online Media Stream](https://docs.agora.io/en/Interactive%20Broadcast/inject_stream_web?platform=Web) for details.\n   */\n  addInjectStreamUrl: (url: string, config: InjectStreamConfig) => void;\n  /**\n   * Configures the CDN Live Streaming\n   *\n   * @deprecated Agora recommends using the following methods instead:\n   *  - [startLiveStreaming](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#startlivestreaming)\n   *  - [setLiveTranscoding](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#setlivetranscoding)\n   *  - [stopLiveStreaming](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#stoplivestreaming)\n   * @description\n   * This method configures the CDN live streaming before joining a channel.\n   * Call [configPublisher](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#configpublisher) before\n   * [Client.join](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#join).\n   * @example\n   * client.configPublisher({\n   *  width: 360,\n   *  height: 640,\n   *  framerate: 30,\n   *  bitrate: 500,\n   *  publishUrl: \"rtmp://xxx/xxx/\"\n   * });\n   */\n  configPublisher: (\n    width: number,\n    height: number,\n    framerate: number,\n    bitrate: number,\n    publisherUrl: string\n  ) => void;\n  /**\n   * Disables dual streams.\n   *\n   * @example\n   * client.disableDualStream(() => {\n   *   console.log(\"Disable dual stream success!\")\n   * }, err => {\n   *   console.log(err)\n   * })\n   */\n  disableDualStream: (\n    onSuccess?: () => any,\n    onFailure?: (error: Error) => any\n  ) => void;\n  /**\n   * Enables the SDK to report the active remote users who are speaking and their volume regularly.\n   *\n   * If this method is enabled, the SDK will return the volumes every two seconds, regardless of whether there are active speakers.\n   *\n   * @remark\n   * If you have multiple web pages running the Web SDK, this function might not work.\n   *\n   * @example\n   * client.enableAudioVolumeIndicator(); // Triggers the \"volume-indicator\" callback event every two seconds.\n   * client.on(\"volume-indicator\", evt => {\n   *   evt.attr.forEach((volume, index) => {\n   *     console.log(`#${index} UID ${volume.uid} Level ${volume.level}`);\n   *   });\n   * });\n   */\n  enableAudioVolumeIndicator: () => void;\n  /**\n   * Enables the dual-stream mode on the publisher side.\n   *\n   * Dual streams are a hybrid of a high-video stream and a low-video stream:\n   * - High-video stream: high bitrate, high resolution\n   * - Low-video stream: low bitrate, low resolution\n   *\n   * @example\n   * client.enableDualStream(() => {\n   *   console.log(\"Enable dual stream success!\")\n   * }, err => {\n   *   console,log(err)\n   * })\n   *\n   * @remark\n   * This method does not apply to the following scenarios:\n   * - The stream is created by defining the audioSource and videoSource properties.\n   * - Audio-only mode (audio: true, video: false)\n   * - Safari browser on iOS\n   * - Screen-sharing scenario\n   */\n  enableDualStream: (\n    onSuccess?: () => any,\n    onFailure?: (error: Error) => any\n  ) => void;\n  /**\n   * Enumerates the available video input devices, such as cameras.\n   *\n   * If this method succeeds, the SDK returns a list of video input devices in an array of MediaDeviceInfo objects.\n   */\n  getCameras: (callback: (devices: MediaDeviceInfo[]) => any) => void;\n  /**\n   * This method returns the state of the connection between the SDK and Agora's edge server.\n   *\n   * @description\n   * The connection state:\n   *  - DISCONNECTED: The SDK is disconnected from Agora's edge server.\n   *    This is the initial state before\n   *    [Client.join](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#join).\n   *    The SDK also enters this state after the app calls\n   *    [Client.leave](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#leave).\n   *  - CONNECTING: The SDK is connecting to Agora's edge server. The SDK enters this state when\n   *    calling [Client.join](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#join)\n   *    or reconnecting to Agora's edge server automatically after the connection is lost.\n   *  - CONNECTED: The SDK is connected to Agora's edge server and joins a channel. You can now publish or\n   *    subscribe to a stream in the channel.\n   *  - DISCONNECTING: The SDK is disconnecting from Agora's edge server. The SDK enters this state when calling\n   *    [Client.leave](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#leave).\n   */\n  getConnectionState: () => ConnectionState;\n  /**\n   * Retrieves the Audio Statistics of the Local Stream\n   *\n   * This method retrieves the audio statistics of the published stream,\n   * including audio codec type, sampling rate, bitrate, and so on.\n   *\n   * @description\n   *  - Some of the statistics are calculated after the stream-published event, which may take at most 3 seconds.\n   * - This method supports the Chrome browser only.\n   * @example\n   * client.getLocalAudioStats((localAudioStats) => {\n   *  Object.keys(localAudioStats).forEach(uid => {\n   *   console.log(`Audio CodecType from ${uid}: ${localAudioStats[uid].CodecType}`);\n   *   console.log(`Audio MuteState from ${uid}: ${localAudioStats[uid].MuteState}`);\n   *   console.log(`Audio RecordingLevel from ${uid}: ${localAudioStats[uid].RecordingLevel}`);\n   *   console.log(`Audio SamplingRate from ${uid}: ${localAudioStats[uid].SamplingRate}`);\n   *   console.log(`Audio SendBitrate from ${uid}: ${localAudioStats[uid].SendBitrate}`);\n   *   console.log(`Audio SendLevel from ${uid}: ${localAudioStats[uid].SendLevel}`);\n   *  })\n   * });\n   */\n  getLocalAudioStats: (callback: (stats: LocalAudioStatsMap) => any) => void;\n  /**\n   * Retrieves the Video Statistics of the Local Stream\n   *\n   * This method retrieves the video statistics of the published stream, including video resolution, bitrate, frame rate, and so on.\n   *\n   * @description\n   * Some of the statistics are calculated after the stream-published event, which may take at most 3 seconds.\n   * This method supports the Chrome browser only.\n   */\n  getLocalVideoStats: (callback: (stats: LocalVideoStatsMap) => any) => void;\n  /**\n   * Gets the Statistics of the System Network\n   * @deprecated from v2.5.1, use getTransportStats instead.\n   *\n   * This method gets the statistics of the browser's local network.\n   * Currently only the network type information is provided, see NetworkType.\n   *\n   * @description\n   * Chrome 61+ is required for this function, and the compatibility is not guaranteed. See Network Information API for details.\n   */\n  getNetworkStats: (callback: (stats: any) => any) => void;\n  /**\n   * Enumerates Audio Output Devices\n   *\n   * This method enumerates the available audio output devices, such as speakers.\n   * If this method succeeds, the SDK returns a list of audio output devices in an array of\n   * [MediaDeviceInfo](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.mediadeviceinfo.html) objects.\n   */\n  getPlayoutDevices: (callback: (devices: MediaDeviceInfo[]) => any) => void;\n  /**\n   * Enumerates Audio Input Devices\n   *\n   * This method enumerates the available audio input devices, such as microphones.\n   * If this method succeeds, the SDK returns a list of audio input devices in an array of MediaDeviceInfo objects.\n   */\n  getRecordingDevices: (callback: (devices: MediaDeviceInfo[]) => any) => void;\n  /**\n   * Retrieves the Audio Statistics of the Remote Stream\n   * This method retrieves the audio statistics of the remote stream, including audio codec type, packet loss rate, bitrate, and so on.\n   *\n   * @description\n   * The statistics are calculated after the `stream-subscribed` event, which may take at most 3 seconds.\n   * This method supports the Chrome browser only.\n   */\n  getRemoteAudioStats: (callback: (stats: RemoteAudioStatsMap) => void) => void;\n  /**\n   * Retrieves the Video Statistics of the Remote Stream\n   * This method retrieves the video statistics of the remote stream, including packet loss rate, video bitrate, frame rate, and so on.\n   *\n   * @description\n   * The statistics are calculated after the `stream-subscribed` event, which may take at most 3 seconds.\n   * This method supports the Chrome browser only.\n   */\n  getRemoteVideoStats: (callback: (stats: RemoteVideoStatsMap) => void) => void;\n  /**\n   * Gets the Statistics of the Session\n   * This method gets the statistics of the session connection.\n   *\n   * @description\n   * This method should be called after joining the channel, and it may take at most 3 seconds to retrieve the statistics.\n   * This method supports the Chrome browser only.\n   */\n  getSessionStats: (callback: (stats: SessionStats) => void) => void;\n  /**\n   * Gets the Statistics of the System\n   *\n   * This method gets the statistics of the system.\n   *\n   * Currently only the battery level information is provided.\n   * @see [BatteryLevel](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.systemstats.html#batterylevel).\n   *\n   * @description\n   * This feature is experimental.\n   * @see [Battery Status API](https://developer.mozilla.org/en-US/docs/Web/API/Battery_Status_API) for browser compatibility.\n   */\n  getSystemStats: (callback: (stats: SystemStats) => void) => void;\n  /**\n   * Gets the Statistics of the Transmission\n   * This method gets the statistics of the transmission quality to Agora service.\n   *\n   * @description\n   * Calculation of the statistics may take at most 3 seconds.\n   * This method supports the Chrome browser only.\n   */\n  getTransportStats: (callback: (stats: TransportStats) => void) => void;\n  /**\n   * Initializes the Client object.\n   *\n   * @param appId Pass in the App ID for your project.\n   * ASCII characters only, and the string length must be greater than 0 and less than 256 bytes.\n   * To get your App ID,\n   * @see [Get an App ID](https://docs.agora.io/en/Video/web_prepare?platform=Web#create-an-agora-account-and-get-an-app-id).\n   * @param [onSuccess] The callback when the method succeeds.\n   * @param [onFailure] The callback when the method fails.\n   *\n   * @example\n   * client.init(appId, () => {\n   * console.log(\"client initialized\");\n   * // Join a channel\n   * //……\n   * }, err => {\n   *     console.log(\"client init failed \", err);\n   *     // Error handling\n   * });\n   */\n  init: (\n    appId: string,\n    onSuccess?: () => void,\n    onFailure?: (error: Error) => void\n  ) => void;\n  /**\n   * Joins an AgoraRTC Channel\n   * This method joins an AgoraRTC channel.\n   *\n   * @description\n   * All users in the same channel should have the same type (number or string) of uid.\n   *  - If you use a number as the user ID, it should be a 32-bit unsigned integer with a value ranging from 0 to (232-1).\n   *  - If you use a string as the user ID, the maximum length is 255 characters.\n   *\n   * @param tokenOrKey\n   * - Low security requirements: Pass null as the parameter value.\n   * - High security requirements: Pass the string of the Token or Channel Key as the parameter value. See Use Security Keys for details.\n   * @param channel\n   * A string that provides a unique channel name for the Agora session. The length must be within 64 bytes. Supported character scopes:\n   * - 26 lowercase English letters a-z\n   * - 26 uppercase English letters A-Z\n   * - 10 numbers 0-9\n   * - Space\n   * - \"!\", \"#\", \"$\", \"%\", \"&\", \"(\", \")\", \"+\", \"-\", \":\", \";\", \"<\", \"=\", \".\", \">\", \"?\", \"@\", \"[\", \"]\", \"^\", \"_\", \"{\", \"}\", \"|\", \"~\", \",\"\n   * @param uid The user ID, an integer or a string, ASCII characters only. Ensure this ID is unique.\n   * If you set the uid to null, the server assigns one and returns it in the onSuccess callback.\n   * @param [onSuccess] The callback when the method succeeds. The server returns the uid which represents the identity of the user.\n   * @param [onFailure] The callback when the method fails.\n   * @example\n   * client.join(<token>, \"1024\", null, uid => {\n   *    console.log(\"client\" + uid + \"joined channel\");\n   *    // Create a local stream\n   *    //……\n   * }, err => {\n   *    console.error(\"client join failed \", err);\n   *    // Error handling\n   * });\n   *\n   */\n  join: (\n    tokenOrKey: string | null,\n    channel: string | null,\n    uid: number | string | null,\n    onSuccess?: (uid: number | string) => void,\n    onFailure?: (error: Error) => void\n  ) => void;\n  /**\n   * Leaves an AgoraRTC Channel\n   *\n   * This method enables a user to leave a channel.\n   *\n   * @param [onSuccess] The callback when the method succeeds.\n   * @param [onFailure] The callback when the method fails.\n   * @example\n   * client.leave(_ => {\n   *     console.log(\"client leaves channel\");\n   *     //……\n   * }, err => {\n   *     console.log(\"client leave failed \", err);\n   *     //error handling\n   * });\n   */\n  leave: (onSuccess?: () => void, onFailure?: (error: Error) => void) => void;\n  /**\n   * This method removes the events attached by the Client.on() method.\n   *\n   * @example\n   * client.on(\"stream-published\", function processStreamPublished(evt) {\n   *  console.log(\"Stream Published\");\n   *  evt.stream.play(\"divId\");\n   *  client.off(\"stream-published\", processStreamPublished);\n   * })\n   */\n  off: (eventType: ClientEvent, callback: (evt: any) => void) => void;\n  /**\n   * Occurs when an Agora.io event connected to the local client is received from the SDK.\n   *\n   * @see [On](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#on)\n   * for all variations of this core function.\n   */\n  on: (event: ClientEvent, callback: (evt: any) => void) => void;\n  /**\n   * Publishes a Local Stream\n   * This method publishes a local stream to the SD-RTN.\n   *\n   * @description\n   * In a live broadcast, whoever calls this API is the host.\n   *\n   * @param stream Stream object, which represents the local stream.\n   * @param [onFailure] The callback when the method fails.\n   * @example\n   * client.publish(stream, err => {\n   *    console.log(err);\n   *    //……\n   * })\n   */\n  publish: (stream: Stream, onFailure?: (error: Error) => void) => void;\n  /**\n   * Removes the Injected Stream\n   *\n   * This method removes the HTTP/HTTPS URL address (added by addInjectStreamUrl) from the live broadcast.\n   *\n   * @param url URL address of the live streaming. ASCII characters only, and the string\n   * length must be greater that 0 and less than 256 bytes.\n   */\n  removeInjectStreamUrl: (url: string) => void;\n  /**\n   * This method renews your channel key.\n   *\n   * Once the Channel Key schema is enabled, the key expires after a certain period of time.\n   * When the onFailure callback reports the error DYNAMIC_KEY_TIMEOUT, the application should renew the\n   * Channel Key by calling this method. Not doing so will result in SDK disconnecting with the server.\n   */\n  renewChannelKey: (\n    key: string,\n    onSuccess?: () => void,\n    onFailure?: (error: Error) => void\n  ) => void;\n  /**\n   * This method renews your token.\n   *\n   * Once the Token schema is enabled, the token expires after a certain period of time.\n   * In case of the `onTokenPrivilegeWillExpire` or `onTokenPrivilegeDidExpire` callback events, the application\n   * should renew the Token by calling this method. Not doing so will result in SDK disconnecting with the server.\n   *\n   * @param token Specifies the renewed Token.\n   */\n  renewToken: (token: string) => void;\n  /**\n   * Sets the role of the user.\n   *\n   * This method is applicable only to the live mode.\n   * Sets the role of the user such as a host or an audience (default), before joining a channel.\n   * This method can be used to switch the user role after the user joins a channel.\n   *\n   * In live mode ([mode](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.clientconfig.html#mode) is set as live):\n   * - Before joining the channel, you can call this method to set the role.\n   * - After joining the channel, you can call this method to switch the role:\n   *   When you call [publish](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#publish),\n   *   the user role switches to host; when you call\n   *   [unpublish](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#unpublish),\n   *   the user role switches to audience.\n   *   After calling [publish](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#publish),\n   *   if you call this method and set the user role as audience,\n   *   [unpublish](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#unpublish) is called automatically.\n   *\n   * In communication mode\n   * ([mode](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.clientconfig.html#mode) set as `rtc`),\n   * this method does not take effect. All users are host by default.\n   *\n   * @param role User role in a live broadcast:\n   * - \"audience\": Audience, the default role. An audience can only receive streams.\n   * - \"host\": Host. A host can both send and receive streams.\n   *\n   * @example\n   * client.setClientRole('host', _ => {\n   *    console.log(\"setHost success\");\n   *  }, e => {\n   *    console.log(\"setHost failed\", e);\n   *  })\n   */\n  setClientRole: (\n    role: 'audience' | 'host',\n    callback?: (error: Error) => void\n  ) => void;\n  /**\n   * This method sets the encryption mode.\n   *\n   * @description\n   * Ensure that you call this API before\n   * [Client.join](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#join).\n   *\n   * @param encryptionMode\n   * - aes-128-xts: Sets the encryption mode as AES128XTS.\n   * - aes-256-xts: Sets the encryption mode as AES256XTS.\n   * - aes-128-ecb: Sets the encryption mode as AES128ECB.\n   */\n  setEncryptionMode: (\n    encryptionMode: 'aes-128-xts' | 'aes-256-xts' | 'aes-128-ecb'\n  ) => void;\n  /**\n   * This method enables the built-in encryption.\n   *\n   * @description\n   * Ensure that you call this API before\n   * [Client.join](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#join).\n   *\n   * @param password\n   * - The encryption password. ASCII characters only, and the string length must be greater than 0 and less than 256 bytes.\n   */\n  setEncryptionSecret: (password: string) => void;\n  /**\n   * This method sets the video layout and audio for CDN live.\n   *\n   * @description\n   * Call [setLiveTranscoding](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#setlivetranscoding)\n   * after [createStream](https://docs.agora.io/en/Video/API%20Reference/web/globals.html#createstream).\n   * For details, see [Push Streams to the CDN](https://docs.agora.io/en/Video/push_stream_web).\n   */\n  setLiveTranscoding: (coding: LiveTranscoding) => void;\n  /**\n   * Sets the Low-video Stream Parameter\n   *\n   * If you enabled the dual-stream mode by calling\n   * [Client.enableDualStream](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#enabledualstream),\n   * use this method to set the low-video stream profile.\n   * If you do not set the low-video stream profile, the SDK will assign default values based on your stream video profile.\n   *\n   * @description\n   * - As different web browsers have different restrictions on the video profile, the parameters you set\n   *   may fail to take effect. The Firefox browser has a fixed frame rate of 30 fps, therefore the frame\n   *   rate settings do not work on the Firefox browser.\n   * - Due to limitations of some devices and browsers, the resolution you set may fail to take effect and\n   *   get adjusted by the browser. In this case, billings will be calculated based on the actual resolution.\n   * - Call [Client.join](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#join) before using this method.\n   * - Screen sharing supports the high-video stream only.\n   *\n   * @see [setLowStreamParameter](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#setlowstreamparameter)\n   */\n  setLowStreamParameter: (param: {\n    bitrate?: number;\n    framerate?: number;\n    height?: number;\n    width?: number;\n  }) => void;\n  /**\n   * Deploys the Nginx Server\n   *\n   * Use this method to deploy the Nginx server.\n   *\n   * @description\n   * Ensure that you call this API before\n   * [Client.join](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#join).\n   * Proxy services by different service providers may result in slow performance if you are using the Firefox browser.\n   * Therefore, Agora recommends using the same service provider for the proxy services. If you use different service providers,\n   * Agora recommends not using the Firefox browser.\n   *\n   * @param proxyServer Your Nginx server domain name. ASCII characters only, and the string length\n   * must be greater than 0 and less than 256 bytes.\n   */\n  setProxyServer: (proxyServer: string) => void;\n  /**\n   * Sets the Remote Video-stream Type\n   * When a remote user sends dual streams, this method decides on which stream to receive on the subscriber side.\n   * If this method is not used, the subscriber receives the high-video stream.\n   *\n   * @description\n   * As not all web browsers are compatible with dual streams, Agora does not recommend developers setting the\n   * resolution of the low-video stream.\n   *\n   * Some web browsers may not be fully compatible with dual streams:\n   * @see [Table](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#setremotevideostreamtype)\n   *\n   * @param stream The remote video stream object.\n   * @param streamType Sets the remote video stream type. The following lists the video-stream types:\n   * - 0: High-bitrate, high-resolution video stream.\n   * - 1: Low-bitrate, low-resolution video stream.\n   *\n   * @example\n   * switchStream = function (){\n   *   if (highOrLow === 0) {\n   *     highOrLow = 1\n   *     console.log(\"Set to low\");\n   *   }\n   *   else {\n   *     highOrLow = 0\n   *     console.log(\"Set to high\");\n   *   }\n   *\n   *   client.setRemoteVideoStreamType(stream, highOrLow);\n   * }\n   */\n  setRemoteVideoStreamType: (stream: Stream, streamType: 0 | 1) => void;\n  /**\n   * Use this method to set stream fallback option on the receiver.\n   *\n   * Under poor network conditions, the SDK can choose to subscribe to the low-video stream or only the audio stream.\n   *\n   * @description\n   * This method can only be used when the publisher has enabled the dual-stream mode by\n   * [enableDualStream](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#enabledualstream).\n   *\n   * @param stream The remote stream object.\n   * @param fallbackType The fallback option:\n   * - 0: Disable the fallback.\n   * - 1: (Default) Automatically subscribe to the low-video stream under poor network.\n   * - 2: Under poor network, the SDK may subscribe to the low-video stream (of lower resolution and lower bitrate) first,\n   * but if the network still does not allow displaying the video, the SDK will receive audio only.\n   *\n   * @example\n   * // The sender side, after publishing the high stream\n   *  client.enableDualStream();\n   *\n   *  // The receiver side, set the fallback option as 2\n   *  client.setStreamFallbackOption(remoteStream, 2);\n   *\n   */\n  setStreamFallbackOption: (stream: Stream, fallbackType: 0 | 1 | 2) => void;\n  /**\n   * Deploys the TURN Server.\n   *\n   * @description\n   * Ensure that you call this API before\n   * [Client.join](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#join).\n   *\n   * @see [setTurnServer](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#setturnserver)\n   */\n  setTurnServer: (turnServer: TurnServer) => void;\n  /**\n   * Starts relaying media streams across channels.\n   *\n   * After this method call, the SDK triggers the following callbacks:\n   *\n   * - Client.on(`\"channel-media-relay-state\"`), which reports the state and error code of the media stream relay.\n   *  - If the media stream relay starts successfully, this callback returns `state` 2 and `code` 0.\n   *  - If the media stream relay fails, this callback returns `state` 3. Refer to `code` for the error code and call this method again.\n   *\n   * - Client.on(`\"channel-media-relay-event\"`), which reports the events of the media stream relay.\n   *  - If the media stream relay starts successfully, this callback returns `code` 4, reporting that the\n   *    SDK starts relaying the media stream to the destination channel.\n   *\n   * @remark\n   * - Contact sales-us＠agora.io to enable this function.\n   * - We do not support string user IDs in this API.\n   * - Call this method only after joining a channel.\n   * - In a live-broadcast channel, only a host can call this method.\n   * - To call this method again after it succeeds, you must call stopChannelMediaRelay to quit the current relay.\n   *\n   * @since 3.0.0\n   */\n  startChannelMediaRelay: (\n    config: ChannelMediaRelayConfiguration,\n    callback: (error?: ChannelMediaError) => void\n  ) => void;\n  /**\n   * This method starts a live stream.\n   *\n   * @description\n   * Call [startLiveStreaming](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#startlivestreaming)\n   * after [createStream](https://docs.agora.io/en/Video/API%20Reference/web/globals.html#createstream).\n   *\n   * @param url URL address for the live stream. ASCII characters only, and\n   * the string length must be greater than 0 and less than 256 bytes.\n   * @param [enableTranscoding] Marks whether to enable live transcoding.\n   * If set as true, setLiveTranscoding must be called before this method.\n   *\n   * @see [Push Streams to the CDN](https://docs.agora.io/en/Video/push_stream_web).\n   */\n  startLiveStreaming: (url: string, enableTranscoding?: boolean) => void;\n  /**\n   * Enables Cloud Proxy.\n   *\n   * This method must be called before joining the channel or after leaving the channel.\n   *\n   * To use the cloud proxy service, some extra settings are needed, see\n   * [Use Cloud Proxy](https://docs.agora.io/en/Interactive%20Broadcast/cloud_proxy_web?platform=Web) for details.\n   */\n  startProxyServer: () => void;\n  /**\n   * Stops the media stream relay. Once the relay stops, the user leaves all the destination channels.\n   *\n   * After this method call, the SDK triggers the `Client.on(\"channel-media-relay-state\")` callback.\n   *\n   * - If the relay stops, the callback returns `state` 0.\n   * - If the relay fails to stop, the callback returns `state` 3 and `code` 2 or 8. The failure is usually due to poor network conditions.\n   *   You can call [Client.leave](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#leave)\n   *   to leave the channel and stop the relay.\n   *\n   * @since 3.0.0\n   * @example\n   * stopChannelMediaRelay: () => {\n   *  client.stopChannelMediaRelay(e => {\n   *    if(e) {\n   *      utils.notification(`stopChannelMediaRelay failed: ${JSON.stringify(e)}`);\n   *    } else {\n   *      utils.notification(`stopChannelMediaRelay success`);\n   *    }\n   *  });\n   * }\n   *\n   * @param callback The result of stopping the media stream relay.\n   */\n  stopChannelMediaRelay: (\n    callback: (error?: ChannelMediaError) => void\n  ) => void;\n  /**\n   * This method stops and deletes the live streaming.\n   * When the live stream stops, the SDK triggers the `Client.on(\"liveStreamingStopped\")` callback.\n   *\n   * @param url URL address of the live streaming. ASCII characters only, and\n   * the string length must be greater than 0 and less than 256 bytes.\n   */\n  stopLiveStreaming: (url: string) => void;\n  /**\n   * Disables Cloud Proxy.\n   *\n   * This method must be called before joining the channel or after leaving the channel.\n   *\n   * This method disables all proxy settings, including those set by\n   * [setProxyServer](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#setproxyserver) and\n   * [setTurnServer](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#setturnserver).\n   */\n  stopProxyServer: () => void;\n  /**\n   * This method enables a user to subscribe to a remote stream.\n   *\n   * After the user subscribes to a remote stream, the SDK triggers the `Client.on(\"stream-subscribed\")` callback.\n   * If the remote stream contains an audio track, the SDK also triggers the `Client.on(\"first-audio-frame-decode\")` callback;\n   * if the remote stream contains a video track, the SDK also triggers the `Client.on(\"first-video-frame-decode\")` callback.\n   *\n   * @example\n   * client.subscribe(stream, err => {\n   *    console.error(\"stream subscribe failed\", err);\n   *    //……\n   * });\n   *\n   * Advanced\n   *\n   * This method can be called multiple times for a single remote stream,\n   * and enables you to switch between receiving/not receiving the video or audio data flexibly.\n   *\n   * @example\n   * // Initially, subscribe to the stream and receive only the video data\n   * client.subscribe(stream, {video: true, audio: false});\n   *\n   * // After a while, switch to receiving only the audio data\n   * client.subscribe(stream, {video: false, audio: true});\n   *\n   * @remarks\n   * - video and `audio` cannot be set as `false` at the same time. If you need to stop subscribing to the stream,\n   * call [Client.unsubscribe](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#unsubscribe) instead.\n   * - Safari does not support independent subscription. Set `options` as `null` for Safari,\n   * otherwise the `SAFARI_NOT_SUPPORTED_FOR_TRACK_SUBSCRIPTION` error occurs.\n   *\n   * @param stream Stream object, which represents the remote stream.\n   * @param [options] Sets whether to receive the video or audio data independently by the `video` and `audio` parameters.\n   * @param [onFailure] The callback when the method fails. The following are common errors:\n   * - `\"SAFARI_NOT_SUPPORTED_FOR_TRACK_SUBSCRIPTION\"`: Safari does not support independent subscription.\n   * - `\"INVALID_OPERATION\"`: The user is not in the channel, possibly because the user has not\n   *    joined the channel or the connection is interrupted.\n   * - `\"SUBSCRIBE_STREAM_FAILED\"`: The subscription fails, usually because the SDK has disconnected\n   *    from the Agora server when subscribing to the stream.\n   * - `\"PEERCONNECTION_FAILED\"`: Fails to establish the media transport channel.\n   */\n  subscribe: (\n    stream: Stream,\n    options?: SubscribeOptions,\n    onFailure?: (error: Error) => void\n  ) => void;\n  /**\n   * Unpublishes the Local Stream.\n   *\n   * When the stream is unpublished, the `Client.on(\"stream-removed\")` callback is triggered on the remote client.\n   *\n   * @param stream Stream object, which represents the local stream.\n   *\n   * @example\n   * client.unpublish(stream, err => {\n   *    console.log(err);\n   *    //……\n   * })\n   *\n   * @remarks\n   * In a live broadcast, the user role of a host switches to audience after unpublishing, and\n   * the `Client.on(\"peer-leave\")` callback is triggered on the remote client.\n   */\n  unpublish: (stream: Stream, onFailure?: (error: Error) => void) => void;\n  /**\n   * Unsubscribes from a Remote Stream.\n   *\n   * @param stream Stream object, which represents the remote stream.\n   *\n   * @example\n   * client.unsubscribe(stream, err => {\n   *   console.log(err);\n   *   //……\n   * })\n   *\n   */\n  unsubscribe: (stream: Stream, onFailure?: (error: Error) => void) => void;\n  /**\n   * Updates the channels for media stream relay.\n   *\n   * After the channel media relay starts, if you want to relay the media stream to more channels,\n   * or leave the current relay channel, you can call this method.\n   *\n   * After this method call, the SDK triggers the `Client.on(\"channel-media-relay-event\")` callback.\n   * - If the update succeeds, the callback returns `code` 7.\n   * - If the update fails, the callback returns `code` 8, and the SDK also triggers the\n   * `Client.on(\"channel-media-relay-state\")` callback with `state` 3. In this case, the media relay state is reset, and you need to call\n   * [startChannelMediaRelay](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#startchannelmediarelay)\n   * again to restart the relay.\n   *\n   * @remarks\n   * - Call this method after\n   * [startChannelMediaRelay](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#startchannelmediarelay).\n   * - You can add a maximum of four destination channels to a relay.\n   *\n   * @example\n   * client.updateChannelMediaRelay(channelMediaConfig, e => {\n   *   if (e) {\n   *     utils.notification(`updateChannelMediaRelay failed: ${JSON.stringify(e)}`);\n   *   } else {\n   *     utils.notification(`updateChannelMediaRelay success`);\n   *   }\n   * });\n   *\n   * @since 3.0.0\n   */\n  updateChannelMediaRelay: (\n    config: ChannelMediaRelayConfiguration,\n    callback: (error?: ChannelMediaError) => void\n  ) => void;\n\n  /* Legacy properties from angular-agora-rtc */\n  aesMode?: string;\n  aespassword?: string;\n  gatewayClient?: {};\n  highStream?: any;\n  highStreamState?: number;\n  isDualStream?: boolean;\n  key?: any;\n  lowStream?: any;\n  lowStreamParameter?: any;\n  lowStreamState?: number;\n  proxyServer?: any;\n  turnServer?: any;\n}\n","export interface AgoraConfig {\n  AppID: string;\n}\n","import { AgoraClient } from './agora-client.model';\nimport { ClientConfig } from './client-config.model';\nimport { DesktopCapturerSource } from './desktop-capturer-source.model';\nimport { Logger } from './logger.model';\nimport { MediaStream } from './media-stream.model';\nimport { StreamSpec } from './stream-spec.model';\nimport { Stream } from './stream.model';\n\n/**\n * AgoraRTC is the entry point for all the methods that can be called in Agora Web SDK.\n *\n * You can use the AgoraRTC methods to create\n * [Client](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html) and\n * [Stream](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html) objects.\n * Other methods of the AgoraRTC object check for system requirements and set up error logging.\n */\nexport interface AgoraRTC {\n  /**\n   * Checks the Web Browser Compatibility\n   *\n   * This method checks the compatibility between the Web SDK and the current web browser.\n   * Use this method before calling createClient to check the compatibility between the system and the web browser.\n   *\n   * - true: The Web SDK is compatible with the current web browser.\n   * - false: The Web SDK is not compatible with the current web browser.\n   *\n   * @remark\n   * Agora has yet to conduct comprehensive tests on Chromium kernel browsers, such as QQ and 360.\n   * Agora will gradually achieve compatibility on most mainstream browsers in subsequent versions of the Web SDK.\n   */\n  checkSystemRequirements: () => boolean;\n  /**\n   * Creates a Client Object\n   *\n   * This method creates and returns a client object. You can only call this method once each call session.\n   *\n   * @param config\n   * Defines the property of the client, see\n   * [ClientConfig](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.clientconfig.html) for details.\n   *\n   * @example\n   * AgoraRTC.createClient(config);\n   */\n  createClient: (config: ClientConfig) => AgoraClient;\n  /**\n   * This method creates and returns a stream object.\n   *\n   * @example\n   * AgoraRTC.createStream(spec)\n   *\n   * @param spec Defines the properties of the stream\n   * @see [StreamSpec](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.streamspec.html) for details.\n   */\n  createStream: (spec: StreamSpec) => Stream;\n  /**\n   * This method enumerates the available media input and output devices, such as microphones, cameras, headsets, and so on.\n   *\n   * If this method succeeds, the SDK returns a list of media devices in an array of `MediaDeviceInfo` objects.\n   *\n   * @example\n   * AgoraRTC.getDevices(devices => {\n   *   const devCount = devices.length;\n   *   const id = devices[0].deviceId;\n   * });\n   */\n  getDevices: (callback: (devices: MediaDeviceInfo[]) => void) => void;\n  /**\n   * Gets the Sources for Screen-sharing\n   *\n   * To share the screen on Electron, call this method to get the screen sources.\n   * @see [Share the Screen](https://docs.agora.io/en/Video/screensharing_web?platform=Web#electron) for details.\n   *\n   * If this method succeeds, the SDK returns a list of screen sources in an array of\n   * [DesktopCapturerSource](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.desktopcapturersource.html) objects.\n   *\n   * @example\n   * AgoraRTC.getScreenSources(function(err, sources) {\n   *  console.log(sources)\n   * }\n   *\n   */\n  getScreenSources: (callback: (sources: DesktopCapturerSource[]) => void) => void;\n  /**\n   * This method returns the codecs supported by both the Agora Web SDK and the web browser.\n   * The Agora Web SDK supports VP8 and H.264 for video, and OPUS for audio.\n   *\n   * This method supports all web browsers. For web browsers that do not support WebRTC or\n   * are not recognized, the returned codec list is empty.\n   *\n   * @remark\n   * In the `.then(function(result){})` callback, `result` has the following properties:\n   * - `video`: array, the supported video codecs. The array might include `'H264'` and `'VP8'`, or be empty.\n   * - `audio`: array, the supported audio codecs. The array might include `'OPUS'`, or be empty.\n   *\n   * @example\n   * // Gets the supported decoding formats as the receiver\n   * AgoraRTC.getSupportedCodec()\n   *   .then(result => {\n   *     console.log(`Supported video codec: ${result.video.join(',')}`);\n   *     console.log(`Supported audio codec: ${result.audio.join(',')}`);\n   *   });\n   *\n   * // Gets the supported encoding formats as the sender\n   * navigator.mediaDevices.getUserMedia({video: true, audio: true})\n   *  .then(mediaStream => {\n   *     return AgoraRTC.getSupportedCodec({stream: mediaStream});\n   *  })\n   *  .then(result => {\n   *     console.log(`Supported video codec: ${result.video.join(',')}`);\n   *     console.log(`Supported audio codec: ${result.audio.join(',')}`);\n   *  });\n   */\n  getSupportedCodec: (supportedCodecOptions?: { stream?: MediaStream }) => Promise<object>;\n  /**\n   * Logs connection information and errors to the console during active periods of the Agora.io SDK.\n   */\n  Logger: Logger;\n}\n","export interface AudioEffectOptions {\n  /**\n   * The number of playback loops (only supported on Chrome 65 and later).\n   *\n   * A positive integer. The value range is `[1,10000]`. The default value is 1.\n   */\n  cycle?: number;\n  /**\n   * The URL of the online audio effect file.\n   *\n   * The URL must contain ASCII characters only, and the string length must be greater than 0 and less than 256 bytes.\n   * Supported audio formats: MP3, AAC, and other audio formats depending on the browser.\n   */\n  filePath: string;\n  /**\n   * The ID of the specified audio effect.\n   *\n   * A positive integer. The value range is `[1,10000]`. Each audio effect has a unique ID.\n   * If the audio effect is preloaded into the memory through the\n   * [preloadEffect](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html#preloadeffect)\n   * method, ensure that the soundId value is set to the same value as in\n   * [preloadEffect](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html#preloadeffect).\n   */\n  soundId: number;\n}\n","/**\n * Audio mixing settings.\n */\nexport interface AudioMixingOptions {\n  /**\n   *  Whether or not to store the audio mixing file in the cache.\n   *\n   * - `true`: (default) store the audio mixing file in the cache to speed up mixing this file the next time.\n   * - `false`: do not store the audio mixing file in the cache to save RAM.\n   */\n  cacheResource?: boolean;\n  /**\n   * Number of playback loops (only supports Chrome 65+)\n   * A positive integer. The value range is `[1,10000]`. The default value is `1`.\n   */\n  cycle?: number;\n  /**\n   * Path of the online audio file to mix. ASCII characters only, and the string length must be greater than 0 and less than 256 bytes.\n   * Supported audio formats: mp3, aac, and other audio formats depending on the browser.\n   */\n  filePath: string;\n  /**\n   * Whether the audio mixing file loops infinitely.\n   *\n   * - `true`: The audio mixing file loops infinitely. Do not use this option if cycle is specified.\n   * - `false`: (Default) Disables the infinite loops.\n   */\n  loop?: boolean;\n  /**\n   * Sets the playback position (ms) of the audio mixing file. An integer, and the value range is `[0,100000000]`.\n   * If you need to play the file from the beginning, set this paramter to `0`.\n   */\n  playTime: number;\n  /**\n   * Whether the online audio file replaces the local audio stream.\n   * - `true`: The content of the online audio file replaces the audio stream from the microphone.\n   * - `false`: (Default) The online audio file is mixed with the audio stream from the microphone.\n   *\n   * @remark\n   * Safari does not support this parameter.\n   */\n  replace?: boolean;\n}\n","/**\n * Image enhancement options.\n */\nexport interface BeautyEffectOptions {\n  /**\n   * The contrast level, used with the `lighteningLevel` parameter.\n   * - 0: Low contrast level.\n   * - 1: (Default) The original contrast level.\n   * - 2: High contrast level.\n   */\n  lighteningContrastLevel?: 0 | 1 | 2;\n  /**\n   * The brightness level.\n   *\n   * The value ranges from 0.0 (original) to 1.0. The default value is 0.7.\n   */\n  lighteningLevel?: number;\n  /**\n   * The redness level.\n   *\n   * The value ranges from 0.0 (original) to 1.0. The default value is 0.1. This parameter adjusts the red saturation level.\n   */\n  rednessLevel?: number;\n  /**\n   * The sharpness level.\n   *\n   * The value ranges from 0.0 (original) to 1.0. The default value is 0.5. This parameter is usually used to remove blemishes.\n   */\n  smoothnessLevel?: number;\n}\n","interface ChannelInfo extends Record<string | number, any> {\n  /** The channel name. */\n  channelName: string;\n  /**\n   * The unique ID to identify the relay stream in the destination channel.\n   * A 32-bit unsigned integer with a value ranging from 0 to (2^32-1).\n   * If you set it as `0`, the server assigns a random one. To avoid UID conflicts, this uid must be different\n   * from any other UIDs in the destination channel.\n   */\n  uid: number;\n  /** The token generated with the above `channelName` and `uid`. Do not set this parameter if you have not enabled token. */\n  token: string;\n}\n\nexport interface DestinationChannelInfo extends ChannelInfo {\n  /**\n   * The unique ID to identify the relay stream in the destination channel.\n   * A 32-bit unsigned integer with a value ranging from 0 to (2^32-1).\n   * If you set it as `0`, the server assigns a random one. To avoid UID conflicts, this uid must be different\n   * from any other UIDs in the destination channel.\n   */\n  uid: number;\n}\n\nexport interface SourceChannelInfo extends ChannelInfo {\n  /**\n   * The unique ID to identify the relay stream in the source channel.\n   * A 32-bit unsigned integer with a value ranging from 0 to (232-1).\n   * If you set it as `0`, the server assigns a random one. To avoid UID conflicts, this value must be different\n   * from the UID of the current host.\n   */\n  uid: number;\n}\n","import { ChannelMediaMessage } from '../enums/channel-media-message.enum';\n\ntype ErrorCode = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13;\n\n/**\n * Error information of the media stream relay.\n *\n * When errors occur in calling\n * [startChannelMediaRelay](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#startchannelmediarelay),\n * [updateChannelMediaRelay](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#updatechannelmediarelay), or\n * [stopChannelMediaRelay](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#stopchannelmediarelay),\n * the callback functions of these methods provide error details in this class.\n *\n * In this class, `code` is the error code and `message` is the error message.\n *\n * @see [the following table](https://docs.agora.io/en/Video/API%20Reference/web/classes/agorartc.channelmediaerror.html) for details.\n */\nexport interface ChannelMediaError {\n  /** The error code. */\n  code: ErrorCode;\n  /** Additional information. */\n  data: any;\n  /** The error message. */\n  message: [keyof typeof ChannelMediaMessage];\n}\n","import {\n  DestinationChannelInfo,\n  SourceChannelInfo,\n} from './channel-info.model';\n\n/**\n * Configurations of the media stream relay.\n *\n * @description\n * Use this interface to set the media stream relay when calling\n * [startChannelMediaRelay](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#startchannelmediarelay)\n * or [updateChannelMediaRelay](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#updatechannelmediarelay).\n *\n * @since 3.0.0\n */\nexport interface ChannelMediaRelayConfiguration {\n  /**\n   * Removes the destination channel.\n   *\n   * @example\n   * configuration.removeDestChannelInfo(\"cname\")\n   */\n  removeDestChannelInfo: (channelName: string) => void;\n  /**\n   * Sets the information of the destination channel.\n   *\n   * To relay a media stream across multiple channels, call this method as many times (to a maximum of four).\n   *\n   * @example\n   * var configuration = new AgoraRTC.ChannelMediaRelayConfiguration();\n   *    configuration.setDestChannelInfo(\"cname\", {\n   *     channelName: \"destChannel\",\n   *     uid: 123,\n   *     token: \"yourDestToken\",\n   *  })\n   *\n   * @param channelName The name of the destination channel.\n   * Ensure that the value of this parameter is the same as the value of `channelName` in `destInfo`.\n   * @param destInfo The information of the destination channel\n   *\n   */\n  setDestChannelInfo: (\n    channelName: string,\n    destInfo: DestinationChannelInfo\n  ) => void;\n  /**\n   * Sets the information of the source channel.\n   *\n   * @example\n   * var configuration = new AgoraRTC.ChannelMediaRelayConfiguration();\n   * configuration.setSrcChannelInfo({\n   *  channelName: \"srcChannel\",\n   *  uid: 123,\n   *  token: \"yourSrcToken\",\n   * })\n   */\n  setSrcChannelInfo: (srcInfo: SourceChannelInfo) => void;\n}\n","import { TurnServer } from './turn-server.model';\n\n/**\n * A class defining the properties of the config parameter in the\n * [createClient](https://docs.agora.io/en/Video/API%20Reference/web/globals.html#createclient) method.\n *\n * @remark\n * - Ensure that you do not leave mode and codec as empty.\n * - Ensure that you set these properties before calling Client.join.\n *\n * Define [proxyServer](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.clientconfig.html#proxyserver) and\n * [turnServer](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.clientconfig.html#turnserver)\n * if you need to set a proxy server. For a tutorial on deploying the Proxy server on a Web client, see\n * [Deploy the Enterprise Proxy](https://docs.agora.io/en/Video/proxy_web).\n *\n * Proxy services by different service providers may result in slow performance if you are using the Firefox browser.\n * Therefore, Agora recommends using the same service provider for the proxy services.\n * If you use different service providers, Agora recommends not using the Firefox browser.\n *\n * @example\n * import { ClientConfig } from 'ngx-agora';\n *\n * const config: ClientConfig = {\n *   mode: \"live\",\n *   codec: \"vp8\",\n *   proxyServer: \"YOUR NGINX PROXY SERVER IP\",\n *   turnServer: {\n *     turnServerURL: \"YOUR TURNSERVER URL\",\n *     username: \"YOUR USERNAME\",\n *     password: \"YOUR PASSWORD\",\n *     udpport: \"THE UDP PORT YOU WANT TO ADD\",\n *     tcpport: \"THE TCP PORT YOU WANT TO ADD\",\n *     forceturn: false\n *   }\n * }\n * this.ngxAgoraService.createClient(config);\n */\nexport interface ClientConfig {\n  /**\n   * The codec the Web browser uses for encoding and decoding.\n   * - `'vp8'`: Sets the browser to use VP8 for encoding and decoding.\n   * - `'h264'`: Sets the browser to use H264 for encoding and decoding.\n   *\n   * @remark\n   * Set codec as \"h264\" as long as Safari is involved in the session.\n   */\n  codec: 'vp8' | 'h264';\n  /**\n   * The channel profile.\n   *\n   * Agora Web SDK needs to know the application scenario to apply different optimization methods.\n   *\n   * Currently Agora Web SDK supports the following channel profiles:\n   * - \"live\": Sets the channel profile as live broadcast.\n   *   Host and audience roles that can be set by calling the\n   *   [Client.setClientRole](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#setclientrole) method.\n   *   The host sends and receives voice/video, while the audience can only receive voice/video.\n   * - \"rtc\": Sets the channel profile as communication. This is used in one-on-one calls or group calls,\n   *   where all users in the channel can talk freely.\n   *\n   * @remark\n   * If you need to communicate with Agora Native SDK, Agora recommends the following settings:\n   *  - For Native SDK v2.3.2 and later:\n   *   Set [mode](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.clientconfig.html#mode)\n   *   as \"rtc\" or \"live\" if the Native SDK uses the communication channel profile.\n   *   Set [mode](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.clientconfig.html#mode)\n   *   as \"live\" if the Native SDK uses the live broadcast channel profile.\n   *  - For Native SDK before v2.3.2, set mode as \"live\" regardless of which channel profile the Native SDK uses.\n   *\n   * If you set [mode](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.clientconfig.html#mode)\n   * as \"rtc\", the Agora Recording SDK is not supported.\n   */\n  mode: 'live' | 'rtc';\n  /**\n   * Your Nginx server domain name.\n   *\n   * ASCII characters only, and the string length must be greater than 0 and less than 256 bytes.\n   * Enterprise users with a company firewall can use this property to pass signaling messages to the Agora SD-RTN through the Nginx Server.\n   */\n  proxyServer?: string;\n  /**\n   * TURN server settings.\n   *\n   * Enterprise users with a company firewall can use this property to pass audio and video data to the Agora SD-RTN through\n   * the TURN Server.\n   */\n  turnServer?: TurnServer;\n}\n","/**\n * This interface contains information on the screen source\n * @see [DesktopCapturerSource](https://electronjs.org/docs/api/structures/desktop-capturer-source).\n */\nexport interface DesktopCapturerSource {\n  /** ID of the screen source. */\n  id: string;\n  /** Name of the screen source. */\n  name: string;\n  /** Thumbnail of the screen source.\n   * @see [nativeImage](https://electronjs.org/docs/api/native-image#nativeimage) for supported types.\n   */\n  thumbnail: any;\n}\n","/**\n * A class for configuring the imported live broadcast voice or video stream.\n *\n * @example\n * const injectStreamConfig = {\n *  width: 0,\n *  height: 0,\n *  videoGop: 30,\n *  videoFramerate: 15,\n *  videoBitrate: 400,\n *  audioSampleRate: 44100,\n *  audioChannels: 1,\n * };\n */\nexport interface InjectStreamConfig {\n  /**\n   * Audio bitrate of the added stream to the broadcast.\n   * Positive integer. The default value is 48. The value range is [1, 10000].\n   *\n   * @remark\n   * Agora recommends that you stay with the default value and not reset it at this point of time.\n   */\n  audioBitrate?: number;\n  /**\n   * Audio channels to add into the broadcast.\n   * Positive integer. The default value is 1. The value range is [1, 2].\n   *\n   * @remark\n   * Agora recommends that you stay with the default value and not reset it at this point of time.\n   */\n  audioChannels?: number;\n  /**\n   * Audio sampling rate of the added stream to the broadcast.\n   * 32000: 32 kHz\n   * 44100: (Default) 44.1 kHz\n   * 48000: 48 kHz\n   *\n   * @remark\n   * Agora recommends that you stay with the default value and not reset it at this point of time.\n   */\n  audioSampleRate?: number;\n  /**\n   * Video bitrate of the added stream to the broadcast.\n   * Positive integer. The default value is 400 Kbps. The value range is [1, 10000].\n   *\n   * @remark\n   * The setting of the video bitrate is closely linked to the resolution. If the video bitrate you set is beyond\n   * the reasonable range, the SDK will set it within the reasonable range instead.\n   */\n  videoBitrate?: number;\n  /**\n   * Video frame rate of the added stream to the broadcast.\n   * Positive integer. The default value is 15 fps. The value range is [1, 10000].\n   */\n  videoFramerate?: number;\n  /**\n   * Video GOP of the added stream to the broadcast.\n   * Positive integer. The default value is 30 frames. The value range is [1, 10000].\n   */\n  videoGop?: number;\n  /**\n   * Width of the added stream to the broadcast.\n   * Integer, the default value is 0, which is the same width as the original stream. The value range is [0, 10000].\n   */\n  width?: number;\n  /**\n   * Height of the added stream to the broadcast.\n   * Integer, the default value is 0, which is the same height as the original stream. The value range is [0, 10000].\n   */\n  height?: number;\n}\n","import { TranscodingUser } from './transcoding-user.model';\n\nexport interface LiveTranscoding {\n  /**\n   * Bitrate of the CDN live audio output stream in Kbps.\n   * Positive integer. The default value is `48`, and the highest value is `128`.\n   */\n  audioBitrate: number;\n  /**\n   * Agora’s self-defined audio channel type.\n   *\n   * Agora recommends choosing 1 or 2. Special players are required if you choose 3, 4 or 5:\n   * 1. (Default) Mono\n   * 2. Dual sound channels\n   * 3. Three sound channels\n   * 4. Four sound channels\n   * 5. Five sound channels\n   */\n  audioChannels: 1 | 2 | 3 | 4 | 5;\n  /**\n   * Audio sampling rate:\n   * - 32000: 32 kHz\n   * - 44100: (Default) 44.1 kHz\n   * - 48000: 48 kHz\n   */\n  audioSampleRate: 32000 | 44100 | 48000;\n  /**\n   * The background color in RGB hex value.\n   *\n   * Value only, do not include a #. The default value is `0x000000`. The value range is `[0x000000, 0xffffff]`.\n   */\n  backgroundColor?: number;\n  /**\n   * Height of the video.\n   *\n   * Positive integer, the default value is 360. The value range is `[1, 10000]`.\n   */\n  height?: number;\n  /**\n   * - true: Low latency with unassured quality.\n   * - false: (Default）High latency with assured quality.\n   */\n  lowLatency?: boolean;\n  /**\n   * Manages the user layout configuration in the CDN live streaming.\n   *\n   * Agora supports a maximum of 17 transcoding users in a CDN streaming channel.\n   * @see [TranscodingUser](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.transcodinguser.html) for details.\n   */\n  transcodingUsers?: TranscodingUser[];\n  /**\n   * Number of users; default value is 0. The maximum is 17.\n   */\n  userCount?: number;\n  /**\n   * Bitrate of the CDN live output video stream.\n   *\n   * Positive integer. The default value is 400 Kbps. The value range is `[1,1000000]`.\n   */\n  videoBitrate?: number;\n  /**\n   * Video codec profile type:\n   *\n   * - 66: Baseline video codec profile. Generally used in video calls on mobile phones.\n   * - 77: Main video codec profile.Generally used in mainstream electronics, such as MP4 players, portable video players, PSP, and iPads.\n   * - 100: (Default) High video codec profile.Generally used in high - resolution broadcasts or television.\n   */\n  videoCodecProfile?: 66 | 77 | 100;\n  /**\n   * Frame rate of the output data stream set for CDN live.\n   *\n   * Positive integer. The default value is 15 fps. The value range is `[1, 10000]`.\n   */\n  videoFramerate?: number;\n  /**\n   * Video GOP in frames. The default value is 30 frames. The value range is `[1,10000]`.\n   */\n  videoGop?: number;\n  /**\n   * Width of the video.\n   *\n   * Positive integer, the default value is `640`. The value range is `[1, 10000]`.\n   */\n  width?: number;\n}\n","import { LocalAudioStats } from './local-audio-stats.model';\n\n/**\n * A list of `LocalAudioStats` objects, one per uid.\n */\nexport interface LocalAudioStatsMap {\n  [uid: string]: LocalAudioStats;\n}\n","import { CodecType } from '../enums/codec-type.enum';\nimport { MuteState } from '../enums/mute-state.enum';\n\nexport interface LocalAudioStats {\n  /** Encoding type of the sent audio. */\n  CodecType?: CodecType;\n  /** Whether the audio is muted or not. */\n  MuteState?: MuteState;\n  /** Energy level of the captured audio. */\n  RecordingLevel?: string;\n  /** Sampling rate, in kHz. */\n  SamplingRate?: string;\n  /** Bitrate of the sent audio, in Kbps. */\n  SendBitrate?: string;\n  /** Energy level of the sent audio. */\n  SendLevel?: string;\n}\n","import { StreamStats } from './stream-stats.model';\n\n/**\n * The connection statistics of the local stream.\n */\nexport interface LocalStreamStats extends StreamStats {\n  /** Bytes of the sent audio. */\n  audioSendBytes: string;\n  /** Packets of the sent audio. */\n  audioSendPackets: string;\n  /**\n   * Number of lost packets of the sent audio.\n   *\n   * @remark\n   * Safari and Firefox do not support this property.\n   */\n  audioSendPacketsLost: string;\n  /** Bytes of the sent video. */\n  videoSendBytes: string;\n  /** Frame rate of the sent video. */\n  videoSendFrameRate: string;\n  /** Packets of the sent video. */\n  videoSendPackets: string;\n  /** Number of lost packets of the sent video. */\n  videoSendPacketsLost: string;\n  /** Resolution height of the sent video. */\n  videoSendResolutionHeight: string;\n  /** Resolution width of the sent video. */\n  videoSendResolutionWidth: string;\n}\n","import { LocalVideoStats } from './local-video-stats.model';\n\n/**\n * A list of `LocalVideoStats` objects, one per uid.\n */\nexport interface LocalVideoStatsMap {\n  [uid: string]: LocalVideoStats;\n}\n","import { MuteState } from '../enums/mute-state.enum';\n\nexport interface LocalVideoStats {\n  /** Frame rate of the captured video, in fps. */\n  CaptureFrameRate?: string;\n  /** Height (pixels) of the captured video. */\n  CaptureResolutionHeight?: string;\n  /** Width (pixels) of the captured video. */\n  CaptureResolutionWidth?: string;\n  /** Delay from capturing to encoding the local video, in ms. */\n  EncodeDelay?: string;\n  /** Whether the video is muted or not. */\n  MuteState?: MuteState;\n  /** Bitrate of the sent video, in Kbps. */\n  SendBitrate?: string;\n  /** Frame rate of the sent video, in fps. */\n  SendFrameRate?: string;\n  /** Height of the sent video, in pixels. */\n  SendResolutionHeight?: string;\n  /** Width of the sent video, in pixels. */\n  SendResolutionWidth?: string;\n  /** Bitrate of the local video set in\n   * [setVideoProfile](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html#setvideoprofile).\n   */\n  TargetSendBitrate?: string;\n  /** Total duration of the published video, in seconds. */\n  TotalDuration?: string;\n  /** Total freeze time of the encoded video, in seconds. */\n  TotalFreezeTime?: string;\n}\n","import { LogLevel } from '../enums/log-level.enum';\n\n/**\n * Provides methods to enable/disable log upload and set output log level.\n */\nexport interface Logger {\n  /** Outputs all logs. */\n  DEBUG: LogLevel.Debug;\n  /** Outputs logs of the INFO, WARNING and ERROR levels. */\n  INFO: LogLevel.Info;\n  /** Outputs logs of the WARNING and ERROR levels. */\n  WARNING: LogLevel.Warning;\n  /** Outputs logs of the ERROR level. */\n  ERROR: LogLevel.Error;\n  /** Outputs no logs. */\n  NONE: LogLevel.None;\n  debug: (message: string) => void;\n  error: (message: string) => void;\n  info: (message: string) => void;\n  warning: (message: string) => void;\n\n  /**\n   * This method disables log upload.\n   *\n   * By default, the log-upload function is disabled. If you have used\n   * [enableLogUpload](https://docs.agora.io/en/Video/API%20Reference/web/modules/agorartc.logger.html#enablelogupload),\n   * call this method when you need to stop uploading the log.\n   *\n   * @example\n   * AgoraRTC.Logger.disableLogUpload();\n   */\n  disableLogUpload: () => void;\n  /**\n   * Call this method to enable log upload to Agora’s server.\n   *\n   * The log-upload function is disabled by default, if you need to enable this function,\n   * please call this method before all the other methods.\n   *\n   * @remark\n   * If the user fails to join the channel, the log information is not available on Agora’s server.\n   *\n   * @example\n   * AgoraRTC.Logger.enableLogUpload();\n   */\n  enableLogUpload: () => void;\n  /**\n   * This method sets the output log level.\n   *\n   * The log level follows the sequence of NONE, ERROR, WARNING, INFO, and DEBUG.\n   * For example, if you set the log level as AgoraRTC.Logger.setLogLevel(AgoraRTC.Logger.INFO);,\n   * then you can see logs in levels INFO, ERROR, and WARNING.\n   */\n  setLogLevel: (level: LogLevel) => void;\n}\n","/**\n * This interface contains information that describes a single media input or output device.\n * The list of devices obtained by calling [AgoraRTC.getDevices](https://docs.agora.io/en/Video/API%20Reference/web/globals.html#getdevices)\n * is an array of MediaDeviceInfo objects, one per media device.\n */\nexport interface MediaDeviceInfo {\n  /** Unique ID of the device. */\n  deviceId: string;\n  /** Returns an enumerated value that is \"videoinput\", \"audioinput\" or \"audiooutput\". */\n  kind: MediaDeviceKind;\n  /**\n   * Returns a DOMString that is a label describing this device (for example \"External USB Webcam\").\n   *\n   * @remark\n   * For security reasons, the label field is always blank unless an active media stream exists\n   * or the user has granted persistentpermission for media device access.\n   */\n  label: string;\n}\n","/**\n * This interface represents a single media track within a stream, for example an audio track or a video track.\n * @see [MediaStreamTrack](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack) for details.\n */\nexport interface MediaStreamTrack {\n  kind: 'audio' | 'video';\n}\n","/**\n * The MediaStream interface represents a stream of media content.\n *\n * A stream consists of several tracks such as video or audio tracks. Each track is specified as an instance of\n * [MediaStreamTrack](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.mediastreamtrack.html).\n *\n * @see [MediaStream](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream) for details.\n */\nexport interface MediaStream {\n  /**\n   * A Boolean value that returns true if the stream is active, or false otherwise.\n   * @see [active](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/active) for details.\n   */\n  readonly active: boolean;\n  /**\n   * A [`DOMString`](https://developer.mozilla.org/en-US/docs/Web/API/DOMString) containing 36 characters\n   * denoting a universally unique identifier (UUID) for the object.\n   *\n   * @see [MediaStream.id](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/id) for details.\n   */\n  readonly id: string;\n}\n","import { RemoteAudioStats } from './remote-audio-stats.model';\n\n/**\n * A list of RemoteAudioStats objects, one per uid.\n */\nexport interface RemoteAudioStatsMap {\n  [uid: string]: RemoteAudioStats;\n}\n","export interface RemoteAudioStats {\n  /**\n   * Decoding type of the received audio.\n   *\n   * - \"1\": Opus.\n   * - \"2\": AAC.\n   */\n  CodecType?: string;\n  /**\n   * End-to-end delay in ms.\n   *\n   * Delay from capturing to playing the audio.\n   */\n  End2EndDelay?: string;\n  /**\n   * Whether the audio is muted or not.\n   * - \"1\": Muted.\n   * - \"0\": Unmuted.\n   */\n  MuteState?: string;\n  /** Packet loss rate (%) of the remote audio. */\n  PacketLossRate?: string;\n  /** Bitrate of the received audio, in Kbps. */\n  RecvBitrate?: string;\n  /** Volume of the received audio. */\n  RecvLevel?: string;\n  /** Total freeze time of the received audio. */\n  TotalFreezeTime?: string;\n  /** Total playing duration of the received audio. */\n  TotalPlayDuration?: string;\n  /**\n   * Transport delay in ms.\n   *\n   * Delay from sending to receiving the audio.\n   */\n  TransportDelay?: string;\n}\n","import { StreamStats } from './stream-stats.model';\n\n/**\n * The connection statistics of the remote stream.\n */\nexport interface RemoteStreamStats extends StreamStats {\n  /** Bytes of the received audio. */\n  audioReceiveBytes: string;\n  /** Delay in receiving the audio (ms).\n   *\n   * Delay from sending to playing the audio, only supported by Chrome for now.\n   */\n  audioReceiveDelay: string;\n  /** Packets of the received audio. */\n  audioReceivePackets: string;\n  /** Number of lost packets of the received audio. */\n  audioReceivePacketsLost: string;\n  /** Delay from sending to receiving data. */\n  endToEndDelay: string;\n  /** Bytes of the received video. */\n  videoReceiveBytes: string;\n  /** Decode frame rate after the video is received. */\n  videoReceiveDecodeFrameRate: string;\n  /** Delay in receiving the video (ms).\n   *\n   * Delay from sending to playing the video, only supported by Chrome for now.\n   */\n  videoReceiveDelay: string;\n  /** Frame rate rof the received video. */\n  videoReceiveFrameRate: string;\n  /** Packets of the received video. */\n  videoReceivePackets: string;\n  /** Number of lost packets of the received video. */\n  videoReceivePacketsLost: string;\n  /** Resolution height of the received video. */\n  videoReceiveResolutionHeight?: string;\n  /** Resolution width of the received video. */\n  videoReceiveResolutionWidth?: string;\n}\n","import { RemoteVideoStats } from './remote-video-stats.model';\n\n/**\n * A list of `RemoteVideoStats` objects, one per uid.\n */\nexport interface RemoteVideoStatsMap {\n  [uid: string]: RemoteVideoStats;\n}\n","/**\n * Video statistics of the remote stream.\n */\nexport interface RemoteVideoStats {\n  /**\n   * End-to-end delay in ms.\n   *\n   * Delay from capturing to playing the video.\n   */\n  End2EndDelay?: string;\n  /**\n   * Whether the video is muted or not.\n   *\n   * - \"1\": Muted.\n   * - \"0\": Unmuted.\n   */\n  MuteState?: string;\n  /** Packet loss rate (%) of the remote video. */\n  PacketLossRate?: string;\n  /** Bitrate of the received video, in Kbps. */\n  RecvBitrate?: string;\n  /** Resolution height of the received video, in pixels. */\n  RecvResolutionHeight?: string;\n  /** Resolution width of the received video, in pixels. */\n  RecvResolutionWidth?: string;\n  /** Rendering frame rate of the decoded video, in fps. */\n  RenderFrameRate?: string;\n  /** Height (pixels) of the rendered video. */\n  RenderResolutionHeight?: string;\n  /** Width (pixels) of the rendered video. */\n  RenderResolutionWidth?: string;\n  /** Total freeze time of the received video. */\n  TotalFreezeTime?: string;\n  /** Total playing duration of the received video. */\n  TotalPlayDuration?: string;\n  /**\n   * Transport delay in ms.\n   *\n   * Delay from sending to receiving the video.\n   */\n  TransportDelay?: string;\n}\n","export interface SessionStats {\n  /** Call duration in seconds, represented by an aggregate value. */\n  Duration?: string;\n  /** Total received bitrate of the stream, in Kbps, represented by an instantaneous value. */\n  RecvBitrate?: string;\n  /** Total number of bytes received, represented by an aggregate value. */\n  RecvBytes?: string;\n  /** Total sent bitrate of the stream, in Kbps, represented by an instantaneous value. */\n  SendBitrate?: string;\n  /** Total number of bytes sent, represented by an aggregate value. */\n  SendBytes?: string;\n  /**\n   * Number of users in the channel.\n   *\n   * rtc mode: The number of all users in the channel.\n   * live mode\n   *  - If the local user is an audience: The number of hosts in the channel + 1.\n   *  - If the user is a host: The number of hosts in the channel.\n   */\n  UserCount?: string;\n}\n","import { MediaStreamTrack } from './media-stream-track.model';\n\n/**\n * A class defining the `spec` paramter in the\n * [createStream](https://docs.agora.io/en/Video/API%20Reference/web/globals.html#createstream) method.\n *\n *  * @remark\n * - Do not set `video` and `screen` as `true` at the same time.\n * - To enable screen-sharing on the Firefox browser, ensure that the `screen` property is\n * set to `true`, and the `mediaSource` property has been set to specify a certain sharing mode.\n *\n * # Create a Stream\n *\n * You have two options to create an audio/video stream:\n *\n *  ## Set the audio, video, and screen properties\n *  const stream = AgoraRTC.createStream({\n *   streamID: uid,\n *   audio:true,\n *   video:true,\n *   screen:false\n *  });\n *\n *\n * ## Set the audioSource and videoSource properties\n *\n * Compared with the first option, the\n * [audioSource](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.streamspec.html#audiosource)\n * and [videoSource](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.streamspec.html#videosource)\n * properties can specify the audio and video tracks for the stream. Use this option if you need to process the audio\n * and video before creating the stream.\n *\n * Use the `mediaStream` method to get the audio and video tracks from `MediaStreamTrack`, and then set `audioSource` and `videoSource`:\n *\n * navigator.mediaDevices.getUserMedia(\n *     {video: true, audio: true}\n * ).then(function(mediaStream){\n *     var videoSource = mediaStream.getVideoTracks()[0];\n *     var audioSource = mediaStream.getAudioTracks()[0];\n *     // After processing videoSource and audioSource\n *     var localStream = AgoraRTC.createStream({\n *         video: true,\n *         audio: true,\n *         videoSource: videoSource,\n *         audioSource: audioSource\n *     });\n *     localStream.init(function(){\n *         client.publish(localStream, function(e){\n *             //...\n *         });\n *     });\n * });\n *\n * @remark\n * - `MediaStreamTrack` refers to the `MediaStreamTrack` object supported by the browser.\n * - Currently this option only supports the Chrome brower.\n *\n * @see [MediaStreamTrack API](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack) for details.\n *\n *\n * ### Enable Screen-sharing on the Chrome Web Browser\n *\n * const stream = AgoraRTC.createStream({\n *   streamID: uid,\n *   audio:false,\n *   video:false,\n *   screen:true,\n *   extensionId:\"minllpmhdgpndnkomcoccfekfegnlikg\"});\n *\n * ### Enable Screen-sharing on the Firefox Web Browser\n *\n * localStream = AgoraRTC.createStream({\n *      streamID: uid,\n *      audio: false,\n *      video: false,\n *      screen: true,\n *      mediaSource: \"screen\",\n *    });\n *\n * For a tutorial on screen-sharing on a website,\n * @see [Share the Screen](https://docs.agora.io/en/Video/screensharing_web?platform=Web).\n */\nexport interface StreamSpec {\n  /**\n   * Whether this stream contains an audio track.\n   */\n  audio: boolean;\n  /**\n   * Whether to enable audio processing.\n   *\n   * @param [AEC] Whether to enable acoustic echo cancellation.\n   * The default value is `true` (enable). If you wish not to enable the acoustic echo cancellation, set AEC as `false`.\n   * @param [AGC] Whether to enable audio gain control.\n   * The default value is true (enable). If you wish not to enable the audio gain control, set AGC as false.\n   * @param [ANS] Whether to enable automatic noise suppression.\n   * The default value is true (enable). If you wish not to enable automatic noise suppression, set ANS as false.\n   *\n   * @remark\n   * - Safari does not support this setting.\n   * - Noise suppression is always enabled on Firefox. Setting `ANS` as `false` does not take effect on Firefox.\n   */\n  audioProcessing?: {\n    AEC?: boolean;\n    AGC?: boolean;\n    ANS?: boolean;\n  };\n  /**\n   * Specifies the audio source of the stream.\n   */\n  audioSource?: MediaStreamTrack;\n  /**\n   * The camera device ID retrieved from the [getDevices](https://docs.agora.io/en/Video/API%20Reference/web/globals.html#getdevices)\n   * method.\n   *\n   * The retrieved ID is ASCII characters, and the string length is greater than 0 and less than 256 bytes.\n   *\n   * When the string length is 0, this property is ignored.\n   */\n  cameraId?: string;\n  /**\n   * The extension ID of the Chrome screen-sharing extension.\n   *\n   * ASCII characters only, and the string length must be greater than 0 and less than 256 bytes.\n   * Set this property if you use the Chrome screen-sharing extension.\n   * @see [Chrome Extension for Screen Sharing](https://docs.agora.io/en/Video/chrome_screensharing_plugin?platform=Web) for details.\n   *\n   * @remark\n   * Chrome 72 and later versions support screen sharing without the extension. You can leave extensionId as empty.\n   * If you set the `extensionId`, then you need to use the screen-sharing extension.\n   */\n  extensionId?: string;\n  /**\n   * Sets using the front or rear camera.\n   *\n   * You can set this parameter to use the front or rear camera on mobile devices:\n   * - `\"user\"`: The front camera\n   * - `\"environment\"`: The rear camera\n   */\n  facingMode?: 'user' | 'environment';\n  /**\n   * The screen-sharing mode on the Firefox browser.\n   *\n   * If you are using the Firefox browser, setting this property specifies the screen-sharing mode:\n   * - `\"screen\"`: (default) share the current screen\n   * - `\"application\"`: share all windows of an App\n   * - `\"window\"`: share a specified window of an App\n   *\n   * @remark\n   * Firefox on Windows does not support the application mode.\n   *\n   * @see\n   * [Screen Sharing on Firefox](https://docs.agora.io/en/Video/screensharing_web?platform=Web#a-name-ff-a-screen-sharing-on-firefox)\n   * for details.\n   */\n  mediaSource?: 'screen' | 'application' | 'window';\n  /**\n   * The microphone device ID retrieved from the\n   * [getDevices](https://docs.agora.io/en/Video/API%20Reference/web/globals.html#getdevices) method.\n   *\n   * The retrieved ID is ASCII characters, and the string length is greater than 0 and less than 256 bytes.\n   *\n   * When the string length is 0, this property is ignored.\n   */\n  microphoneId?: string;\n  /**\n   * Marks whether to mirror the local video image of the publisher in the local preview.\n   *\n   * This setting does not take effect in screen-sharing streams.\n   * - `true`: (Default) Mirror the local video.\n   * - `false`: Do not mirror the local video.\n   *\n   * Agora recommends enabling this function when using the front camera, and disabling it when using the rear camera.\n   */\n  mirror?: boolean;\n  /**\n   * Whether this stream contains a screen-sharing track.\n   *\n   * @see [Share the Screen](https://docs.agora.io/en/Video/screensharing_web?platform=Web) for details.\n   */\n  screen?: boolean;\n  /**\n   * Marks whether to share the audio playback when sharing the screen.\n   *\n   * - `true`: Share the local audio playback when sharing the screen.\n   * - `false`: (Default) Do not share the local audio playback when sharing the screen.\n   *\n   * To share the local audio playback when sharing the screen, ensure that you set screen as `true`.\n   * We recommend also setting [audio](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.streamspec.html#audio)\n   * as false. If both `screenAudio` and `audio` are set as `true`, the stream only contains the local audio playback.\n   *\n   * @remark\n   * - This function supports only Chrome 73 or later on Windows.\n   * - For the audio sharing to take effect, the user must check **Share audio** in the pop-up window when sharing the screen.\n   *\n   * @since 3.0.0\n   */\n  screenAudio?: boolean;\n  /**\n   * The stream ID.\n   *\n   * Please set the stream ID as the user ID, which can be retrieved from the callback of\n   * [Client.join](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#join).\n   */\n  streamID?: number | string;\n  /** Whether this stream contains a video track. */\n  video: boolean;\n  /**\n   * Specifies the video source of the stream.\n   *\n   * @remark\n   * If you use a video source created by the Canvas API, re-draw on the canvas every one second\n   * when the drawing is still to keep the video publishing.\n   */\n  videoSource?: MediaStreamTrack;\n}\n","export interface StreamStats {\n  /** Delay in accessing the SD-RTN (ms). */\n  accessDelay: string;\n}\n","import { StreamEvent } from '../enums/stream-event.enum';\nimport { Volume } from '../types';\nimport { AudioProfile } from '../types/audio-profile.type';\nimport { ScreenProfile } from '../types/screen-profile.type';\nimport { SoundId } from '../types/sound-id.type';\nimport { VideoProfile } from '../types/video-profile.type';\nimport { AudioEffectOptions } from './audio-effect-options.model';\nimport { AudioMixingOptions } from './audio-mixing-options.model';\nimport { BeautyEffectOptions } from './beauty-effect-options.model';\nimport { LocalStreamStats } from './local-stream-stats.model';\nimport { MediaStreamTrack } from './media-stream-track.model';\nimport { RemoteStreamStats } from './remote-stream-stats.model';\nimport { VideoEncoderConfiguration } from './video-encoder-configuration.model';\nimport { VideoPlayOptions } from './video-play-options.model';\n\n/**\n * The Stream object created by the [createStream](https://docs.agora.io/en/Video/API%20Reference/web/globals.html#createstream) method.\n *\n * A stream represents a published local or remote media stream object in a call session.\n * All Stream methods can be called for both local and remote streams, except for\n * [Stream.init](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html#init)\n * that only applies to the local stream.\n */\nexport interface Stream {\n  /**\n   * This method adds the audio or video tracks into the stream.\n   *\n   * @remark\n   * This method does not support Firefox and Safari.\n   * A Stream object can have only one audio track and one video track at most.\n   *\n   * @param track The track can be retrieved from the `mediaStream` method.\n   *\n   * @example\n   * const localStream = AgoraRTC.createStream({audio: true, video: false});\n   * localStream.addTrack(anotherStream.getVideoTrack());\n   *\n   */\n  addTrack: (track: MediaStreamTrack) => void;\n  /**\n   * Adjusts Audio Mixing Volume\n   *\n   * @param level The volume of the mixing audio. The value ranges between 0 and 100 (default).\n   */\n  adjustAudioMixingVolume: (level: number) => void;\n  /**\n   * This method closes the video/audio stream.\n   *\n   * After calling this method, the camera and microphone authorizations are reset.\n   */\n  close: () => void;\n  /**\n   * @deprecated `v2.5.1`, use\n   * [muteAudio](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html#muteaudio) instead.\n   *\n   * Disables the audio for a stream.\n   *\n   * This method disables the audio track in the stream.\n   * It works only when the audio flag is `true` in the stream.\n   */\n  disableAudio: () => void;\n  /**\n   * @deprecated `v2.5.1`, use\n   * [muteVideo](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html#mutevideo) instead.\n   *\n   * Disables the video for a stream.\n   *\n   * This method disables the video track in the stream.\n   * It works only when the video flag is `true` in the stream.\n   */\n  disableVideo: () => void;\n  /**\n   * @deprecated `v2.5.1`, use\n   * [unmuteAudio](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html#unmuteaudio) instead.\n   *\n   * Enabled the audio for a stream.\n   *\n   * This method enables the audio track in the stream.\n   * It works only when the audio flag is `true` in the stream.\n   *\n   * @remark\n   * By default the audio track is enabled. If you call\n   * [disableAudio](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html#disableaudio),\n   * call this method to enable audio.\n   */\n  enableAudio: () => void;\n  /**\n   * @deprecated `v2.5.1`, use\n   * [unmuteVideo](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html#unmutevideo) instead.\n   *\n   * Enabled the video for a stream.\n   *\n   * This method enables the video track in the stream.\n   * It works only when the video flag is `true` in the stream.\n   *\n   * @remark\n   * By default the video track is enabled. If you call\n   * [disabledVideo](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html#disablevideo),\n   * call this method to enable audio.\n   */\n  enableVideo: () => void;\n  /**\n   * This method retrieves the current audio level.\n   *\n   * Call `setTimeout` or `setInterval` to retrieve the local or remote audio change.\n   *\n   * @example\n   * setInterval(_ => {\n   *  var audioLevel = stream.getAudioLevel();\n   *  // Use audioLevel to render the UI\n   * }, 100)\n   *\n   * @remark\n   * This method does not apply to streams that contain no audio data and may result in warnings.\n   *\n   * Due to browser policy changes, this method must be triggered by the user's gesture on the\n   * Chrome 70+ and Safari browser. See\n   * [Autoplay Policy Changes](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes) for details.\n   */\n  getAudioLevel: () => number;\n  /**\n   * Returns the current playback position of the audio mixing if successful.\n   */\n  getAudioMixingCurrentPosition: () => number | void;\n  /**\n   * Returns the audio mixing duration (ms) if successful.\n   */\n  getAudioMixingDuration: () => number | void;\n  /**\n   * This method retrieves the audio track in the stream and can be used together with\n   * [replaceTrack](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html#replacetrack).\n   *\n   * If the stream contains an audio track, it will be returned in a `MediaStreamTrack` object.\n   */\n  getAudioTrack: () => MediaStreamTrack | void;\n  /**\n   * Gets the volume of the audio effects.\n   *\n   * @example\n   * const volumes = stream.getEffectsVolume();\n   * volumes.forEach((soundId, volume) => {\n   *    console.log(\"SoundId\", soundId, \"Volume\", volume);\n   * });\n   *\n   * @returns Returns an array that contains `soundId` and `volume`. Each soundId has a corresponding `volume`.\n   * - `volume`: Volume of the audio effect. The value range is `[0,100]`.\n   */\n  getEffectsVolume: () => { soundId: SoundId; volume: number }[];\n  /**\n   * This method retrieves the stream ID.\n   *\n   * @example\n   * const id = stream.getId()\n   */\n  getId: () => number;\n  /**\n   * This method gets the connection statistics of the stream.\n   *\n   * @remark\n   * It may take some time to get some of the statistics.\n   *\n   * @example\n   * localStream.getStats(stats => {\n   *    console.log(`Local Stream accessDelay: ${stats.accessDelay}`);\n   *    console.log(`Local Stream audioSendBytes: ${stats.audioSendBytes}`);\n   *    console.log(`Local Stream audioSendPackets: ${stats.audioSendPackets}`);\n   *    console.log(`Local Stream audioSendPacketsLost: ${stats.audioSendPacketsLost}`);\n   *    console.log(`Local Stream videoSendBytes: ${stats.videoSendBytes}`);\n   *    console.log(`Local Stream videoSendFrameRate: ${stats.videoSendFrameRate}`);\n   *    console.log(`Local Stream videoSendPackets: ${stats.videoSendPackets}`);\n   *    console.log(`Local Stream videoSendPacketsLost: ${stats.videoSendPacketsLost}`);\n   *    console.log(`Local Stream videoSendResolutionHeight: ${stats.videoSendResolutionHeight}`);\n   *    console.log(`Local Stream videoSendResolutionWidth: ${stats.videoSendResolutionWidth}`);\n   * });\n   *\n   *\n   * remoteStream.getStats(stats => {\n   *    console.log(`Remote Stream accessDelay: ${stats.accessDelay}`);\n   *    console.log(`Remote Stream audioReceiveBytes: ${stats.audioReceiveBytes}`);\n   *    console.log(`Remote Stream audioReceiveDelay: ${stats.audioReceiveDelay}`);\n   *    console.log(`Remote Stream audioReceivePackets: ${stats.audioReceivePackets}`);\n   *    console.log(`Remote Stream audioReceivePacketsLost: ${stats.audioReceivePacketsLost}`);\n   *    console.log(`Remote Stream endToEndDelay: ${stats.endToEndDelay}`);\n   *    console.log(`Remote Stream videoReceiveBytes: ${stats.videoReceiveBytes}`);\n   *    console.log(`Remote Stream videoReceiveDecodeFrameRate: ${stats.videoReceiveDecodeFrameRate}`);\n   *    console.log(`Remote Stream videoReceiveDelay: ${stats.videoReceiveDelay}`);\n   *    console.log(`Remote Stream videoReceiveFrameRate: ${stats.videoReceiveFrameRate}`);\n   *    console.log(`Remote Stream videoReceivePackets: ${stats.videoReceivePackets}`);\n   *    console.log(`Remote Stream videoReceivePacketsLost: ${stats.videoReceivePacketsLost}`);\n   *    console.log(`Remote Stream videoReceiveResolutionHeight: ${stats.videoReceiveResolutionHeight}`);\n   *    console.log(`Remote Stream videoReceiveResolutionWidth: ${stats.videoReceiveResolutionWidth}`);\n   * });\n   *\n   * @returns Connection statistics of the stream.\n   * - If it is a publishing stream, then the stats is\n   *   [LocalStreamStats](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.localstreamstats.html).\n   * - If it is a subscribing stream, then the stats is\n   *   [RemoteStreamStats](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.remotestreamstats.html).\n   */\n  getStats: (\n    callback: (stats: LocalStreamStats | RemoteStreamStats) => void\n  ) => void;\n  /**\n   * This method retrieves the video track in the stream and can be used together with\n   * [replaceTrack](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html#replacetrack).\n   *\n   * If the stream contains an audio track, it will be returned in a `MediaStreamTrack` object.\n   *\n   */\n  getVideoTrack: () => MediaStreamTrack | void;\n  /**\n   * This method retrieves the audio flag.\n   *\n   * @returns Audio flag of stream.\n   * - `true`: The stream contains audio data.\n   * -`false`: The stream does not contain audio data.\n   */\n  hasAudio: () => boolean;\n  /**\n   * This method retrieves the video flag.\n   *\n   * @returns Video flag of stream.\n   * - `true`: The stream contains video data.\n   * - `false`: The stream does not contain video data.\n   */\n  hasVideo: () => boolean;\n  /**\n   * This method initializes the local stream object.\n   *\n   * If this method fails\n   * @see [getUserMedia Exceptions](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia#Exceptions)\n   * for error information.\n   *\n   * Some errors might be returned in the callback, for example: `{type: \"error\", msg: \"NotAllowedError\", info: \"Permission denied\"}`.\n   *\n   * The possible error information in the `msg` field includes:\n   *\n   * - NotAllowedError: User refuses to grant access to camera or audio resource.\n   * - MEDIA_OPTION_INVALID: The camera is occupied or the resolution is not supported (on browsers in early versions).\n   * - DEVICES_NOT_FOUND: No device is found.\n   * - NOT_SUPPORTED: The browser does not support using camera and microphone.\n   * - PERMISSION_DENIED: The device is disabled by the browser or the user has denied permission of using the device.\n   * - CONSTRAINT_NOT_SATISFIED: The settings are illegal (on browsers in early versions).\n   * - PluginNotInstalledProperly: A screen-sharing request is made with no plugin installed or with a\n   *   wrong extensionId on the Chrome browser.\n   * - UNDEFINED: Undefined error.\n   *\n   * The `info` field shows the extra information for the error. If no more extra information, its value will be `null`.\n   *\n   * @example\n   * init(_ => {\n   *     console.log(\"local stream initialized\");\n   *     // publish the stream\n   *     //……\n   * }, err => {\n   *     console.error(\"local stream init failed \", err);\n   *     //error handling\n   * });\n   */\n  init: (onSuccess?: () => void, onFailure?: (error: Error) => void) => void;\n  /**\n   * Returns whether the Stream is Playing\n   *\n   * - `true`: The stream is being rendered or playing on the page.\n   * - `false`: The stream is neither being rendered nor playing on the page.\n   */\n  isPlaying: () => boolean;\n  /**\n   * Disables the audio track in the stream.\n   *\n   * - For local streams, the SDK stops sending audio after you call this method.\n   * - For remote streams, the SDK still receives audio but stops playing it after you call this method.\n   *\n   * @remark\n   * For local streams, it works only when the `audio` flag is `true` in the stream.\n   *\n   * @returns void ([Docs unclear](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html#muteaudio))\n   * - `true`: Success.\n   * - `false`: Failure. Possible reasons include no audio, stream not initialized, and audio track already disabled.\n   */\n  muteAudio: () => void;\n  /**\n   * Disables the video track in the stream.\n   *\n   * - For local streams, the SDK stops sending video after you call this method.\n   * - For remote streams, the SDK still receives video but stops playing it after you call this method.\n   *\n   * @remark\n   * For local streams, it works only when the video flag is true in the stream.\n   *\n   * @returns void ([Docs unclear](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html#mutevideo))\n   * - `true`: Success.\n   * - `false`: Failure. Possible reasons include no video, stream not initialized, and video track already disabled.\n   */\n  muteVideo: () => void;\n  /**\n   * Occurs when an Agora.io event connected to the specific stream is received from the SDK.\n   *\n   * @see [On](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html#on)\n   * for all variations of this core function.\n   */\n  on: (event: StreamEvent, callback: (evt: any) => void) => void;\n  /**\n   * Pauses all audio effects.\n   *\n   * @example\n   * stream.pauseAllEffects(err => {\n   * if (err) {\n   *         console.error(\"Failed to pause effects, reason: \", err);\n   * } else {\n   *         console.log(\"Effects are paused successfully\");\n   * }\n   * });\n   */\n  pauseAllEffects: (callback?: (error: string | null) => void) => void;\n  /**\n   * Pauses audio mixing.\n   */\n  pauseAudioMixing: (callback?: (error: string | null) => void) => void;\n  /**\n   * Pauses a specified audio effect.\n   *\n   * @example\n   * // When the audio effect 1 is playing\n   * stream.pauseEffect(1, err => {\n   *   if (err) {\n   *      console.error(\"Failed to pause Effect, reason: \", err);\n   *   } else {\n   *      console.log(\"Effect is paused successfully\");\n   *   }\n   * });\n   */\n  pauseEffect: (\n    soundId: SoundId,\n    callback?: (error: string | null) => void\n  ) => void;\n  /**\n   * Plays the video or audio stream.\n   *\n   * @remark\n   * Due to browser policy changes, this method must be triggered by the user's\n   * gesture on the Chrome 70+ and Safari browsers.\n   * @see [Autoplay Policy Changes](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes) for details.\n   *\n   * @example\n   * stream.play(\"agora_remote\", {fit: 'contain'}); // stream will be played in the element with the ID agora_remote\n   *\n   * @param HTMLElementID\n   * Represents the HTML element ID. Digits and letters in the ASCII character set, “_”, “-\", and \".\".\n   * The string length must be greater than 0 and less than 256 bytes.\n   */\n  play: (HTMLElementID: string, option?: VideoPlayOptions) => void;\n  /**\n   * Plays a specified audio effect.\n   *\n   * This method supports playing multiple audio effect files at the same time, and is different from\n   * [startAudioMixing](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html#startaudiomixing).\n   * You can use this method to add specific audio effects for specific scenarios. For example, gaming.\n   *\n   * @remark\n   * - Due to web browser autoplay policy changes, this method must be triggered by a user gesture on Chrome 70+ and Safari web\n   *   browsers.\n   * @see [Autoplay Policy Changes](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes) for details.\n   *\n   * This method supports the following web browsers:\n   * - Safari 12 and later\n   * - Chrome 65 and later\n   * - Firefox 66 and later\n   * - Call this method when you are in a channel. Otherwise, it may cause issues.\n   *\n   * @example\n   * stream.playEffect({\n   *    soundId: 1,\n   *    filePath: \"biu.mp3\"\n   * }, error => {\n   *    if (error) {\n   *        // Error handling\n   *        return;\n   *    }\n   *    // Process after the method call succeeds\n   * });\n   *\n   * @remark\n   * The callbacks of the audio effect methods all use the Node.js callback pattern.\n   */\n  playEffect: (\n    options: AudioEffectOptions,\n    callback?: (error: string | null) => void\n  ) => void;\n  /**\n   * Preloads a specified audio effect file into the memory.\n   *\n   * To ensure smooth communication, limit the size of the audio effect file.\n   *\n   * @example\n   * stream.preloadEffect(1, \"https://web-demos-static.agora.io/agora/smlt.flac\", err => {\n   *   if (err) {\n   *       console.error(\"Failed to preload effect, reason: \", err);\n   *   } else {\n   *       console.log(\"Effect is preloaded successfully\");\n   *   }\n   * });\n   */\n  preloadEffect: (\n    soundId: SoundId,\n    filePath: string,\n    callback?: (error: string | null) => void\n  ) => void;\n  /**\n   * Removes the audio or video tracks from the stream.\n   *\n   * @remark\n   * - If you need to change both the audio and video tracks, we recommend using the replaceTrack method instead.\n   * - This method does not support Firefox and Safari.\n   *\n   * @example\n   * const localStream = AgoraRTC.createStream({ audio: true, video: true });\n   * localStream.removeTrack(localStream.getAudioTrack());\n   */\n  removeTrack: (track: MediaStreamTrack) => void;\n  /**\n   * Replaces the audio or video MediaStreamTrack in the local stream.\n   *\n   * After the local stream is published, you can use this method to switch the cameras, or switch\n   * between the microphone and the music player.\n   *\n   * The new track can be retrieved by getUserMedia, MediaElement.captureStream or other methods.\n   *\n   * The replaced track will be stopped.\n   *\n   * @remark\n   * Supports Chrome 65+, Safari, and latest Firefox.\n   * - Firefox does not support switching audio tracks between different microphones.\n   *   You can replace the audio track from the microphone with an audio file, or vice versa.\n   * - Replacing audio tracks from external audio devices may not be fully supported on Safari.\n   * - The subscriber will not be notified if the track gets replaced.\n   * - Agora recommends you use\n   * [switchDevice](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html#switchdevice)\n   * to switch the media input devices.\n   *\n   * @example\n   * // Suppose we have a localStream1\n   *   localStream2 = AgoraRTC.createStream({ video: true, cameraId: \"ABC\" });\n   *   localStream2.setVideoProfile('<same as localStream1>')\n   *   localStream2.init(_ => {\n   *       const newVideoTrack = localStream2.getVideoTrack();\n   *       localStream1.replaceTrack(newVideoTrack);\n   *   });\n   *\n   */\n  replaceTrack: (\n    MediaStreamTrack: MediaStreamTrack,\n    onSuccess?: () => void,\n    onFailure?: (error: Error) => void\n  ) => void;\n  /**\n   * Resumes the Audio/Video Stream Playback.\n   * This method can be used when the playback fails after calling the\n   * [Stream.play](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html#play) method.\n   * In most cases, the playback is stopped due to the browser policy.\n   *\n   * This method needs to be triggered by a user gesture.\n   *\n   * @see [Autoplay Policy Changes](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes) for more information.\n   */\n  resume: () => Promise<any>;\n  /**\n   * Resumes playing all audio effects.\n   *\n   * @example\n   * stream.resumeAllEffects(err => {\n   *     if (err) {\n   *         console.error(\"Failed to resume effects, reason: \", err);\n   *     } else {\n   *         console.log(\"Effects are resumed successfully\");\n   *     }\n   * });\n   */\n  resumeAllEffects: (callback?: (error: string | null) => void) => void;\n  /**\n   * Resumes audio mixing.\n   *\n   * When the audio mixing file playback resumes, the SDK triggers the `Stream.on(\"audioMixingPlayed\")` callback on the local client.\n   */\n  resumeAudioMixing: (callback?: (error: string | null) => void) => void;\n  /**\n   * Resumes playing a specified audio effect.\n   *\n   * @example\n   * // When the audio effect 1 is paused\n   * stream.resumeEffect(1, err => {\n   *     if (err) {\n   *         console.error(\"Failed to resume Effect, reason: \", err);\n   *     } else {\n   *         console.log(\"Effect is resumed successfully\");\n   *     }\n   * });\n   */\n  resumeEffect: (\n    soundId: SoundId,\n    callback?: (error: string | null) => void\n  ) => void;\n  /**\n   * Sets the playback position of the audio mixing file to a different start position (by default plays from the beginning).\n   *\n   * @param position\n   * The time (ms) to start playing the audio mixing file, an integer. The value range is `[0,100000000]`.\n   */\n  setAudioMixingPosition: (\n    position: number,\n    callback?: (error: string | null) => void\n  ) => void;\n  /**\n   * Sets the audio output device for the remote stream. You can use it to switch between the microphone and the speakerphone.\n   * It can be called either before or after the remote stream is played.\n   *\n   * @remark\n   * Only Chrome 49+ supports this function.\n   *\n   * @param deviceId The device ID can be retrieved from\n   * [getDevices](https://docs.agora.io/en/Video/API%20Reference/web/globals.html#getdevices), whose\n   * [kind](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.mediastreamtrack.html#kind) should be \"audiooutput\".\n   *\n   * The retrieved ID is ASCII characters, and the string length is greater than 0 and less than 256 bytes.\n   */\n  setAudioOutput: (\n    deviceId: string,\n    onSuccess?: () => void,\n    onFailure?: (error: string) => void\n  ) => void;\n  /**\n   * This method sets the audio profile.\n   * It is optional and works only when called before\n   * [Stream.init](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html#init).\n   * The default value is `'music_standard'`.\n   *\n   * Due to the limitations of browsers, some browsers may not be fully compatible with the audio profile you set.\n   * - Firefox does not support setting the audio encoding rate.\n   * - Safari does not support stereo audio.\n   * - The latest version of Google Chrome does not support playing stereo audio, but supports sending a stereo audio stream.\n   *\n   * @param profile The audio profile has the following options:\n   * - `'speech_low_quality'`: Sample rate 16 kHz, mono, encoding rate 24 Kbps.\n   * - `'speech_standard'`: Sample rate 32 kHz, mono, encoding rate 24 Kbps.\n   * - `'music_standard'`: Sample rate 48 kHz, mono, encoding rate 40 Kbps.\n   * - `'standard_stereo'`: Sample rate 48 kHz, stereo, encoding rate 64 Kbps.\n   * - `'high_quality'`: Sample rate 48 kHz, mono, encoding rate 128 Kbps.\n   * - `'high_quality_stereo'`: Sample rate 48 kHz, stereo, encoding rate 192 Kbps.\n   */\n  setAudioProfile: (profile: AudioProfile) => void;\n  /**\n   * Sets the volume for the remote stream.\n   * It can be called either before or after the remote stream is played.\n   *\n   * @param volume Ranges from 0 (muted) to 100 (loudest).\n   */\n  setAudioVolume: (volume: number) => void;\n  /**\n   * Enables/Disables image enhancement and sets the options.\n   *\n   *\n   * This method supports the following browsers:\n   * - Safari 12 or later\n   * - Chrome 65 or later\n   * - Firefox 70.0.1 or later\n   *\n   * @remark\n   * - This function does not support mobile devices.\n   * - If the dual-stream mode is enabled\n   *   ([enableDualStream](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#enabledualstream)),\n   *   the image enhancement options apply only to the high-video stream.\n   * - If image enhancement is enabled, you must call this method to disable it before calling the following methods:\n   *  - [leave](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#leave)\n   *  - [stop](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html#stop)\n   *  - [removeTrack](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html#removetrack)\n   *  - [unpublish](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#unpublish)\n   *\n   * - The image enhancement function involves real-time compute-intensive processing.\n   *   Though it is based on hardware acceleration, the processing has high GPU and CPU overheads.\n   *   For low-end devices, enabling image enhancement affects the system performance.\n   *   When the video resolution is set as 360p, 720p or higher, and the frame rate is set as 30 fps or 15 fps,\n   *   do not enable image enhancement.\n   *\n   * @example\n   * stream.setBeautyEffectOptions(true, {\n   *     lighteningContrastLevel: 1,\n   *     lighteningLevel: 0.7,\n   *     smoothnessLevel: 0.5,\n   *     rednessLevel: 0.1\n   * });\n   *\n   * @since 3.0.0\n   */\n  setBeautyEffectOptions: (\n    enabled: boolean,\n    options: BeautyEffectOptions\n  ) => void;\n  /**\n   * Sets the volume of the audio effects.\n   *\n   * @param volume\n   * Volume of the audio effect. The value range is [0,100].The default value is 100 (the original volume).\n   *\n   * @example\n   * stream.setEffectsVolume(0, err => {\n   *     if (err) {\n   *         console.error(\"Failed to set effects volume, reason: \", err);\n   *     } else {\n   *         console.log(\"Effects volume is set successfully\");\n   *     }\n   * });\n   */\n  setEffectsVolume: (\n    volume: number,\n    callback?: (error: string | null) => void\n  ) => void;\n  /**\n   * This method sets the profile of the screen in screen-sharing.\n   *\n   * @see [Table](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html#setscreenprofile) for details.\n   *\n   * @remark\n   * Due to limitations of some devices and browsers, the resolution you set may fail to take effect and get adjusted by the browser.\n   * In this case, billings will be calculated based on the actual resolution.\n   */\n  setScreenProfile: (profile: ScreenProfile) => void;\n  /**\n   * Customizes the Video Encoder Configuration.\n   * You can use this method to customize the video resolution, frame rate, and bitrate of the local stream.\n   * This method can be called before or after\n   * [Stream.init](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html#init).\n   *\n   * @remark\n   * - Do not call this method when publishing streams.\n   * - If you enable dual streams\n   *   ([enableDualStream](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#enabledualstream)),\n   *   we do not support increasing the video resolution in this method.\n   *   This is a [known issue](https://bugs.chromium.org/p/chromium/issues/detail?id=768205) of Chromium.\n   * - On some iOS devices, when you update the video encoder configuration after\n   *   [Stream.init](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html#init),\n   *   black bars might appear around your video.\n   * - The actual resolution, frame rate, and bitrate depend on the device,\n   *   see [Media​Stream​Track​.apply​Constraints()](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/applyConstraints)\n   *   for more information.\n   * - This method works on Chrome 63 or later and is not fully functional on other browsers with the following issues:\n   *  - The frame rate setting does not take effect on Safari 12 or earlier.\n   *  - Safari 11 or earlier only supports specific resolutions.\n   *  - Safari on iOS does not support low resolutions in H.264 codec.\n   *\n   * @example\n   * stream.setVideoEncoderConfiguration({\n   *  // Video resolution\n   *  resolution: {\n   *      width: 640,\n   *      height: 480\n   *  },\n   *  // Video encoding frame rate. We recommend 15 fps. Do not set this to a value greater than 30.\n   *  frameRate: {\n   *      min: 15,\n   *      max: 30\n   *  },\n   *  // Video encoding bitrate.\n   *  bitrate: {\n   *      min: 1000,\n   *      max: 5000\n   *  }\n   * });\n   */\n  setVideoEncoderConfiguration: (config: VideoEncoderConfiguration) => void;\n  /**\n   * Sets the stream's video profile.\n   *\n   * This method sets the video encoding profile for the local stream. Each video encoding profile includes a set of parameters,\n   * such as the resolution,frame rate, and bitrate. The default value is `\"480p_1\"`.\n   *\n   * This method is optional and is usually called before\n   * [Stream.init](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html#init).\n   * From v2.7, you can also call this method after\n   * [Stream.init](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html#init)\n   * to change the video encoding profile.\n   *\n   * @example\n   * setVideoProfile(\"480p\");\n   *\n   * @remark\n   * - Do not call this method when publishing streams.\n   * - If you enable dual streams\n   *   ([enableDualStream](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#enabledualstream)),\n   *   we do not support increasing the video resolution in this method. This is a\n   *   [known issue](https://bugs.chromium.org/p/chromium/issues/detail?id=768205) of Chromium.\n   * - On some iOS devices, when you update the video profile after\n   *   [Stream.init](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html#init),\n   *   black bars might appear around your video.\n   * - Changing the video profile after\n   *   [Stream.init](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html#init) works only on\n   *   Chrome 63 or later and Safari 11 or later.\n   *\n   * - Whether 1080 resolution or above can be supported depends on the device. If the device cannot support 1080p, the actual frame rate\n   *   is lower than the one listed in the table. Agora optimizes the video on low-end devices.\n   * - The Safari browser does not support modifying the video frame rate (30 fps by default). If you set a frame rate other than 30 fps on\n   *   Safari, the browser may change or reject your setting.\n   * - Due to limitations of some devices and browsers, the resolution you set may fail to take effect and get adjusted by the browser. In\n   *   this case, billings are calculated based on the actual resolution.\n   */\n  setVideoProfile: (profile: VideoProfile) => void;\n  /**\n   * Sets the volume of a specified audio effect.\n   *\n   * @param volume Volume of the audio effect. The value range is `[0,100]`.The default value is 100 (the original volume).\n   *\n   * @example\n   * // When the audio effect 1 is loaded\n   * stream.setVolumeOfEffect(1, 50, err => {\n   *   if (err) {\n   *       console.error(\"Failed to set volume of Effect, reason: \", err);\n   *   } else {\n   *       console.log(\"Effect volume is set to\", 50);\n   *   }\n   * });\n   *\n   *\n   */\n  setVolumeOfEffect: (\n    soundId: SoundId,\n    volume: Volume,\n    callback?: (error: string | null) => void\n  ) => void;\n  /**\n   * Starts Audio Mixing\n   * This method mixes the specified online audio file with the audio stream from the microphone; or, it\n   * replaces the microphone’s audio stream with the specified online audio file.\n   *\n   * You can specify the number of playback loops and play time duration.\n   *\n   * @remark\n   * This method supports the following browsers:\n   * - Safari 12 and later\n   * - Chrome 65 and later\n   * - Firefox 66 and later\n   *\n   * @remark\n   * - Call this method when you are in a channel, otherwise, it may cause issues.\n   * - Due to browser policy changes, this method must be triggered by the user's gesture on the Chrome 70+ and Safari browser.\n   * @see [Autoplay Policy Changes](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes) for details.\n   *\n   * @example\n   * stream.startAudioMixing({\n   *     filePath: 'example.mp3'\n   * }, error => {\n   *     if (error) {\n   *         // Error handling\n   *         return;\n   *     }\n   *     // Processes after stream playing\n   * })\n   */\n  startAudioMixing: (\n    options: AudioMixingOptions,\n    callback?: (error: string | null) => void\n  ) => void;\n  /**\n   * Stops the Audio/Video Stream\n   *\n   * Call this method to stop playing the stream set by\n   * [Stream.play](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html#play).\n   */\n  stop: (callback?: (error: string | null) => void) => void;\n  /**\n   * Stops playing all audio effects.\n   *\n   * @example\n   * stream.stopAllEffects(err => {\n   *   if (err) {\n   *       console.error(\"Failed to stop effects, reason: \", err);\n   *   } else {\n   *       console.log(\"Effects are stopped successfully\");\n   *   }\n   * });\n   */\n  stopAllEffects: (callback: (error: string | null) => void) => void;\n  /**\n   * Stops audio mixing.\n   *\n   * When the audio mixing file playback is stopped, the SDK triggers the `Stream.on(\"audioMixingFinished\")` callback on the local client.\n   */\n  stopAudioMixing: (callback: (error: string | null) => void) => void;\n  /**\n   * Stops playing a specified audio effect.\n   *\n   * @example\n   * // When the audio effect 1 is playing\n   * stream.stopEffect(1, err => {\n   *   if (err) {\n   *       console.error(\"Failed to stop Effect, reason: \", err);\n   *   } else {\n   *       console.log(\"Effect is stopped successfully\");\n   *   }\n   * });\n   */\n  stopEffect: (\n    soundId: SoundId,\n    callback?: (error: string | null) => void\n  ) => void;\n  /**\n   * Switches the media input device.\n   *\n   * This method switches between the media input devices:\n   * - Audio input devices, such as microphones.\n   * - Video input devices, such as cameras.\n   * If you call this method after [publish](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#publish),\n   * there is no need to re-publish the stream after switching the device.\n   *\n   * @param deviceId Device ID, which can be retrieved from getDevices. The retrieved ID is ASCII characters,\n   * and the string length is greater than 0 and less than 256 bytes.\n   * @remark\n   * This method does not support the following scenarios:\n   * - Dual-stream mode is enabled by\n   *   [enableDualStream](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#enabledualstream).\n   * - The remote stream.\n   * - The stream is created by defining the\n   *   [audioSource](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.streamspec.html#audiosource)\n   *   and [videoSource](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.streamspec.html#videosource) properties.\n   * - The Firefox browser.\n   *\n   * @remark\n   * This method might not take effect on some mobile devices.\n   */\n  switchDevice: (\n    type: 'audio' | 'video',\n    deviceId: string,\n    onSuccess?: () => void,\n    onFailure?: (error: string) => void\n  ) => void;\n  /**\n   * Releases a specified preloaded audio effect from the memory.\n   *\n   * @example\n   * // When the audio effect 1 is loaded\n   * stream.unloadEffect(1, err => {\n   *   if (err) {\n   *       console.error(\"Failed to unload effect, reason: \", err);\n   *   } else {\n   *       console.log(\"Effect is unloaded successfully\");\n   *   }\n   * });\n   *\n   */\n  unloadEffect: (\n    soundId: SoundId,\n    callback?: (error: string | null) => void\n  ) => void;\n  /**\n   * Enables the audio track in the stream.\n   *\n   * @remark\n   * For local streams, it works only when the audio flag is `true` in the stream.\n   * By default the audio track is enabled. If you call\n   * [muteAudio](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html#muteaudio),\n   * call this method to enable audio.\n   *\n   * @returns void ([Docs unclear](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html#unmuteaudio))\n   * - `true`: Success.\n   * - `false`: Failure. Possible reasons include no audio, stream not initialized, and audio track already enabled.\n   */\n  unmuteAudio: () => void;\n  /**\n   * Enables the video track in the stream.\n   *\n   * @remark\n   * For local streams, it works only when the video flag is true in the stream.\n   *\n   * By default the video track is enabled. If you call\n   * [muteVideo](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html#mutevideo),\n   * call this method to enable video.\n   *\n   * @returns void ([Docs unclear](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html#unmutevideo))\n   * - `true`: Success.\n   * - `false`: Failure. Possible reasons include no video, stream not initialized, and video track already enabled.\n   */\n  unmuteVideo: () => void;\n  /**\n   * Not mentioned in Agora.io official docs, may be inherited DOM function.\n   */\n  addEventListener: (t: string, n: any) => any;\n  /**\n   * Calculates whether the stream's audio is currently active.\n   *\n   * @remark Refers to a snapshot of the stream's audio status and will return:\n   * - `true`: if the connected user's audio is not muted.\n   * - `false`: if the connected user's audio is muted.\n   */\n  isAudioOn: () => boolean;\n  /**\n   * Calculates whether the stream's video is currently active.\n   *\n   * @remark Refers to a snapshot of the stream's video status and will return:\n   * - `true`: if the connected user's video is not muted.\n   * - `false`: if the connected user's video is muted.\n   */\n  isVideoOn: () => boolean;\n  /**\n   * Whether the stream currently has its audio enabled.\n   *\n   * @version 2.5.2 and below only\n   */\n  audioEnabled?: boolean;\n  /**\n   * Whether the stream currently has its video enabled.\n   *\n   * @version 2.5.2 and below only\n   */\n  videoEnabled?: boolean;\n}\n","/**\n * Whether to receive the video or audio data independently by the video and audio parameters.\n *\n * @remark\n * `video` and `audio` cannot be set as `false` at the same time.\n * If you need to stop subscribing to the stream, call\n * [Client.unsubscribe](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#unsubscribe) instead.\n * Safari does not support independent subscription. Set options as null for Safari, otherwise the\n * `SAFARI_NOT_SUPPORTED_FOR_TRACK_SUBSCRIPTION` error occurs.\n */\nexport interface SubscribeOptions {\n  /**\n   * Whether to receive the audio data.\n   * - true: (Default) Receives the audio data.\n   * - false: Not receives the audio data.\n   */\n  audio?: boolean;\n  /**\n   * Whether to receive the video data.\n   * - true: (Default) Receives the video data.\n   * - false: Not receives the video data.\n   */\n  video?: boolean;\n}\n","/**\n * System statistics.\n */\nexport interface SystemStats {\n  /**\n   * Battery level of the system (%).\n   */\n  BatteryLevel: string;\n}\n","export interface TranscodingUser {\n  /**\n   * Transparency of the video frame.\n   *\n   * The value ranges between 0.0 and 1.0:\n   * - 0.0: Completely transparent.\n   * - 1.0: (Default) Opaque.\n   */\n  alpha?: number;\n  /**\n   * Height of the video.\n   *\n   * Integer only. The value range is `[0,10000]`, and the default value is `640`.\n   */\n  height?: number;\n  /** User ID of the CDN live host. */\n  uid?: number | string;\n  /**\n   * Width of the video.\n   *\n   * Integer only. The value range is `[0,10000]`, and the default value is `360`.\n   */\n  width?: number;\n  /**\n   * The position of the upper left end of the video on the horizontal axis.\n   *\n   * Integer only. The value range is `[0,10000]`, and the default value is `0`.\n   */\n  x?: number;\n  /**\n   * The position of the upper left end of the video on the vertical axis.\n   *\n   * Integer only. The value range is `[0,10000]`, and the default value is `0`.\n   */\n  y?: number;\n  /**\n   * Layer position of the video frame.\n   *\n   * Integer only. The value range is `[0,100]`.\n   *\n   * From v2.3.0, Agora SDK supports setting zOrder as 0.\n   * - 0: (Default) Lowest.\n   * - 100: Highest.\n   */\n  zOrder?: number;\n}\n","/**\n * Statistics of the network connection.\n */\nexport interface TransportStats {\n  /**\n   * The network type.\n   * @remark\n   * Chrome 61+ is required for this function, and the compatibility is not guaranteed.\n   * @see [Network Information API](https://developer.mozilla.org/en-US/docs/Web/API/Network_Information_API) for details.\n   */\n  NetworkType: 'bluetooth' | 'cellular' | 'ethernet' | 'none' | 'wifi' | 'wimax' | 'other' | 'unknown' | 'UNSUPPORTED';\n  /**\n   * The estimated available bandwidth for sending the stream, in Kbps.\n   */\n  OutgoingAvailableBandwidth: string;\n  /**\n   * RTT (Round-Trip Time) between the SDK and the access node of the SD-RTN, in ms.\n   */\n  RTT: string;\n}\n","/**\n * TURN server settings.\n *\n * Enterprise users with a company firewall can use this property to pass audio and video data to the Agora SD-RTN through the TURN Server.\n */\nexport interface TurnServer {\n  /**\n   * Sets whether to force data transfer by TURN Server:\n   * - true: Force data transfer.\n   * - false: (default) Not to force data transfer.\n   */\n  forceTurn?: boolean;\n  /**\n   * Your TURN Server password. ASCII characters only, and the string length must be greater than 0 and less than 256 bytes.\n   */\n  password: string;\n  /**\n   * The TCP port(s) you want add to TURN Server.\n   * Numeric characters only, and the string length must be greater than 0 and less than 256 bytes.\n   */\n  tcpport?: string;\n  /**\n   * Your TURN Server URL address. ASCII characters only, and the string length must be greater than 0 and less than 256 bytes.\n   */\n  turnServerURL: string;\n  /**\n   * The UDP port(s) you want to add to TURN Server.\n   * Numeric characters only, and the string length must be greater than 0 and less than 256 bytes.\n   */\n  udpport: string;\n  /**\n   * Your TURN Server username. ASCII characters only, and the string length must be greater than 0 and less than 256 bytes.\n   */\n  username: string;\n}\n","/**\n * The video encoder configuration.\n *\n * This interface sets the video encoder configuration in\n * [setVideoEncoderConfiguration](https://docs.agora.io/en/Voice/API%20Reference/web/interfaces/agorartc.stream.html#setvideoencoderconfiguration).\n *\n * Depending on the OS, browser, and camera, the actual resolution, frame rate, and bitrate might be different from the set values.\n *\n * @remark\n * - Whether 1080 resolution or above can be supported depends on the device.\n *   If the device cannot support 1080p, the actual frame rate is lower than the one listed in the table.\n *   Agora optimizes the video on low-end devices.\n * - With the update of web browsers, this table might not reflect all the supported profiles for each browser.\n *   The actual support is subject to the device and web browser version.\n * - Some versions of some web browsers might not support all the video profiles listed in the table.\n *   In this case, we recommend you use the mainstream video profiles (the ones with the _1 suffix in the above table).\n * - The Safari browser does not support modifying the video frame rate (30 fps by default).\n *   If you set a frame rate other than 30 fps on Safari, the browser may change or reject your setting.\n * - Due to limitations of some devices and browsers, the resolution you set may fail to take effect and get adjusted by\n *   the browser. In this case, billings are calculated based on the actual resolution.\n *\n * @see [Video Profile Definition](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.videoencoderconfiguration.html)\n */\nexport interface VideoEncoderConfiguration {\n  /**\n   * The video bitrate (Kbps). The value range is [1,10000000].\n   *\n   * We recommend setting the bitrate between 100 Kbps and 5000 Kbps. You can refer to the table below and set your bitrate.\n   */\n  bitrate?: {\n    /** The maximum bitrate. */\n    max: number;\n    /** The minimum bitrate. */\n    min: number;\n  };\n  /**\n   * The video frame rate (fps).\n   *\n   * The value range is [1, 10000]. We recommend setting the frame rate between 5 fps and 30 fps.\n   *\n   * @remark\n   * - This parameter sets the local capturing video frame rate. The actual encoding frame rate depends on the device, system, and browser.\n   * - When the network conditions change, the browser adjusts the encoding frame rate automatically.\n   */\n  frameRate?: {\n    /** The maximum frame rate. */\n    max: number;\n    /** The minimum frame rate. The SDK uses this value as the preferred frame rate. */\n    min: number;\n  };\n  /**\n   * Resolution of the video.\n   *\n   * We recommend using common resolutions, for example:\n   * - 480 x 360\n   * - 640 x 480\n   * - 960 x 720\n   */\n  resolution?: {\n    /** Height of the video. The value range is [1,10000]. */\n    height: number;\n    /** Width of the video. The value range is [1,10000]. */\n    width: number;\n  };\n}\n","/**\n * Options for playing an Agora.io media stream.\n */\nexport interface VideoPlayOptions {\n  /**\n   * Video display mode:\n   * - `'cover'`: Uniformly scale the video until it fills the visible boundaries (cropped).\n   *   One dimension of the video may have clipped contents. Refer to the cover option of object-fit in CSS.\n   * - `'contain'`: Uniformly scale the video until one of its dimension fits the boundary (zoomed to fit).\n   *   Areas that are not filled due to the disparity in the aspect ratio will be filled with black.\n   *   Refer to the contain option of object-fit in CSS.\n   *\n   * For local streams, by default the cover mode is used for video playing and the contain mode is used for screen sharing;\n   * for remote streams, by default the cover mode is used.\n   */\n  fit?: 'cover' | 'contain';\n  /**\n   * Sets whether to mute the playing stream.\n   *\n   * The `muted` flag can be used as a workaround for the browser's autoplay policy.\n   *\n   * On Chrome 70+ and Safari, a video stream with sound does not play until triggered by a user gesture.\n   * If you want to play the video anyway without a user gesture, you can set the muted flag to true, so that the video is\n   * automatically played without sound.\n   *\n   * @see [Autoplay Policy Changes](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes) for more information.\n   */\n  muted?: boolean;\n}\n","/**\n * Error message of the media stream relay.\n */\nexport enum ChannelMediaMessage {\n  /** No error. */\n  'RELAY_OK',\n  /** An error occurs in the server response. */\n  'SERVER_ERROR_RESPONSE',\n  /** No server response. */\n  'SERVER_NO_RESPONSE',\n  /** The SDK fails to access the service, probably due to limited resources of the server. */\n  'NO_RESOURCE_AVAILABLE',\n  /** Fails to send the relay request. */\n  'FAILED_JOIN_SRC',\n  /** Fails to accept the relay request. */\n  'FAILED_JOIN_DEST',\n  /** The server fails to receive the media stream. */\n  'FAILED_PACKET_RECEIVED_FROM_SRC',\n  /** The server fails to send the media stream. */\n  'FAILED_PACKET_SENT_TO_DEST',\n  /**\n   * The SDK disconnects from the server and fails to reconnect to the server due to a poor network connection.\n   * In this case, the SDK resets the media stream relay state.\n   * You can try\n   * [startChannelMediaRelay](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#startchannelmediarelay)\n   * to restart the media stream relay.\n   */\n  'SERVER_CONNECTION_LOST',\n  /** An internal error occurs in the server. */\n  'INTERNAL_ERROR',\n  /** The token of the source channel has expired. */\n  'SRC_TOKEN_EXPIRED',\n  /** The token of the destination channel has expired. */\n  'DEST_TOKEN_EXPIRED',\n  /**\n   * The relay has already started. Possibly caused by calling\n   * [startChannelMediaRelay](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#startchannelmediarelay)\n   * repeatedly, or calling\n   * [startChannelMediaRelay](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#startchannelmediarelay)\n   * before\n   * [stopChannelMediaRelay](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#stopchannelmediarelay)\n   * succeeds.\n   */\n  'RELAY_ALREADY_START',\n  /**\n   * The relay has not started. Possibly caused by calling\n   * [updateChannelMediaRelay](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#updatechannelmediarelay)\n   * before\n   * [startChannelMediaRelay](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#startchannelmediarelay)\n   * succeeds.\n   */\n  'RELAY_NOT_START',\n}\n","/**\n * Events that the Agora.io SDK `client.on()` function recognizes.\n *\n * If the API changes faster than the library, a quick type override can help bypass compiler errors:\n *\n * @example\n * this.ngxAgoraService.client.on('new-event' as ClientEvent, (data) => {})\n */\nexport enum ClientEvent {\n  /**\n   * Occurs when the first remote audio frame is decoded.\n   * The SDK triggers this callback when the local client successfully subscribes to a remote stream and decodes the first audio frame.\n   *\n   * @example\n   * client.on('first-audio-frame-decode', function (evt) {\n   *  console.log('first-audio-frame-decode');\n   *  console.log(evt.stream);\n   * })\n   */\n  FirstAudioFrameDecoded = 'first-audio-frame-decode',\n  /**\n   * Occurs when the first remote video frame is decoded.\n   * The SDK triggers this callback when the local client successfully subscribes to a remote stream and decodes the first video frame.\n   *\n   * @example\n   * client.on('first-video-frame-decode', function (evt) {\n   *  console.log('first-video-frame-decode');\n   *  console.log(evt.stream);\n   * })\n   */\n  FirstVideoFrameDecoded = 'first-video-frame-decode',\n  /**\n   * Occurs when the local stream is published.\n   *\n   * @example\n   * client.on(\"stream-published\", function(evt) {\n   *  console.log(\"local stream published\");\n   *  //……\n   * })\n   */\n  LocalStreamPublished = 'stream-published',\n  /**\n   * Occurs when the remote stream is added.\n   *\n   * @remark\n   * When the local user joins the channel, if other users are already in the channel,\n   * the SDK also reports to the app on the existing remote streams.\n   *\n   * @example\n   * client.on(\"stream-added\", function(evt) {\n   *  var stream = evt.stream;\n   *  console.log(\"new stream added \", stream.getId());\n   *  // Subscribe the stream.\n   *  //……\n   * })\n   */\n  RemoteStreamAdded = 'stream-added',\n  /**\n   * Occurs when the remote stream is removed; for example, a peer user calls\n   * [Client.unpublish](https://docs.agora.io/en/Voice/API%20Reference/web/interfaces/agorartc.client.html#unpublish).\n   *\n   * @example\n   * client.on(\"stream-removed\", function(evt) {\n   *  var stream = evt.stream;\n   *  console.log(\"remote stream was removed\", stream.getId());\n   *  //……\n   * });\n   */\n  RemoteStreamRemoved = 'stream-removed',\n  /**\n   * Occurs when a user subscribes to a remote stream.\n   *\n   * @example\n   * client.on(\"stream-subscribed\", function(evt) {\n   *  var stream = evt.stream;\n   *  console.log(\"new stream subscribed \", stream.getId());\n   *  // Play the stream.\n   *  //……\n   * })\n   */\n  RemoteStreamSubscribed = 'stream-subscribed',\n  /**\n   * Occurs when the peer user leaves the channel; for example, the peer user calls\n   * [Client.leave](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#leave).\n   */\n  PeerLeave = 'peer-leave',\n  /**\n   * Occurs when a remote user or host joins the channel.\n   * - Communication channel (rtc mode): This callback notifies the app that another user joins the channel.\n   *   If other users are already in the channel, the SDK also reports to the app on the existing users.\n   * - Live-broadcast channel (live mode): This callback notifies the app that the host joins the channel.\n   *   If other hosts are already in the channel, the SDK also reports to the app on the existing hosts.\n   *   Agora recommends limiting the number of hosts to 17.\n   */\n  PeerOnline = 'peer-online',\n  /**\n   * Occurs when the peer user mutes the audio.\n   *\n   * @example\n   * client.on(\"mute-audio\", function(evt) {\n   *  var uid = evt.uid;\n   *  console.log(\"mute audio:\" + uid);\n   *  //alert(\"mute audio:\" + uid)\n   * });\n   */\n  RemoteAudioMuted = 'mute-audio',\n  /**\n   * Occurs when the peer user unmutes the audio.\n   *\n   * @example\n   * client.on(\"unmute-audio\", function (evt) {\n   *  var uid = evt.uid;\n   *  console.log(\"unmute audio:\" + uid);\n   * });\n   */\n  RemoteAudioUnmuted = 'unmute-audio',\n  /**\n   * Occurs when the peer user turns off the video.\n   *\n   * @example\n   * client.on(\"mute-video\", function (evt) {\n   *  var uid = evt.uid;\n   *  console.log(\"mute video\" + uid);\n   *  //alert(\"mute video:\" + uid);\n   * })\n   */\n  RemoveVideoMuted = 'mute-video',\n  /**\n   * Occurs when the peer user turns on the video.\n   *\n   * @example\n   * client.on(\"unmute-video\", function (evt) {\n   *  var uid = evt.uid;\n   *  console.log(\"unmute video:\" + uid);\n   * })\n   */\n  RemoteVideoUnmuted = 'unmute-video',\n  /**\n   * Occurs when encryption or decryption fails during publishing or subscribing to a stream.\n   * The failure is usually due to a wrong encryption password\n   * ([setEncryptionSecret](https://docs.agora.io/en/Voice/API%20Reference/web/interfaces/agorartc.client.html#setencryptionsecret))\n   * or an incorrect encryption\n   * mode ([setEncryptionMode](https://docs.agora.io/en/Voice/API%20Reference/web/interfaces/agorartc.client.html#setencryptionmode)).\n   *\n   * @since 3.0.0\n   */\n  CryptError = 'crypt-error',\n  /**\n   * This callback notifies the peer user that he/she is banned from the channel. Only the banned users receive this callback.\n   * Usually the reason is that the UID is banned (`K_UID_BANNED`(14)).\n   *\n   * @example\n   * client.on(\"client-banned\", function (evt) {\n   *  var uid = evt.uid;\n   *  var attr = evt.attr;\n   *  console.log(\" user banned:\" + uid + \", bantype:\" + attr);\n   *  alert(\" user banned:\" + uid + \", bantype:\" + attr);\n   * });\n   */\n  LocalClientBanned = 'client-banned',\n  /** This callback notifies the application who is the active speaker in the channel. */\n  ActiveSpeaker = 'active-speaker',\n  /**\n   * This callback notifies the application of all the speaking remote users and their volumes.\n   *\n   * It is disabled by default. You can enable this event by calling enableAudioVolumeIndicator.\n   * If enabled, it reports the volumes every two seconds regardless of whether there are users speaking.\n   *\n   * The volume is an integer ranging from 0 to 100. Usually a user with volume above five will be countedas a speaking user.\n   */\n  VolumeIndicator = 'volume-indicator',\n  /** Occurs when the live streaming starts. */\n  LiveStreamingStarted = 'liveStreamingStarted',\n  /** Occurs when the live streaming fails. */\n  LiveStreamingFailed = 'liveStreamingFailed',\n  /** Occurs when the live streaming stops. */\n  LiveStreamingStopped = 'liveStreamingStopped',\n  /**\n   * Occurs when the live transcoding setting is updated.\n   *\n   * The SDK triggers this callback when the live transcoding setting is updated by calling the\n   * [setLiveTranscoding](https://docs.agora.io/en/Voice/API%20Reference/web/interfaces/agorartc.client.html#setlivetranscoding) method.\n   *\n   * @remark\n   * The first call of the\n   * [setLiveTranscoding](https://docs.agora.io/en/Voice/API%20Reference/web/interfaces/agorartc.client.html#setlivetranscoding)\n   * method does not trigger this callback.\n   */\n  LiveTranscodingUpdated = 'liveTranscodingUpdated',\n  /** Occurs when the injected online media stream's status is updated. */\n  StreamInjectedStatusUpdated = 'streamInjectedStatus',\n  /**\n   * Occurs when the Token expires in 30 seconds.\n   *\n   * You should request a new Token from your server and call\n   * [Client.renewToken](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#renewtoken).\n   */\n  TokenPrivelegeWillExpire = 'onTokenPrivilegeWillExpire',\n  /**\n   * Occurs when the Token expires.\n   *\n   * You should request a new Token from your server and call\n   * [Client.renewToken](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#renewtoken).\n   */\n  TokenPrivelegeExpired = 'onTokenPrivilegeDidExpire',\n  /**\n   * Occurs when an error message is reported and requires error handling.\n   * For details, @see [Error Codes and Warning Codes](https://docs.agora.io/en/Video/the_error_web).\n   */\n  Error = 'error',\n  /**\n   * Occurs when the network type changes.\n   *\n   * @remark\n   * Chrome 61+ is required for this function, and the compatibility is not guaranteed.\n   *\n   * @see [Network Information API](https://developer.mozilla.org/en-US/docs/Web/API/Network_Information_API) for details.\n   */\n  NetworkTypeChanged = 'network-type-changed',\n  /**\n   * Occurs when an audio input device is added or removed.\n   *\n   * @example\n   * client.on(\"recording-device-changed\", function(evt) {\n   *  console.log(\"Recording Device Changed\", evt.state, evt.device);\n   * });\n   */\n  RecordingDeviceChanged = 'recording-device-changed',\n  /**\n   * Occurs when an audio output device is added or removed.\n   * @remark\n   * Only supports Chrome 49+.\n   */\n  AudioOutputDeviceChanged = 'playout-device-changed',\n  /** Occurs when a camera is added or removed. */\n  CameraChanged = 'camera-changed',\n  /**\n   * Occurs when the type of a video stream changes.\n   * It happens when a high-video stream changes to a low-video stream, or vice versa.\n   *\n   * The stream type (streamType):\n   * - 0: High-bitrate, high-resolution video stream.\n   * - 1: Low-bitrate, low-resolution video stream.\n   */\n  StreamTypeChanged = 'stream-type-changed',\n  /**\n   * Occurs when the network connection state changes.\n   *\n   * The connection between the SDK and Agora's edge server has the following states:\n   *\n   * - DISCONNECTED: The SDK is disconnected from Agora's edge server.\n   *   This is the initial state before Client.join.\n   *   The SDK also enters this state after the app calls Client.leave.\n   * - CONNECTING: The SDK is connecting to Agora's edge server. The SDK enters this state when calling Client.join or\n   *   reconnecting to Agora's edge server automatically after the connection is lost.\n   * - CONNECTED: The SDK is connected to Agora's edge server and joins a channel. You can now publish or subscribe to a stream\n   *   in the channel. If the connection is lost because, for example, the network is down or switched, the SDK triggers this callback\n   *   and notifies the app that the state changes from CONNECTED to CONNECTING.\n   * - DISCONNECTING: The SDK is disconnecting from Agora's edge server. The SDK enters this state when calling Client.leave.\n   */\n  ConnectionStateChanged = 'connection-state-change',\n  /** Occurs when the SDK starts republishing or re-subscribing to a stream. */\n  StreamReconnectionStart = 'stream-reconnect-start',\n  /** Occurs when the SDK finishes republishing or re-subscribing to a stream. */\n  StreamReconnectionEnd = 'stream-reconnect-end',\n  /** Occurs when the user role switches in a live broadcast. For example, from a host to an audience or vice versa. */\n  ClientRoleChanged = 'client-role-changed',\n\n  /**\n   * Reports the network quality of the local user once every two seconds.\n   *\n   * This callback reports on the uplink and downlink network conditions of the local user.\n   *\n   * @remark\n   * This is an experimental feature and the network quality rating is for reference only.\n   */\n  NetworkQualityReported = 'network-quality',\n  /**\n   * Occurs when the remote video stream falls back to an audio-only stream due to unreliable network\n   * conditions or switches back to the video after the network conditions improve.\n   *\n   * If you set `fallbackType` as 2 in\n   * [setStreamFallbackOption](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#setstreamfallbackoption),\n   * the SDK triggers this callback when the remote media stream falls back to audio only due to unreliable network conditions\n   * or switches back to the video after the network condition improves.\n   *\n   * @remark\n   * Once the remote media stream is switched to the low stream due to unreliable network conditions, you can monitor\n   * the stream switch between a high stream and low stream in the stream-type-changed callback.\n   */\n  StreamFallback = 'stream-fallback',\n  /**\n   * Occurs when a remote stream adds or removes a track.\n   *\n   * When a remote stream calls the [addTrack](https://docs.agora.io/en/Voice/API%20Reference/web/interfaces/agorartc.stream.html#addtrack)\n   * or [removeTrack](https://docs.agora.io/en/Voice/API%20Reference/web/interfaces/agorartc.stream.html#removetrack)\n   * method, the SDK triggers this callback.\n   */\n  StreamUpdated = 'stream-updated',\n  /**\n   * Reports exception events in the channel.\n   * Exceptions are not errors, but usually mean quality issues.\n   * This callback also reports recovery from an exception.\n   * Each exception event has a corresponding recovery event\n   * @see https://web-cdn.agora.io/docs-files/1547180053430 for details\n   */\n  Exception = 'exception',\n  /**\n   * Occurs when a remote user of the Native SDK calls `enableLocalVideo(true)` to enable video capture.\n   *\n   * @since 3.0.0\n   */\n  RemoteVideoCaptureEnabled = 'enable-local-video',\n  /**\n   * Occurs when a remote user of the Native SDK calls `enableLocalVideo(false)` to disable video capture.\n   *\n   * @since 3.0.0\n   */\n  RemoteVideoCaptureDisabled = 'disable-local-video',\n  /**\n   * Reports events during the media stream relay.\n   *\n   * Parameters\n   * - evt: `object`\n   *  - code: `number`\n   *  The event code for media stream relay.\n   *    - 0: The user disconnects from the server due to a poor network connection.\n   *    - 1: The user is connected to the server.\n   *    - 2: The user joins the source channel.\n   *    - 3: The user joins the destination channel.\n   *    - 4: The SDK starts relaying the media stream to the destination channel.\n   *    - 5: The server receives the video stream from the source channel.\n   *    - 6: The server receives the audio stream from the source channel.\n   *    - 7: The destination channel is updated.\n   */\n  MediaStreamEventRelayed = 'channel-media-relay-event',\n  /**\n   * Occurs when the state of the media stream relay changes.\n   *\n   * @since 3.0.0\n   * @description\n   * The SDK reports the state and error code of the current media relay in this callback.\n   *\n   * Parameters\n   * - evt: `object`\n   *  - code: `number`\n   *  The error code.\n   *    - 0: No error.\n   *    - 1: An error occurs in the server response.\n   *    - 2: No server response.\n   *    - 3: The SDK fails to access the service, probably due to limited resources of the server.\n   *    - 4: Fails to send the relay request.\n   *    - 5: Fails to accept the relay request.\n   *    - 6: The server fails to receive the media stream.\n   *    - 7: The server fails to send the media stream.\n   *    - 8: The SDK disconnects from the server and fails to reconnect to the server due to a poor network connection.\n   *         In this case, the SDK resets the relay state. You can try\n   *  [startChannelMediaRelay](https://docs.agora.io/en/Voice/API%20Reference/web/interfaces/agorartc.client.html#startchannelmediarelay)\n   *         to restart the media stream relay.\n   *    - 9: An internal error occurs in the server.\n   *    - 10: The token of the source channel has expired.\n   *    - 11: The token of the destination channel has expired.\n   *    - 12: The relay has already started. Possibly caused by calling\n   *  [startChannelMediaRelay](https://docs.agora.io/en/Voice/API%20Reference/web/interfaces/agorartc.client.html#startchannelmediarelay)\n   *          repeatedly, or calling\n   *  [startChannelMediaRelay](https://docs.agora.io/en/Voice/API%20Reference/web/interfaces/agorartc.client.html#startchannelmediarelay)\n   *          before\n   *  [stopChannelMediaRelay](https://docs.agora.io/en/Voice/API%20Reference/web/interfaces/agorartc.client.html#stopchannelmediarelay)\n   *          succeeds.\n   *    - 13: The relay has not started. Possibly caused by calling\n   *  [updateChannelMediaRelay](https://docs.agora.io/en/Voice/API%20Reference/web/interfaces/agorartc.client.html#updatechannelmediarelay)\n   *          before\n   *  [startChannelMediaRelay](https://docs.agora.io/en/Voice/API%20Reference/web/interfaces/agorartc.client.html#startchannelmediarelay)\n   *          succeeds.\n   *\n   *  - state: `number`\n   *    The state code.\n   *    - 0: The SDK is initializing.\n   *    - 1: The SDK tries to relay the media stream to the destination channel.\n   *    - 2: The SDK successfully relays the media stream to the destination channel.\n   *    - 3: An error occurs. See `code` for the error code. In case of an error, the SDK resets the media stream relay state,\n   *         and you need to call\n   * [startChannelMediaRelay](https://docs.agora.io/en/Voice/API%20Reference/web/interfaces/agorartc.client.html#startchannelmediarelay)\n   *         to restart the relay.\n   */\n  MediaStreamRelayStateChanged = 'channel-media-relay-state',\n}\n","export enum CodecType {\n  Opus = '1',\n  AAC = '2'\n}\n","/**\n * Allowed logging levels for the AgoraRTC.Logger module.\n */\nexport enum LogLevel {\n  /** Outputs all logs. */\n  Debug,\n  /** Outputs logs of the INFO, WARNING and ERROR levels. */\n  Info,\n  /** Outputs logs of the WARNING and ERROR levels. */\n  Warning,\n  /** Outputs logs of the ERROR level. */\n  Error,\n  /** Outputs no logs. */\n  None\n}\n","export enum MuteState {\n  Unmuted = '0',\n  Muted = '1'\n}\n","/**\n * /**\n * Events that the Agora.io SDK `Stream.on()` function recognizes.\n *\n * If the API changes faster than the library, a quick type override can help bypass compiler errors:\n *\n * @example\n * localStream.on('new-event' as ClientEvent, (data) => {})\n */\nexport enum StreamEvent {\n  /** Occurs when the user gives access to the camera and microphone. */\n  MediaAccessAllowed = 'accessAllowed',\n  /** Occurs when the user denies access to the camera and microphone. */\n  MediaAccessDenied = 'accessDenied',\n  /** Occurs when screen-sharing stops. */\n  ScreenSharingStopped = 'stopScreenSharing',\n  /**\n   * Occurs when the video track no longer provides data to the stream.\n   *\n   * Possible reasons include device removal and deauthorization.\n   *\n   * @see [Media​Stream​Track​.onended](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/onended).\n   */\n  VideoTrackEnded = 'videoTrackEnded',\n  /**\n   * Occurs when the audio track no longer provides data to the stream.\n   *\n   * Possible reasons include device removal and deauthorization.\n   *\n   * @see [Media​Stream​Track​.onended](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/onended).\n   */\n  AudioTrackEnded = 'audioTrackEnded',\n  /**\n   * Occurs when the audio mixing stream playback starts/resumes.\n   *\n   * @remark\n   * This callback is triggered when the audio mixing stream is loaded and starts playing,\n   * or when the paused audio mixing stream resumes playing.\n   */\n  AudioMixingPlayed = 'audioMixingPlayed',\n  /** Occurs when the last audio mixing stream playback finishes. */\n  AudioMixingFinished = 'audioMixingFinished',\n  /**\n   * Occurs when the stream playback status changes.\n   *\n   * On Windows, frequent DOM manipulations might cause the browser to pause the Chrome player.\n   * To avoid this, you can listen for this event and call the\n   * [Stream.resume](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.stream.html#resume)\n   * method to resume the playback.\n   *\n   * This callback has the following properties.\n   *\n   * - isErrorState: Whether or not the playback fails.\n   *  - true: The playback fails.\n   *  - false: The playback is normal.\n   *\n   * - mediaType: The player type.\n   *  - \"audio\": Audio player.\n   *  - \"video\": Video player.\n   *\n   * - status: The playback status.\n   *  - \"play\": Playing.\n   *  - \"aborted\": The player is removed before the stream is played successfully.\n   *  - \"paused\": The player is stopped.\n   *\n   * - reason: The reason why the playback status changes. Usually, this value is the event that triggers the status change.\n   *   Possible values include the following:\n   *  - \"playing\": The playback starts.\n   *    See [HTMLMedia​Element: playing event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playing_event).\n   *  - \"stalled\": The failure might be caused by the browser policy.\n   *    See [stalled event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/stalled_event).\n   *  - \"pause\": The stream playback might be paused by the user.\n   *    See [pause event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/pause_event).\n   *  - \"suspend\": The failure might be caused by the browser policy.\n   *    See [suspend event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/suspend_event).\n   *  - \"canplay\": Some browsers automatically stop the playback when the playback window is not displayed on the screen.\n   *    See [canplay event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canplay_event).\n   *  - \"timer\": The playback failure is caused by an unknown reason and captured by the internal timer.\n   *\n   * @example\n   * stream.on(\"player-status-change\", function(evt) {\n   *   if (evt.isErrorState && evt.status === \"paused\") {\n   *       console.error(`Stream is paused unexpectedly. Trying to resume...`);\n   *       stream.resume().then(function() {\n   *           console.log(`Stream is resumed successfully`);\n   *       }).catch(function(e) {\n   *           console.error(`Failed to resume stream. Error ${e.name} Reason ${e.message}`);\n   *       });\n   *   }\n   * });\n   */\n  StreamPlaybackStatusChanged = 'player-status-change',\n}\n"],"names":[],"mappings":"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"}